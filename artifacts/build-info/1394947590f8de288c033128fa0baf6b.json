{
	"id": "1394947590f8de288c033128fa0baf6b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"pTOKEN2.sol": {
				"content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n/**\n * @title pTOKEN, Yield bearing token backed by ERC20\n *\n * @notice The backing / pTOKEN ratio is designed to appreciate for every mints and redeems that occur.\n * @custom:purpose The main purpose of pTOKENs is to generate revenue and contribute to bribing economy of ve(3;3) Dexes while being backed\n *\n * @author Michael Damiani\n */\ncontract pTOKEN is ERC20Burnable, Ownable, ReentrancyGuard {\n\n    using SafeERC20 for IERC20;\n\n    /**\n     * @custom:section                           ** ERRORS **\n     */\n    error ZeroAddressNotAllowed();\n    error MustTradeOverMin();\n    error MintAndRedeemFeeNotInRange();\n    error TeamFeeNotInRange();\n\n    /**\n     * @custom:section                           ** IMMUTABLES **\n     */\n    IERC20 public immutable _BACKING;\n\n    /**\n     * @custom:section                           ** CONSTANTS **\n     */\n    uint256 private constant _MIN = 1000;\n    uint256 private constant _FEE_BASE_1000 = 1000;\n\n    /**\n     * @custom:section                           **  STATE VARIABLES **\n     */\n    uint256 public MINT_AND_REDEEM_FEE = 967; // MINT_AND_REDEEM_FEE is the total amount of Fees, Fees are calculated by taking _FEE_BASE_1000 dividing MINT_AND_REDEEM_FEE and dividing by 100 to get the percentage.\n    uint256 public FEES = 35; //FEES include both team profit and liquidity incentives, FEES amount is sent to feeAddress that is a FeeSplitter contract which is going to split the FEES between team wallet/ treasury multisig and Liquidity incentives wallet/ multisig\n\n    uint256 public totalBacking;\n    address payable public feeAddress;\n\n    bool private start;\n    address private initialOwner = address(1);\n\n    /**\n     * @custom:section                           ** EVENTS **\n     */\n    event PriceAfterMint(\n        uint256 indexed time,\n        uint256 indexed recieved,\n        uint256 indexed sent\n    );\n    event PriceAfterRedeem(\n        uint256 indexed time,\n        uint256 indexed recieved,\n        uint256 indexed sent\n    );\n    event FeeAddressUpdated(address indexed newFeeAddress);\n    event TotalBackingFixed(uint256 indexed totalBackingEmergencyFixed);\n    event MintAndRedeemFeeUpdated(uint256 MINT_AND_REDEEM_FEE);\n    event TeamFeeUpdated(uint256 FEES);\n\n    /**\n     * @custom:section                           ** CONSTRUCTOR **\n     */\n    constructor(address _feeAddress, address _backing) ERC20(\"pantheon TOKEN\", \"pTOKEN\") Ownable(initialOwner){\n        if (_feeAddress == address(0)) revert ZeroAddressNotAllowed();\n        if (_backing == address(0)) revert ZeroAddressNotAllowed();\n\n        feeAddress = payable(_feeAddress);\n        _BACKING = IERC20(_backing);\n    }\n\n    /**\n     * @custom:section                           ** EXTERNAL FUNCTIONS **\n     */\n\n    /**\n     * @param _value: Fill the contract with the first amount of _BACKING\n     * @notice need start = false\n     * @notice  this function doesn't have fees, it will mint pTOKEN in a 1:1 ratio with _value\n     */\n    function fillContract(uint256 _value) external onlyOwner {\n        require(!start);\n        SafeERC20.safeTransferFrom(_BACKING, msg.sender, address(this), _value);\n        _mint(msg.sender, _value);\n        transfer(0x000000000000000000000000000000000000dEaD, 1000);\n\n        totalBacking = _BACKING.balanceOf(address(this));\n    }\n\n    function setStart() external onlyOwner {    \n        start = true;\n    }\n\n    /**\n     * @param receiver: is the address that will receive the pTOKEN minted\n     * @notice This function is used by users that want to mint pTOKEN by depositing the corrisponding amount of Backing + a dynamic fee\n     * @notice The Backing / pTOKEN ratio will increase after every mint\n     */\n    function mint(address receiver, uint256 _amount) external nonReentrant {\n        if (_amount < _MIN) revert MustTradeOverMin();\n\n        uint256 pToken = _BACKINGtoPTOKEN(_amount);\n\n        uint256 backingToFeeAddress = _amount / FEES;\n        totalBacking += (_amount - backingToFeeAddress);\n\n        SafeERC20.safeTransferFrom(_BACKING, msg.sender, feeAddress, backingToFeeAddress);\n\n        _mint(receiver, (pToken * MINT_AND_REDEEM_FEE) / _FEE_BASE_1000);\n\n        emit PriceAfterMint(block.timestamp, pToken, _amount);\n    }\n\n    /**\n     * @param _amount: is the amount of pTOKEN that the user want to burn in order to redeem the corrisponding amount of Backing\n     * @notice This function is used by users that want to burn their balance of pTOKEN and redeem the corrisponding amount of Backing - dynamic fees from 2% up to 5%\n     * @notice The Backing / pTOKEN ratio will increase after every redeem\n     */\n    function redeem(uint256 _amount) external nonReentrant {\n        if (_amount < _MIN) revert MustTradeOverMin();\n\n        uint256 pToken = _PTOKENtoBACKING(_amount);\n\n        uint256 backingToFeeAddress = _amount / FEES;\n        uint256 backingToSender = (_amount * MINT_AND_REDEEM_FEE) / _FEE_BASE_1000;\n        totalBacking -= (backingToSender + backingToFeeAddress);\n\n        _burn(msg.sender, pToken);\n\n        SafeERC20.safeTransferFrom(_BACKING, address(this), feeAddress, backingToFeeAddress);\n\n        SafeERC20.safeTransferFrom(_BACKING, address(this), msg.sender, backingToSender);\n\n        emit PriceAfterRedeem(block.timestamp, pToken, _amount);\n    }\n\n    /**\n     * @param _address: The Address that will receive the Liquidty Incentives and Team Fee\n     * @notice This function will be used to update the feeAddress\n     */\n    function setFeeAddress(address _address) external onlyOwner {\n        _assemblyOwnerNotZero(_address);\n        feeAddress = payable(_address);\n\n        emit FeeAddressUpdated(_address);\n    }\n\n    /**\n     * @param _amount: total fee amount, 1000 / _amount / 100 = total fee percentage\n     * @notice this function is used by Owner to modify the total FEE %\n     */\n    function setMintAndRedeemFee(uint16 _amount) external onlyOwner {\n        if(_amount > 980 || _amount < 950) revert MintAndRedeemFeeNotInRange();\n        MINT_AND_REDEEM_FEE = _amount;\n        emit MintAndRedeemFeeUpdated(_amount);\n    }\n\n    /**\n     * @param _amount: \n     * @notice Team fee can't be more than 4% and less than 1% \n     * @notice Incentives for liquidity providers are included in the Team fee (FEES)\n     */\n    function setTeamFee(uint16 _amount) external onlyOwner {\n        if(_amount > 100 || _amount < 25) revert TeamFeeNotInRange(); \n        FEES = _amount;\n        emit TeamFeeUpdated(_amount);\n    }\n\n    /**\n     * @notice This function is used to reflect the correct amount of totalBacking in case some unexpected bug occur\n     */\n    function emergencyFixTotalBacking() external onlyOwner {\n        totalBacking = _BACKING.balanceOf(address(this));\n\n        emit TotalBackingFixed(address(this).balance);\n    }\n\n    /**\n     * @custom:section                           ** INTERNAL FUNCTIONS **\n     */\n\n    /**\n     * @custom:section                           ** PRIVATE FUNCTIONS **\n     */\n\n    /**\n     * @param _value: is the amount of backing\n     * @notice This function is used inside other function to get the current backing / pTOKEN ratio\n     */\n    function _PTOKENtoBACKING(uint256 _value) private view returns (uint256) {\n        return (_value * totalBacking) / totalSupply();\n    }\n\n    /**\n     * @param _value: is the amount of pTOKEN\n     * @notice This function is used inside other function to get the current pTOKEN / Backing ratio\n     */\n    function _BACKINGtoPTOKEN(uint256 _value) private view returns (uint256) {\n        return (_value * totalSupply()) / (totalBacking);\n    }\n\n    /**\n     * @param _addr: Is the address used in the functions that call the _assemblyOwnerNotZero function\n     * @notice This function is used inside other function to check that the address put as parameter is different from the zero address. It saves gas compared to a if statement + a revert with a custom error\n     */\n    function _assemblyOwnerNotZero(address _addr) private pure {\n        assembly {\n            if iszero(_addr) {\n                mstore(0x00, \"Zero address\")\n                revert(0x00, 0x20)\n            }\n        }\n    }\n\n    /**\n     * @custom:section                           **  EXTERNAL VIEW / PURE FUNCTIONS **\n     */\n\n    /**\n     * @param _amount: is the amount of backing\n     * @notice This function is used inside other function to get the current Mint price of pTOKEN in Backing\n     */\n    function getMintPrice(uint256 _amount) external view returns (uint256) {\n        return\n            (_amount * (totalSupply()) * (MINT_AND_REDEEM_FEE)) /\n            (totalBacking) /\n            (_FEE_BASE_1000);\n    }\n\n    /**\n     * @param _amount: is the amount of pTOKEN\n     * @notice This function is used inside other function to get the current Redeem price of pTOKEN in Backing\n     */\n    function getRedeemPrice(uint256 _amount) external view returns (uint256) {\n        return\n            ((_amount * totalBacking) * (MINT_AND_REDEEM_FEE)) /\n            (totalSupply()) /\n            (_FEE_BASE_1000);\n    }\n\n    /**\n     * @notice This function is used inside other function to get the total amount of Backing in the contract\n     */\n    function getTotalBacking() external view returns (uint256) {\n        return totalBacking;\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ERC20Burnable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a838085b2b5c3cd4f3571a4486b669c3ad52be030d61781db6239cb613f4b41e64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a838085b2b5c3cd4f3571a4486b669c3ad52be030d61781db6239cb613f4b41e64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 CODESIZE ADDMOD JUMPDEST 0x2B 0x5C EXTCODECOPY 0xD4 RETURN JUMPI BYTE PREVRANDAO DUP7 0xB6 PUSH10 0xC3AD52BE030D61781DB6 0x23 SWAP13 0xB6 SGT DELEGATECALL 0xB4 0x1E PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "751:5018:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a838085b2b5c3cd4f3571a4486b669c3ad52be030d61781db6239cb613f4b41e64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 CODESIZE ADDMOD JUMPDEST 0x2B 0x5C EXTCODECOPY 0xD4 RETURN JUMPI BYTE PREVRANDAO DUP7 0xB6 PUSH10 0xC3AD52BE030D61781DB6 0x23 SWAP13 0xB6 SGT DELEGATECALL 0xB4 0x1E PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "751:5018:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a838085b2b5c3cd4f3571a4486b669c3ad52be030d61781db6239cb613f4b41e64736f6c63430008140033",
									".code": [
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/ReentrancyGuard.sol",
								"pTOKEN2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220dc1ce83ea60e1b632553fae24c0f2ab7a9207d097799c8a0d5a58d7ccdb10b9164736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220dc1ce83ea60e1b632553fae24c0f2ab7a9207d097799c8a0d5a58d7ccdb10b9164736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC SHR 0xE8 RETURNDATACOPY 0xA6 0xE SHL PUSH4 0x2553FAE2 0x4C 0xF 0x2A 0xB7 0xA9 KECCAK256 PUSH30 0x97799C8A0D5A58D7CCDB10B9164736F6C63430008140033000000000000 ",
							"sourceMap": "195:6066:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220dc1ce83ea60e1b632553fae24c0f2ab7a9207d097799c8a0d5a58d7ccdb10b9164736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC SHR 0xE8 RETURNDATACOPY 0xA6 0xE SHL PUSH4 0x2553FAE2 0x4C 0xF 0x2A 0xB7 0xA9 KECCAK256 PUSH30 0x97799C8A0D5A58D7CCDB10B9164736F6C63430008140033000000000000 ",
							"sourceMap": "195:6066:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dc1ce83ea60e1b632553fae24c0f2ab7a9207d097799c8a0d5a58d7ccdb10b9164736f6c63430008140033",
									".code": [
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/ReentrancyGuard.sol",
								"pTOKEN2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"errors": {
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1561,
								"contract": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"pTOKEN2.sol": {
				"pTOKEN": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_feeAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_backing",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintAndRedeemFeeNotInRange",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MustTradeOverMin",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TeamFeeNotInRange",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddressNotAllowed",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeAddress",
									"type": "address"
								}
							],
							"name": "FeeAddressUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "MINT_AND_REDEEM_FEE",
									"type": "uint256"
								}
							],
							"name": "MintAndRedeemFeeUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "recieved",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "sent",
									"type": "uint256"
								}
							],
							"name": "PriceAfterMint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "recieved",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "sent",
									"type": "uint256"
								}
							],
							"name": "PriceAfterRedeem",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "FEES",
									"type": "uint256"
								}
							],
							"name": "TeamFeeUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "totalBackingEmergencyFixed",
									"type": "uint256"
								}
							],
							"name": "TotalBackingFixed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "FEES",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "MINT_AND_REDEEM_FEE",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "_BACKING",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "emergencyFixTotalBacking",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeAddress",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "fillContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "getMintPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "getRedeemPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTotalBacking",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "redeem",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "setFeeAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "_amount",
									"type": "uint16"
								}
							],
							"name": "setMintAndRedeemFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "setStart",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "_amount",
									"type": "uint16"
								}
							],
							"name": "setTeamFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalBacking",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Michael Damiani",
						"custom:purpose": "The main purpose of pTOKENs is to generate revenue and contribute to bribing economy of ve(3;3) Dexes while being backed",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							],
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							],
							"ZeroAddressNotAllowed()": [
								{
									"custom:section": "** ERRORS **"
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"PriceAfterMint(uint256,uint256,uint256)": {
								"custom:section": "** EVENTS **"
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"constructor": {
								"custom:section": "** CONSTRUCTOR **"
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"fillContract(uint256)": {
								"params": {
									"_value": ": Fill the contract with the first amount of _BACKING"
								}
							},
							"getMintPrice(uint256)": {
								"params": {
									"_amount": ": is the amount of backing"
								}
							},
							"getRedeemPrice(uint256)": {
								"params": {
									"_amount": ": is the amount of pTOKEN"
								}
							},
							"mint(address,uint256)": {
								"params": {
									"receiver": ": is the address that will receive the pTOKEN minted"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"redeem(uint256)": {
								"params": {
									"_amount": ": is the amount of pTOKEN that the user want to burn in order to redeem the corrisponding amount of Backing"
								}
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"setFeeAddress(address)": {
								"params": {
									"_address": ": The Address that will receive the Liquidty Incentives and Team Fee"
								}
							},
							"setMintAndRedeemFee(uint16)": {
								"params": {
									"_amount": ": total fee amount, 1000 / _amount / 100 = total fee percentage"
								}
							},
							"setTeamFee(uint16)": {
								"params": {
									"_amount": ": "
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"MINT_AND_REDEEM_FEE": {
								"custom:section": "**  STATE VARIABLES **"
							},
							"_BACKING": {
								"custom:section": "** IMMUTABLES **"
							},
							"_MIN": {
								"custom:section": "** CONSTANTS **"
							}
						},
						"title": "pTOKEN, Yield bearing token backed by ERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"pTOKEN2.sol\":775:9679  contract pTOKEN is ERC20Burnable, Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0xa0)\n    /* \"pTOKEN2.sol\":1511:1514  967 */\n  0x03c7\n    /* \"pTOKEN2.sol\":1474:1514  uint256 public MINT_AND_REDEEM_FEE = 967 */\n  0x07\n  sstore\n    /* \"pTOKEN2.sol\":1711:1713  35 */\n  0x23\n    /* \"pTOKEN2.sol\":1689:1713  uint256 public FEES = 35 */\n  0x08\n  sstore\n    /* \"pTOKEN2.sol\":2093:2094  1 */\n  0x01\n    /* \"pTOKEN2.sol\":2054:2095  address private initialOwner = address(1) */\n  0x0b\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"pTOKEN2.sol\":2755:3088  constructor(address _feeAddress, address _backing) ERC20(\"pantheon TOKEN\", \"pTOKEN\") Ownable(initialOwner){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"pTOKEN2.sol\":2848:2860  initialOwner */\n  0x0b\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0e\n  dup2\n  mstore\n  0x20\n  add\n  0x70616e7468656f6e20544f4b454e000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x06\n  dup2\n  mstore\n  0x20\n  add\n  0x70544f4b454e0000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1970:1975  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  swap1\n  dup2\n  tag_9\n  swap2\n  swap1\n  tag_10\n  jump\t// in\ntag_9:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  swap1\n  dup2\n  tag_11\n  swap2\n  swap1\n  tag_10\n  jump\t// in\ntag_11:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1298  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1285  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_13\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_14\n  swap2\n  swap1\n  tag_15\n  jump\t// in\ntag_14:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_13:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_16\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  shl(0x20, tag_17)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  0x20\n  shr\n  jump\t// in\ntag_16:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1225:1412  constructor(address initialOwner) {... */\n  pop\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1713:1714  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1917:1924  _status */\n  0x06\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1917:1938  _status = NOT_ENTERED */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"pTOKEN2.sol\":2898:2899  0 */\n  0x00\n    /* \"pTOKEN2.sol\":2875:2900  _feeAddress == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"pTOKEN2.sol\":2875:2886  _feeAddress */\n  dup3\n    /* \"pTOKEN2.sol\":2875:2900  _feeAddress == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"pTOKEN2.sol\":2871:2932  if (_feeAddress == address(0)) revert ZeroAddressNotAllowed() */\n  tag_20\n  jumpi\n    /* \"pTOKEN2.sol\":2909:2932  ZeroAddressNotAllowed() */\n  mload(0x40)\n  0x8579befe00000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"pTOKEN2.sol\":2871:2932  if (_feeAddress == address(0)) revert ZeroAddressNotAllowed() */\ntag_20:\n    /* \"pTOKEN2.sol\":2966:2967  0 */\n  0x00\n    /* \"pTOKEN2.sol\":2946:2968  _backing == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"pTOKEN2.sol\":2946:2954  _backing */\n  dup2\n    /* \"pTOKEN2.sol\":2946:2968  _backing == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"pTOKEN2.sol\":2942:3000  if (_backing == address(0)) revert ZeroAddressNotAllowed() */\n  tag_21\n  jumpi\n    /* \"pTOKEN2.sol\":2977:3000  ZeroAddressNotAllowed() */\n  mload(0x40)\n  0x8579befe00000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"pTOKEN2.sol\":2942:3000  if (_backing == address(0)) revert ZeroAddressNotAllowed() */\ntag_21:\n    /* \"pTOKEN2.sol\":3032:3043  _feeAddress */\n  dup2\n    /* \"pTOKEN2.sol\":3011:3021  feeAddress */\n  0x0a\n  0x00\n    /* \"pTOKEN2.sol\":3011:3044  feeAddress = payable(_feeAddress) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"pTOKEN2.sol\":3072:3080  _backing */\n  dup1\n    /* \"pTOKEN2.sol\":3054:3081  _BACKING = IERC20(_backing) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x80\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"pTOKEN2.sol\":2755:3088  constructor(address _feeAddress, address _backing) ERC20(\"pantheon TOKEN\", \"pTOKEN\") Ownable(initialOwner){... */\n  pop\n  pop\n    /* \"pTOKEN2.sol\":775:9679  contract pTOKEN is ERC20Burnable, Ownable, ReentrancyGuard {... */\n  jump(tag_22)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_17:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  0x05\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3010  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3029:3037  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3026  _owner */\n  0x05\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3083:3091  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3073:3081  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_25:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_27:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_28:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_58\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_27\n  jump\t// in\ntag_58:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_29:\n    /* \"#utility.yul\":641:665   */\n  tag_60\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_28\n  jump\t// in\ntag_60:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_61\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_61:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_30:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_63\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_29\n  jump\t// in\ntag_63:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1352   */\ntag_3:\n    /* \"#utility.yul\":924:930   */\n  0x00\n    /* \"#utility.yul\":932:938   */\n  dup1\n    /* \"#utility.yul\":981:983   */\n  0x40\n    /* \"#utility.yul\":969:978   */\n  dup4\n    /* \"#utility.yul\":960:967   */\n  dup6\n    /* \"#utility.yul\":956:979   */\n  sub\n    /* \"#utility.yul\":952:984   */\n  slt\n    /* \"#utility.yul\":949:1068   */\n  iszero\n  tag_65\n  jumpi\n    /* \"#utility.yul\":987:1066   */\n  tag_66\n  tag_25\n  jump\t// in\ntag_66:\n    /* \"#utility.yul\":949:1068   */\ntag_65:\n    /* \"#utility.yul\":1107:1108   */\n  0x00\n    /* \"#utility.yul\":1132:1196   */\n  tag_67\n    /* \"#utility.yul\":1188:1195   */\n  dup6\n    /* \"#utility.yul\":1179:1185   */\n  dup3\n    /* \"#utility.yul\":1168:1177   */\n  dup7\n    /* \"#utility.yul\":1164:1186   */\n  add\n    /* \"#utility.yul\":1132:1196   */\n  tag_30\n  jump\t// in\ntag_67:\n    /* \"#utility.yul\":1122:1196   */\n  swap3\n  pop\n    /* \"#utility.yul\":1078:1206   */\n  pop\n    /* \"#utility.yul\":1245:1247   */\n  0x20\n    /* \"#utility.yul\":1271:1335   */\n  tag_68\n    /* \"#utility.yul\":1327:1334   */\n  dup6\n    /* \"#utility.yul\":1318:1324   */\n  dup3\n    /* \"#utility.yul\":1307:1316   */\n  dup7\n    /* \"#utility.yul\":1303:1325   */\n  add\n    /* \"#utility.yul\":1271:1335   */\n  tag_30\n  jump\t// in\ntag_68:\n    /* \"#utility.yul\":1261:1335   */\n  swap2\n  pop\n    /* \"#utility.yul\":1216:1345   */\n  pop\n    /* \"#utility.yul\":845:1352   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1358:1457   */\ntag_31:\n    /* \"#utility.yul\":1410:1416   */\n  0x00\n    /* \"#utility.yul\":1444:1449   */\n  dup2\n    /* \"#utility.yul\":1438:1450   */\n  mload\n    /* \"#utility.yul\":1428:1450   */\n  swap1\n  pop\n    /* \"#utility.yul\":1358:1457   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1463:1643   */\ntag_32:\n    /* \"#utility.yul\":1511:1588   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1508:1509   */\n  0x00\n    /* \"#utility.yul\":1501:1589   */\n  mstore\n    /* \"#utility.yul\":1608:1612   */\n  0x41\n    /* \"#utility.yul\":1605:1606   */\n  0x04\n    /* \"#utility.yul\":1598:1613   */\n  mstore\n    /* \"#utility.yul\":1632:1636   */\n  0x24\n    /* \"#utility.yul\":1629:1630   */\n  0x00\n    /* \"#utility.yul\":1622:1637   */\n  revert\n    /* \"#utility.yul\":1649:1829   */\ntag_33:\n    /* \"#utility.yul\":1697:1774   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1694:1695   */\n  0x00\n    /* \"#utility.yul\":1687:1775   */\n  mstore\n    /* \"#utility.yul\":1794:1798   */\n  0x22\n    /* \"#utility.yul\":1791:1792   */\n  0x04\n    /* \"#utility.yul\":1784:1799   */\n  mstore\n    /* \"#utility.yul\":1818:1822   */\n  0x24\n    /* \"#utility.yul\":1815:1816   */\n  0x00\n    /* \"#utility.yul\":1808:1823   */\n  revert\n    /* \"#utility.yul\":1835:2155   */\ntag_34:\n    /* \"#utility.yul\":1879:1885   */\n  0x00\n    /* \"#utility.yul\":1916:1917   */\n  0x02\n    /* \"#utility.yul\":1910:1914   */\n  dup3\n    /* \"#utility.yul\":1906:1918   */\n  div\n    /* \"#utility.yul\":1896:1918   */\n  swap1\n  pop\n    /* \"#utility.yul\":1963:1964   */\n  0x01\n    /* \"#utility.yul\":1957:1961   */\n  dup3\n    /* \"#utility.yul\":1953:1965   */\n  and\n    /* \"#utility.yul\":1984:2002   */\n  dup1\n    /* \"#utility.yul\":1974:2055   */\n  tag_73\n  jumpi\n    /* \"#utility.yul\":2040:2044   */\n  0x7f\n    /* \"#utility.yul\":2032:2038   */\n  dup3\n    /* \"#utility.yul\":2028:2045   */\n  and\n    /* \"#utility.yul\":2018:2045   */\n  swap2\n  pop\n    /* \"#utility.yul\":1974:2055   */\ntag_73:\n    /* \"#utility.yul\":2102:2104   */\n  0x20\n    /* \"#utility.yul\":2094:2100   */\n  dup3\n    /* \"#utility.yul\":2091:2105   */\n  lt\n    /* \"#utility.yul\":2071:2089   */\n  dup2\n    /* \"#utility.yul\":2068:2106   */\n  sub\n    /* \"#utility.yul\":2065:2149   */\n  tag_74\n  jumpi\n    /* \"#utility.yul\":2121:2139   */\n  tag_75\n  tag_33\n  jump\t// in\ntag_75:\n    /* \"#utility.yul\":2065:2149   */\ntag_74:\n    /* \"#utility.yul\":1886:2155   */\n  pop\n    /* \"#utility.yul\":1835:2155   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2161:2302   */\ntag_35:\n    /* \"#utility.yul\":2210:2214   */\n  0x00\n    /* \"#utility.yul\":2233:2236   */\n  dup2\n    /* \"#utility.yul\":2225:2236   */\n  swap1\n  pop\n    /* \"#utility.yul\":2256:2259   */\n  dup2\n    /* \"#utility.yul\":2253:2254   */\n  0x00\n    /* \"#utility.yul\":2246:2260   */\n  mstore\n    /* \"#utility.yul\":2290:2294   */\n  0x20\n    /* \"#utility.yul\":2287:2288   */\n  0x00\n    /* \"#utility.yul\":2277:2295   */\n  keccak256\n    /* \"#utility.yul\":2269:2295   */\n  swap1\n  pop\n    /* \"#utility.yul\":2161:2302   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2308:2401   */\ntag_36:\n    /* \"#utility.yul\":2345:2351   */\n  0x00\n    /* \"#utility.yul\":2392:2394   */\n  0x20\n    /* \"#utility.yul\":2387:2389   */\n  0x1f\n    /* \"#utility.yul\":2380:2385   */\n  dup4\n    /* \"#utility.yul\":2376:2390   */\n  add\n    /* \"#utility.yul\":2372:2395   */\n  div\n    /* \"#utility.yul\":2362:2395   */\n  swap1\n  pop\n    /* \"#utility.yul\":2308:2401   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2407:2514   */\ntag_37:\n    /* \"#utility.yul\":2451:2459   */\n  0x00\n    /* \"#utility.yul\":2501:2506   */\n  dup3\n    /* \"#utility.yul\":2495:2499   */\n  dup3\n    /* \"#utility.yul\":2491:2507   */\n  shl\n    /* \"#utility.yul\":2470:2507   */\n  swap1\n  pop\n    /* \"#utility.yul\":2407:2514   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2520:2913   */\ntag_38:\n    /* \"#utility.yul\":2589:2595   */\n  0x00\n    /* \"#utility.yul\":2639:2640   */\n  0x08\n    /* \"#utility.yul\":2627:2637   */\n  dup4\n    /* \"#utility.yul\":2623:2641   */\n  mul\n    /* \"#utility.yul\":2662:2759   */\n  tag_80\n    /* \"#utility.yul\":2692:2758   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":2681:2690   */\n  dup3\n    /* \"#utility.yul\":2662:2759   */\n  tag_37\n  jump\t// in\ntag_80:\n    /* \"#utility.yul\":2780:2819   */\n  tag_81\n    /* \"#utility.yul\":2810:2818   */\n  dup7\n    /* \"#utility.yul\":2799:2808   */\n  dup4\n    /* \"#utility.yul\":2780:2819   */\n  tag_37\n  jump\t// in\ntag_81:\n    /* \"#utility.yul\":2768:2819   */\n  swap6\n  pop\n    /* \"#utility.yul\":2852:2856   */\n  dup1\n    /* \"#utility.yul\":2848:2857   */\n  not\n    /* \"#utility.yul\":2841:2846   */\n  dup5\n    /* \"#utility.yul\":2837:2858   */\n  and\n    /* \"#utility.yul\":2828:2858   */\n  swap4\n  pop\n    /* \"#utility.yul\":2901:2905   */\n  dup1\n    /* \"#utility.yul\":2891:2899   */\n  dup7\n    /* \"#utility.yul\":2887:2906   */\n  and\n    /* \"#utility.yul\":2880:2885   */\n  dup5\n    /* \"#utility.yul\":2877:2907   */\n  or\n    /* \"#utility.yul\":2867:2907   */\n  swap3\n  pop\n    /* \"#utility.yul\":2596:2913   */\n  pop\n  pop\n    /* \"#utility.yul\":2520:2913   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2919:2996   */\ntag_39:\n    /* \"#utility.yul\":2956:2963   */\n  0x00\n    /* \"#utility.yul\":2985:2990   */\n  dup2\n    /* \"#utility.yul\":2974:2990   */\n  swap1\n  pop\n    /* \"#utility.yul\":2919:2996   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3002:3062   */\ntag_40:\n    /* \"#utility.yul\":3030:3033   */\n  0x00\n    /* \"#utility.yul\":3051:3056   */\n  dup2\n    /* \"#utility.yul\":3044:3056   */\n  swap1\n  pop\n    /* \"#utility.yul\":3002:3062   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3068:3210   */\ntag_41:\n    /* \"#utility.yul\":3118:3127   */\n  0x00\n    /* \"#utility.yul\":3151:3204   */\n  tag_85\n    /* \"#utility.yul\":3169:3203   */\n  tag_86\n    /* \"#utility.yul\":3178:3202   */\n  tag_87\n    /* \"#utility.yul\":3196:3201   */\n  dup5\n    /* \"#utility.yul\":3178:3202   */\n  tag_39\n  jump\t// in\ntag_87:\n    /* \"#utility.yul\":3169:3203   */\n  tag_40\n  jump\t// in\ntag_86:\n    /* \"#utility.yul\":3151:3204   */\n  tag_39\n  jump\t// in\ntag_85:\n    /* \"#utility.yul\":3138:3204   */\n  swap1\n  pop\n    /* \"#utility.yul\":3068:3210   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3216:3291   */\ntag_42:\n    /* \"#utility.yul\":3259:3262   */\n  0x00\n    /* \"#utility.yul\":3280:3285   */\n  dup2\n    /* \"#utility.yul\":3273:3285   */\n  swap1\n  pop\n    /* \"#utility.yul\":3216:3291   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3297:3566   */\ntag_43:\n    /* \"#utility.yul\":3407:3446   */\n  tag_90\n    /* \"#utility.yul\":3438:3445   */\n  dup4\n    /* \"#utility.yul\":3407:3446   */\n  tag_41\n  jump\t// in\ntag_90:\n    /* \"#utility.yul\":3468:3559   */\n  tag_91\n    /* \"#utility.yul\":3517:3558   */\n  tag_92\n    /* \"#utility.yul\":3541:3557   */\n  dup3\n    /* \"#utility.yul\":3517:3558   */\n  tag_42\n  jump\t// in\ntag_92:\n    /* \"#utility.yul\":3509:3515   */\n  dup5\n    /* \"#utility.yul\":3502:3506   */\n  dup5\n    /* \"#utility.yul\":3496:3507   */\n  sload\n    /* \"#utility.yul\":3468:3559   */\n  tag_38\n  jump\t// in\ntag_91:\n    /* \"#utility.yul\":3462:3466   */\n  dup3\n    /* \"#utility.yul\":3455:3560   */\n  sstore\n    /* \"#utility.yul\":3373:3566   */\n  pop\n    /* \"#utility.yul\":3297:3566   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3572:3645   */\ntag_44:\n    /* \"#utility.yul\":3617:3620   */\n  0x00\n    /* \"#utility.yul\":3572:3645   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":3651:3840   */\ntag_45:\n    /* \"#utility.yul\":3728:3760   */\n  tag_95\n  tag_44\n  jump\t// in\ntag_95:\n    /* \"#utility.yul\":3769:3834   */\n  tag_96\n    /* \"#utility.yul\":3827:3833   */\n  dup2\n    /* \"#utility.yul\":3819:3825   */\n  dup5\n    /* \"#utility.yul\":3813:3817   */\n  dup5\n    /* \"#utility.yul\":3769:3834   */\n  tag_43\n  jump\t// in\ntag_96:\n    /* \"#utility.yul\":3704:3840   */\n  pop\n    /* \"#utility.yul\":3651:3840   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3846:4032   */\ntag_46:\n    /* \"#utility.yul\":3906:4026   */\ntag_98:\n    /* \"#utility.yul\":3923:3926   */\n  dup2\n    /* \"#utility.yul\":3916:3921   */\n  dup2\n    /* \"#utility.yul\":3913:3927   */\n  lt\n    /* \"#utility.yul\":3906:4026   */\n  iszero\n  tag_100\n  jumpi\n    /* \"#utility.yul\":3977:4016   */\n  tag_101\n    /* \"#utility.yul\":4014:4015   */\n  0x00\n    /* \"#utility.yul\":4007:4012   */\n  dup3\n    /* \"#utility.yul\":3977:4016   */\n  tag_45\n  jump\t// in\ntag_101:\n    /* \"#utility.yul\":3950:3951   */\n  0x01\n    /* \"#utility.yul\":3943:3948   */\n  dup2\n    /* \"#utility.yul\":3939:3952   */\n  add\n    /* \"#utility.yul\":3930:3952   */\n  swap1\n  pop\n    /* \"#utility.yul\":3906:4026   */\n  jump(tag_98)\ntag_100:\n    /* \"#utility.yul\":3846:4032   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4038:4581   */\ntag_47:\n    /* \"#utility.yul\":4139:4141   */\n  0x1f\n    /* \"#utility.yul\":4134:4137   */\n  dup3\n    /* \"#utility.yul\":4131:4142   */\n  gt\n    /* \"#utility.yul\":4128:4574   */\n  iszero\n  tag_103\n  jumpi\n    /* \"#utility.yul\":4173:4211   */\n  tag_104\n    /* \"#utility.yul\":4205:4210   */\n  dup2\n    /* \"#utility.yul\":4173:4211   */\n  tag_35\n  jump\t// in\ntag_104:\n    /* \"#utility.yul\":4257:4286   */\n  tag_105\n    /* \"#utility.yul\":4275:4285   */\n  dup5\n    /* \"#utility.yul\":4257:4286   */\n  tag_36\n  jump\t// in\ntag_105:\n    /* \"#utility.yul\":4247:4255   */\n  dup2\n    /* \"#utility.yul\":4243:4287   */\n  add\n    /* \"#utility.yul\":4440:4442   */\n  0x20\n    /* \"#utility.yul\":4428:4438   */\n  dup6\n    /* \"#utility.yul\":4425:4443   */\n  lt\n    /* \"#utility.yul\":4422:4471   */\n  iszero\n  tag_106\n  jumpi\n    /* \"#utility.yul\":4461:4469   */\n  dup2\n    /* \"#utility.yul\":4446:4469   */\n  swap1\n  pop\n    /* \"#utility.yul\":4422:4471   */\ntag_106:\n    /* \"#utility.yul\":4484:4564   */\n  tag_107\n    /* \"#utility.yul\":4540:4562   */\n  tag_108\n    /* \"#utility.yul\":4558:4561   */\n  dup6\n    /* \"#utility.yul\":4540:4562   */\n  tag_36\n  jump\t// in\ntag_108:\n    /* \"#utility.yul\":4530:4538   */\n  dup4\n    /* \"#utility.yul\":4526:4563   */\n  add\n    /* \"#utility.yul\":4513:4524   */\n  dup3\n    /* \"#utility.yul\":4484:4564   */\n  tag_46\n  jump\t// in\ntag_107:\n    /* \"#utility.yul\":4143:4574   */\n  pop\n  pop\n    /* \"#utility.yul\":4128:4574   */\ntag_103:\n    /* \"#utility.yul\":4038:4581   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4587:4704   */\ntag_48:\n    /* \"#utility.yul\":4641:4649   */\n  0x00\n    /* \"#utility.yul\":4691:4696   */\n  dup3\n    /* \"#utility.yul\":4685:4689   */\n  dup3\n    /* \"#utility.yul\":4681:4697   */\n  shr\n    /* \"#utility.yul\":4660:4697   */\n  swap1\n  pop\n    /* \"#utility.yul\":4587:4704   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4710:4879   */\ntag_49:\n    /* \"#utility.yul\":4754:4760   */\n  0x00\n    /* \"#utility.yul\":4787:4838   */\n  tag_111\n    /* \"#utility.yul\":4835:4836   */\n  0x00\n    /* \"#utility.yul\":4831:4837   */\n  not\n    /* \"#utility.yul\":4823:4828   */\n  dup5\n    /* \"#utility.yul\":4820:4821   */\n  0x08\n    /* \"#utility.yul\":4816:4829   */\n  mul\n    /* \"#utility.yul\":4787:4838   */\n  tag_48\n  jump\t// in\ntag_111:\n    /* \"#utility.yul\":4783:4839   */\n  not\n    /* \"#utility.yul\":4868:4872   */\n  dup1\n    /* \"#utility.yul\":4862:4866   */\n  dup4\n    /* \"#utility.yul\":4858:4873   */\n  and\n    /* \"#utility.yul\":4848:4873   */\n  swap2\n  pop\n    /* \"#utility.yul\":4761:4879   */\n  pop\n    /* \"#utility.yul\":4710:4879   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4884:5179   */\ntag_50:\n    /* \"#utility.yul\":4960:4964   */\n  0x00\n    /* \"#utility.yul\":5106:5135   */\n  tag_113\n    /* \"#utility.yul\":5131:5134   */\n  dup4\n    /* \"#utility.yul\":5125:5129   */\n  dup4\n    /* \"#utility.yul\":5106:5135   */\n  tag_49\n  jump\t// in\ntag_113:\n    /* \"#utility.yul\":5098:5135   */\n  swap2\n  pop\n    /* \"#utility.yul\":5168:5171   */\n  dup3\n    /* \"#utility.yul\":5165:5166   */\n  0x02\n    /* \"#utility.yul\":5161:5172   */\n  mul\n    /* \"#utility.yul\":5155:5159   */\n  dup3\n    /* \"#utility.yul\":5152:5173   */\n  or\n    /* \"#utility.yul\":5144:5173   */\n  swap1\n  pop\n    /* \"#utility.yul\":4884:5179   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5184:6579   */\ntag_10:\n    /* \"#utility.yul\":5301:5338   */\n  tag_115\n    /* \"#utility.yul\":5334:5337   */\n  dup3\n    /* \"#utility.yul\":5301:5338   */\n  tag_31\n  jump\t// in\ntag_115:\n    /* \"#utility.yul\":5403:5421   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":5395:5401   */\n  dup2\n    /* \"#utility.yul\":5392:5422   */\n  gt\n    /* \"#utility.yul\":5389:5445   */\n  iszero\n  tag_116\n  jumpi\n    /* \"#utility.yul\":5425:5443   */\n  tag_117\n  tag_32\n  jump\t// in\ntag_117:\n    /* \"#utility.yul\":5389:5445   */\ntag_116:\n    /* \"#utility.yul\":5469:5507   */\n  tag_118\n    /* \"#utility.yul\":5501:5505   */\n  dup3\n    /* \"#utility.yul\":5495:5506   */\n  sload\n    /* \"#utility.yul\":5469:5507   */\n  tag_34\n  jump\t// in\ntag_118:\n    /* \"#utility.yul\":5554:5621   */\n  tag_119\n    /* \"#utility.yul\":5614:5620   */\n  dup3\n    /* \"#utility.yul\":5606:5612   */\n  dup3\n    /* \"#utility.yul\":5600:5604   */\n  dup6\n    /* \"#utility.yul\":5554:5621   */\n  tag_47\n  jump\t// in\ntag_119:\n    /* \"#utility.yul\":5648:5649   */\n  0x00\n    /* \"#utility.yul\":5672:5676   */\n  0x20\n    /* \"#utility.yul\":5659:5676   */\n  swap1\n  pop\n    /* \"#utility.yul\":5704:5706   */\n  0x1f\n    /* \"#utility.yul\":5696:5702   */\n  dup4\n    /* \"#utility.yul\":5693:5707   */\n  gt\n    /* \"#utility.yul\":5721:5722   */\n  0x01\n    /* \"#utility.yul\":5716:6334   */\n  dup2\n  eq\n  tag_121\n  jumpi\n    /* \"#utility.yul\":6378:6379   */\n  0x00\n    /* \"#utility.yul\":6395:6401   */\n  dup5\n    /* \"#utility.yul\":6392:6469   */\n  iszero\n  tag_122\n  jumpi\n    /* \"#utility.yul\":6444:6453   */\n  dup3\n    /* \"#utility.yul\":6439:6442   */\n  dup8\n    /* \"#utility.yul\":6435:6454   */\n  add\n    /* \"#utility.yul\":6429:6455   */\n  mload\n    /* \"#utility.yul\":6420:6455   */\n  swap1\n  pop\n    /* \"#utility.yul\":6392:6469   */\ntag_122:\n    /* \"#utility.yul\":6495:6562   */\n  tag_123\n    /* \"#utility.yul\":6555:6561   */\n  dup6\n    /* \"#utility.yul\":6548:6553   */\n  dup3\n    /* \"#utility.yul\":6495:6562   */\n  tag_50\n  jump\t// in\ntag_123:\n    /* \"#utility.yul\":6489:6493   */\n  dup7\n    /* \"#utility.yul\":6482:6563   */\n  sstore\n    /* \"#utility.yul\":6351:6573   */\n  pop\n    /* \"#utility.yul\":5686:6573   */\n  jump(tag_120)\n    /* \"#utility.yul\":5716:6334   */\ntag_121:\n    /* \"#utility.yul\":5768:5772   */\n  0x1f\n    /* \"#utility.yul\":5764:5773   */\n  not\n    /* \"#utility.yul\":5756:5762   */\n  dup5\n    /* \"#utility.yul\":5752:5774   */\n  and\n    /* \"#utility.yul\":5802:5839   */\n  tag_124\n    /* \"#utility.yul\":5834:5838   */\n  dup7\n    /* \"#utility.yul\":5802:5839   */\n  tag_35\n  jump\t// in\ntag_124:\n    /* \"#utility.yul\":5861:5862   */\n  0x00\n    /* \"#utility.yul\":5875:6083   */\ntag_125:\n    /* \"#utility.yul\":5889:5896   */\n  dup3\n    /* \"#utility.yul\":5886:5887   */\n  dup2\n    /* \"#utility.yul\":5883:5897   */\n  lt\n    /* \"#utility.yul\":5875:6083   */\n  iszero\n  tag_127\n  jumpi\n    /* \"#utility.yul\":5968:5977   */\n  dup5\n    /* \"#utility.yul\":5963:5966   */\n  dup10\n    /* \"#utility.yul\":5959:5978   */\n  add\n    /* \"#utility.yul\":5953:5979   */\n  mload\n    /* \"#utility.yul\":5945:5951   */\n  dup3\n    /* \"#utility.yul\":5938:5980   */\n  sstore\n    /* \"#utility.yul\":6019:6020   */\n  0x01\n    /* \"#utility.yul\":6011:6017   */\n  dup3\n    /* \"#utility.yul\":6007:6021   */\n  add\n    /* \"#utility.yul\":5997:6021   */\n  swap2\n  pop\n    /* \"#utility.yul\":6066:6068   */\n  0x20\n    /* \"#utility.yul\":6055:6064   */\n  dup6\n    /* \"#utility.yul\":6051:6069   */\n  add\n    /* \"#utility.yul\":6038:6069   */\n  swap5\n  pop\n    /* \"#utility.yul\":5912:5916   */\n  0x20\n    /* \"#utility.yul\":5909:5910   */\n  dup2\n    /* \"#utility.yul\":5905:5917   */\n  add\n    /* \"#utility.yul\":5900:5917   */\n  swap1\n  pop\n    /* \"#utility.yul\":5875:6083   */\n  jump(tag_125)\ntag_127:\n    /* \"#utility.yul\":6111:6117   */\n  dup7\n    /* \"#utility.yul\":6102:6109   */\n  dup4\n    /* \"#utility.yul\":6099:6118   */\n  lt\n    /* \"#utility.yul\":6096:6275   */\n  iszero\n  tag_128\n  jumpi\n    /* \"#utility.yul\":6169:6178   */\n  dup5\n    /* \"#utility.yul\":6164:6167   */\n  dup10\n    /* \"#utility.yul\":6160:6179   */\n  add\n    /* \"#utility.yul\":6154:6180   */\n  mload\n    /* \"#utility.yul\":6212:6260   */\n  tag_129\n    /* \"#utility.yul\":6254:6258   */\n  0x1f\n    /* \"#utility.yul\":6246:6252   */\n  dup10\n    /* \"#utility.yul\":6242:6259   */\n  and\n    /* \"#utility.yul\":6231:6240   */\n  dup3\n    /* \"#utility.yul\":6212:6260   */\n  tag_49\n  jump\t// in\ntag_129:\n    /* \"#utility.yul\":6204:6210   */\n  dup4\n    /* \"#utility.yul\":6197:6261   */\n  sstore\n    /* \"#utility.yul\":6119:6275   */\n  pop\n    /* \"#utility.yul\":6096:6275   */\ntag_128:\n    /* \"#utility.yul\":6321:6322   */\n  0x01\n    /* \"#utility.yul\":6317:6318   */\n  0x02\n    /* \"#utility.yul\":6309:6315   */\n  dup9\n    /* \"#utility.yul\":6305:6319   */\n  mul\n    /* \"#utility.yul\":6301:6323   */\n  add\n    /* \"#utility.yul\":6295:6299   */\n  dup9\n    /* \"#utility.yul\":6288:6324   */\n  sstore\n    /* \"#utility.yul\":5723:6334   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5686:6573   */\ntag_120:\n  pop\n    /* \"#utility.yul\":5276:6579   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5184:6579   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6585:6703   */\ntag_51:\n    /* \"#utility.yul\":6672:6696   */\n  tag_131\n    /* \"#utility.yul\":6690:6695   */\n  dup2\n    /* \"#utility.yul\":6672:6696   */\n  tag_28\n  jump\t// in\ntag_131:\n    /* \"#utility.yul\":6667:6670   */\n  dup3\n    /* \"#utility.yul\":6660:6697   */\n  mstore\n    /* \"#utility.yul\":6585:6703   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6709:6931   */\ntag_15:\n    /* \"#utility.yul\":6802:6806   */\n  0x00\n    /* \"#utility.yul\":6840:6842   */\n  0x20\n    /* \"#utility.yul\":6829:6838   */\n  dup3\n    /* \"#utility.yul\":6825:6843   */\n  add\n    /* \"#utility.yul\":6817:6843   */\n  swap1\n  pop\n    /* \"#utility.yul\":6853:6924   */\n  tag_133\n    /* \"#utility.yul\":6921:6922   */\n  0x00\n    /* \"#utility.yul\":6910:6919   */\n  dup4\n    /* \"#utility.yul\":6906:6923   */\n  add\n    /* \"#utility.yul\":6897:6903   */\n  dup5\n    /* \"#utility.yul\":6853:6924   */\n  tag_51\n  jump\t// in\ntag_133:\n    /* \"#utility.yul\":6709:6931   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"pTOKEN2.sol\":775:9679  contract pTOKEN is ERC20Burnable, Ownable, ReentrancyGuard {... */\ntag_22:\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x90a0a53a674dda23f50c6d7df8f61e9f3e3cf11a0ea21d6964915bb3c7f9b219\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"pTOKEN2.sol\":775:9679  contract pTOKEN is ERC20Burnable, Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x79cc6790\n      gt\n      tag_33\n      jumpi\n      dup1\n      0xa88df21a\n      gt\n      tag_34\n      jumpi\n      dup1\n      0xdd62ed3e\n      gt\n      tag_35\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_29\n      jumpi\n      dup1\n      0xeb2cd258\n      eq\n      tag_30\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_31\n      jumpi\n      dup1\n      0xf40fa4bc\n      eq\n      tag_32\n      jumpi\n      jump(tag_2)\n    tag_35:\n      dup1\n      0xa88df21a\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xc38f2bfe\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xdb006a75\n      eq\n      tag_28\n      jumpi\n      jump(tag_2)\n    tag_34:\n      dup1\n      0x8da5cb5b\n      gt\n      tag_36\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x92054fe7\n      eq\n      tag_22\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xa492fbc6\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_36:\n      dup1\n      0x79cc6790\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x8705fcd4\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x8b7b23ee\n      eq\n      tag_20\n      jumpi\n      jump(tag_2)\n    tag_33:\n      dup1\n      0x313ce567\n      gt\n      tag_37\n      jumpi\n      dup1\n      0x42966c68\n      gt\n      tag_38\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x559e775b\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_17\n      jumpi\n      jump(tag_2)\n    tag_38:\n      dup1\n      0x313ce567\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x35975a37\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x41275358\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_37:\n      dup1\n      0x16f9b467\n      gt\n      tag_39\n      jumpi\n      dup1\n      0x16f9b467\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x19f04174\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_39:\n      dup1\n      0x029cd242\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"pTOKEN2.sol\":1171:1203  IERC20 public immutable _BACKING */\n    tag_3:\n      tag_40\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      tag_42\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_4:\n      tag_44\n      tag_45\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_5:\n      tag_48\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      tag_52\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n    tag_52:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"pTOKEN2.sol\":7023:7199  function emergencyFixTotalBacking() external onlyOwner {... */\n    tag_6:\n      tag_54\n      tag_55\n      jump\t// in\n    tag_54:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_7:\n      tag_56\n      tag_57\n      jump\t// in\n    tag_56:\n      mload(0x40)\n      tag_58\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"pTOKEN2.sol\":9582:9677  function getTotalBacking() external view returns (uint256) {... */\n    tag_8:\n      tag_60\n      tag_61\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_9:\n      tag_63\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_64\n      swap2\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      tag_66\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      tag_67\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n    tag_10:\n      tag_68\n      tag_69\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      tag_70\n      swap2\n      swap1\n      tag_71\n      jump\t// in\n    tag_70:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"pTOKEN2.sol\":3743:3815  function setStart() external onlyOwner {    ... */\n    tag_11:\n      tag_72\n      tag_73\n      jump\t// in\n    tag_72:\n      stop\n        /* \"pTOKEN2.sol\":4122:4651  function mint(address receiver, uint256 _amount) external nonReentrant {... */\n    tag_12:\n      tag_74\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_75\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_75:\n      tag_76\n      jump\t// in\n    tag_74:\n      stop\n        /* \"pTOKEN2.sol\":1990:2023  address payable public feeAddress */\n    tag_13:\n      tag_77\n      tag_78\n      jump\t// in\n    tag_77:\n      mload(0x40)\n      tag_79\n      swap2\n      swap1\n      tag_80\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_14:\n      tag_81\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_82\n      swap2\n      swap1\n      tag_83\n      jump\t// in\n    tag_82:\n      tag_84\n      jump\t// in\n    tag_81:\n      stop\n        /* \"pTOKEN2.sol\":8831:9049  function getMintPrice(uint256 _amount) external view returns (uint256) {... */\n    tag_15:\n      tag_85\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_86\n      swap2\n      swap1\n      tag_83\n      jump\t// in\n    tag_86:\n      tag_87\n      jump\t// in\n    tag_85:\n      mload(0x40)\n      tag_88\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_88:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_16:\n      tag_89\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_90\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_90:\n      tag_92\n      jump\t// in\n    tag_89:\n      mload(0x40)\n      tag_93\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_17:\n      tag_94\n      tag_95\n      jump\t// in\n    tag_94:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_18:\n      tag_96\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_97\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_97:\n      tag_98\n      jump\t// in\n    tag_96:\n      stop\n        /* \"pTOKEN2.sol\":5886:6077  function setFeeAddress(address _address) external onlyOwner {... */\n    tag_19:\n      tag_99\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_100\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_100:\n      tag_101\n      jump\t// in\n    tag_99:\n      stop\n        /* \"pTOKEN2.sol\":1689:1713  uint256 public FEES = 35 */\n    tag_20:\n      tag_102\n      tag_103\n      jump\t// in\n    tag_102:\n      mload(0x40)\n      tag_104\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_104:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_21:\n      tag_105\n      tag_106\n      jump\t// in\n    tag_105:\n      mload(0x40)\n      tag_107\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_107:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"pTOKEN2.sol\":1474:1514  uint256 public MINT_AND_REDEEM_FEE = 967 */\n    tag_22:\n      tag_109\n      tag_110\n      jump\t// in\n    tag_109:\n      mload(0x40)\n      tag_111\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_111:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_23:\n      tag_112\n      tag_113\n      jump\t// in\n    tag_112:\n      mload(0x40)\n      tag_114\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_114:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"pTOKEN2.sol\":9230:9450  function getRedeemPrice(uint256 _amount) external view returns (uint256) {... */\n    tag_24:\n      tag_115\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_116\n      swap2\n      swap1\n      tag_83\n      jump\t// in\n    tag_116:\n      tag_117\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      tag_118\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_118:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"pTOKEN2.sol\":3405:3737  function fillContract(uint256 _value) external onlyOwner {... */\n    tag_25:\n      tag_119\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_120\n      swap2\n      swap1\n      tag_83\n      jump\t// in\n    tag_120:\n      tag_121\n      jump\t// in\n    tag_119:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_26:\n      tag_122\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_123\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_123:\n      tag_124\n      jump\t// in\n    tag_122:\n      mload(0x40)\n      tag_125\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n    tag_125:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"pTOKEN2.sol\":6689:6884  function setTeamFee(uint16 _amount) external onlyOwner {... */\n    tag_27:\n      tag_126\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_127\n      swap2\n      swap1\n      tag_128\n      jump\t// in\n    tag_127:\n      tag_129\n      jump\t// in\n    tag_126:\n      stop\n        /* \"pTOKEN2.sol\":5044:5706  function redeem(uint256 _amount) external nonReentrant {... */\n    tag_28:\n      tag_130\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_131\n      swap2\n      swap1\n      tag_83\n      jump\t// in\n    tag_131:\n      tag_132\n      jump\t// in\n    tag_130:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_29:\n      tag_133\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_134\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_134:\n      tag_136\n      jump\t// in\n    tag_133:\n      mload(0x40)\n      tag_137\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_137:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"pTOKEN2.sol\":1957:1984  uint256 public totalBacking */\n    tag_30:\n      tag_138\n      tag_139\n      jump\t// in\n    tag_138:\n      mload(0x40)\n      tag_140\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_31:\n      tag_141\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_142\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_142:\n      tag_143\n      jump\t// in\n    tag_141:\n      stop\n        /* \"pTOKEN2.sol\":6256:6493  function setMintAndRedeemFee(uint16 _amount) external onlyOwner {... */\n    tag_32:\n      tag_144\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_145\n      swap2\n      swap1\n      tag_128\n      jump\t// in\n    tag_145:\n      tag_146\n      jump\t// in\n    tag_144:\n      stop\n        /* \"pTOKEN2.sol\":1171:1203  IERC20 public immutable _BACKING */\n    tag_41:\n      immutable(\"0x90a0a53a674dda23f50c6d7df8f61e9f3e3cf11a0ea21d6964915bb3c7f9b219\")\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_148\n      swap1\n      tag_149\n      jump\t// in\n    tag_148:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_150\n      swap1\n      tag_149\n      jump\t// in\n    tag_150:\n      dup1\n      iszero\n      tag_151\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_152\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_151)\n    tag_152:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_153:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_153\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_151:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_51:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4382:4395  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      tag_155\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4408  _msgSender */\n      tag_156\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      jump\t// in\n    tag_155:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4382:4410  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_157\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4429:4434  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_158\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":7023:7199  function emergencyFixTotalBacking() external onlyOwner {... */\n    tag_55:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_160\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_160:\n        /* \"pTOKEN2.sol\":7103:7111  _BACKING */\n      immutable(\"0x90a0a53a674dda23f50c6d7df8f61e9f3e3cf11a0ea21d6964915bb3c7f9b219\")\n        /* \"pTOKEN2.sol\":7103:7121  _BACKING.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"pTOKEN2.sol\":7130:7134  this */\n      address\n        /* \"pTOKEN2.sol\":7103:7136  _BACKING.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_163\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_163:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_165\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_165:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_166\n      swap2\n      swap1\n      tag_167\n      jump\t// in\n    tag_166:\n        /* \"pTOKEN2.sol\":7088:7100  totalBacking */\n      0x09\n        /* \"pTOKEN2.sol\":7088:7136  totalBacking = _BACKING.balanceOf(address(this)) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"pTOKEN2.sol\":7170:7191  address(this).balance */\n      selfbalance\n        /* \"pTOKEN2.sol\":7152:7192  TotalBackingFixed(address(this).balance) */\n      0xa3faf2f1eb729d9e646e40f512a8458c02057ee480d3b576a37e8a8ab30f0555\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"pTOKEN2.sol\":7023:7199  function emergencyFixTotalBacking() external onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_57:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3196:3203  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3215:3234  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"pTOKEN2.sol\":9582:9677  function getTotalBacking() external view returns (uint256) {... */\n    tag_61:\n        /* \"pTOKEN2.sol\":9632:9639  uint256 */\n      0x00\n        /* \"pTOKEN2.sol\":9658:9670  totalBacking */\n      sload(0x09)\n        /* \"pTOKEN2.sol\":9651:9670  return totalBacking */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":9582:9677  function getTotalBacking() external view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_66:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5142:5157  address spender */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      tag_171\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5170  _msgSender */\n      tag_156\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      jump\t// in\n    tag_171:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5142:5172  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_172\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5204:5211  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_173\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_172:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_174\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_175\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_174:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5265:5276  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n    tag_69:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3051:3056  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3075:3077  18 */\n      0x12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3068:3077  return 18 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"pTOKEN2.sol\":3743:3815  function setStart() external onlyOwner {    ... */\n    tag_73:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_178\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_178:\n        /* \"pTOKEN2.sol\":3804:3808  true */\n      0x01\n        /* \"pTOKEN2.sol\":3796:3801  start */\n      0x0a\n      0x14\n        /* \"pTOKEN2.sol\":3796:3808  start = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"pTOKEN2.sol\":3743:3815  function setStart() external onlyOwner {    ... */\n      jump\t// out\n        /* \"pTOKEN2.sol\":4122:4651  function mint(address receiver, uint256 _amount) external nonReentrant {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2356:2377  _nonReentrantBefore() */\n      tag_181\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2356:2375  _nonReentrantBefore */\n      tag_182\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2356:2377  _nonReentrantBefore() */\n      jump\t// in\n    tag_181:\n        /* \"pTOKEN2.sol\":1323:1327  1000 */\n      0x03e8\n        /* \"pTOKEN2.sol\":4207:4214  _amount */\n      dup2\n        /* \"pTOKEN2.sol\":4207:4221  _amount < _MIN */\n      lt\n        /* \"pTOKEN2.sol\":4203:4248  if (_amount < _MIN) revert MustTradeOverMin() */\n      iszero\n      tag_184\n      jumpi\n        /* \"pTOKEN2.sol\":4230:4248  MustTradeOverMin() */\n      mload(0x40)\n      0x2b4db67a00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"pTOKEN2.sol\":4203:4248  if (_amount < _MIN) revert MustTradeOverMin() */\n    tag_184:\n        /* \"pTOKEN2.sol\":4259:4273  uint256 pToken */\n      0x00\n        /* \"pTOKEN2.sol\":4276:4301  _BACKINGtoPTOKEN(_amount) */\n      tag_185\n        /* \"pTOKEN2.sol\":4293:4300  _amount */\n      dup3\n        /* \"pTOKEN2.sol\":4276:4292  _BACKINGtoPTOKEN */\n      tag_186\n        /* \"pTOKEN2.sol\":4276:4301  _BACKINGtoPTOKEN(_amount) */\n      jump\t// in\n    tag_185:\n        /* \"pTOKEN2.sol\":4259:4301  uint256 pToken = _BACKINGtoPTOKEN(_amount) */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":4312:4339  uint256 backingToFeeAddress */\n      0x00\n        /* \"pTOKEN2.sol\":4352:4356  FEES */\n      sload(0x08)\n        /* \"pTOKEN2.sol\":4342:4349  _amount */\n      dup4\n        /* \"pTOKEN2.sol\":4342:4356  _amount / FEES */\n      tag_187\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_187:\n        /* \"pTOKEN2.sol\":4312:4356  uint256 backingToFeeAddress = _amount / FEES */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":4393:4412  backingToFeeAddress */\n      dup1\n        /* \"pTOKEN2.sol\":4383:4390  _amount */\n      dup4\n        /* \"pTOKEN2.sol\":4383:4412  _amount - backingToFeeAddress */\n      tag_189\n      swap2\n      swap1\n      tag_190\n      jump\t// in\n    tag_189:\n        /* \"pTOKEN2.sol\":4366:4378  totalBacking */\n      0x09\n      0x00\n        /* \"pTOKEN2.sol\":4366:4413  totalBacking += (_amount - backingToFeeAddress) */\n      dup3\n      dup3\n      sload\n      tag_191\n      swap2\n      swap1\n      tag_192\n      jump\t// in\n    tag_191:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"pTOKEN2.sol\":4424:4505  SafeERC20.safeTransferFrom(_BACKING, msg.sender, feeAddress, backingToFeeAddress) */\n      tag_193\n        /* \"pTOKEN2.sol\":4451:4459  _BACKING */\n      immutable(\"0x90a0a53a674dda23f50c6d7df8f61e9f3e3cf11a0ea21d6964915bb3c7f9b219\")\n        /* \"pTOKEN2.sol\":4461:4471  msg.sender */\n      caller\n        /* \"pTOKEN2.sol\":4473:4483  feeAddress */\n      0x0a\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"pTOKEN2.sol\":4485:4504  backingToFeeAddress */\n      dup5\n        /* \"pTOKEN2.sol\":4424:4450  SafeERC20.safeTransferFrom */\n      tag_194\n        /* \"pTOKEN2.sol\":4424:4505  SafeERC20.safeTransferFrom(_BACKING, msg.sender, feeAddress, backingToFeeAddress) */\n      jump\t// in\n    tag_193:\n        /* \"pTOKEN2.sol\":4516:4580  _mint(receiver, (pToken * MINT_AND_REDEEM_FEE) / _FEE_BASE_1000) */\n      tag_195\n        /* \"pTOKEN2.sol\":4522:4530  receiver */\n      dup5\n        /* \"pTOKEN2.sol\":1375:1379  1000 */\n      0x03e8\n        /* \"pTOKEN2.sol\":4542:4561  MINT_AND_REDEEM_FEE */\n      sload(0x07)\n        /* \"pTOKEN2.sol\":4533:4539  pToken */\n      dup6\n        /* \"pTOKEN2.sol\":4533:4561  pToken * MINT_AND_REDEEM_FEE */\n      tag_196\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_196:\n        /* \"pTOKEN2.sol\":4532:4579  (pToken * MINT_AND_REDEEM_FEE) / _FEE_BASE_1000 */\n      tag_198\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_198:\n        /* \"pTOKEN2.sol\":4516:4521  _mint */\n      tag_199\n        /* \"pTOKEN2.sol\":4516:4580  _mint(receiver, (pToken * MINT_AND_REDEEM_FEE) / _FEE_BASE_1000) */\n      jump\t// in\n    tag_195:\n        /* \"pTOKEN2.sol\":4636:4643  _amount */\n      dup3\n        /* \"pTOKEN2.sol\":4628:4634  pToken */\n      dup3\n        /* \"pTOKEN2.sol\":4611:4626  block.timestamp */\n      timestamp\n        /* \"pTOKEN2.sol\":4596:4644  PriceAfterMint(block.timestamp, pToken, _amount) */\n      0x079d4fba3fc168dbd2a0c2a5235112b3442d90a21282f7b69506d05a46fdbbb7\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"pTOKEN2.sol\":4193:4651  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2398:2418  _nonReentrantAfter() */\n      tag_200\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2398:2416  _nonReentrantAfter */\n      tag_201\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2398:2418  _nonReentrantAfter() */\n      jump\t// in\n    tag_200:\n        /* \"pTOKEN2.sol\":4122:4651  function mint(address receiver, uint256 _amount) external nonReentrant {... */\n      pop\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":1990:2023  address payable public feeAddress */\n    tag_78:\n      0x0a\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_84:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      tag_203\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":678:690  _msgSender() */\n      tag_204\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":678:688  _msgSender */\n      tag_156\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":678:690  _msgSender() */\n      jump\t// in\n    tag_204:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":692:697  value */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:677  _burn */\n      tag_205\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      jump\t// in\n    tag_203:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":8831:9049  function getMintPrice(uint256 _amount) external view returns (uint256) {... */\n    tag_87:\n        /* \"pTOKEN2.sol\":8893:8900  uint256 */\n      0x00\n        /* \"pTOKEN2.sol\":1375:1379  1000 */\n      0x03e8\n        /* \"pTOKEN2.sol\":8998:9010  totalBacking */\n      sload(0x09)\n        /* \"pTOKEN2.sol\":8961:8980  MINT_AND_REDEEM_FEE */\n      sload(0x07)\n        /* \"pTOKEN2.sol\":8943:8956  totalSupply() */\n      tag_207\n        /* \"pTOKEN2.sol\":8943:8954  totalSupply */\n      tag_57\n        /* \"pTOKEN2.sol\":8943:8956  totalSupply() */\n      jump\t// in\n    tag_207:\n        /* \"pTOKEN2.sol\":8932:8939  _amount */\n      dup6\n        /* \"pTOKEN2.sol\":8932:8957  _amount * (totalSupply()) */\n      tag_208\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_208:\n        /* \"pTOKEN2.sol\":8932:8981  _amount * (totalSupply()) * (MINT_AND_REDEEM_FEE) */\n      tag_209\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_209:\n        /* \"pTOKEN2.sol\":8931:9011  (_amount * (totalSupply()) * (MINT_AND_REDEEM_FEE)) /... */\n      tag_210\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_210:\n        /* \"pTOKEN2.sol\":8931:9042  (_amount * (totalSupply()) * (MINT_AND_REDEEM_FEE)) /... */\n      tag_211\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_211:\n        /* \"pTOKEN2.sol\":8912:9042  return... */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":8831:9049  function getMintPrice(uint256 _amount) external view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_92:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3400:3407  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3383:3408  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_95:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_214\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_214:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_216\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_217\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_216:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_98:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      tag_219\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1112:1119  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1121:1133  _msgSender() */\n      tag_220\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1121:1131  _msgSender */\n      tag_156\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1121:1133  _msgSender() */\n      jump\t// in\n    tag_220:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1135:1140  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1111  _spendAllowance */\n      tag_173\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      jump\t// in\n    tag_219:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      tag_221\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1157:1164  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1166:1171  value */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1156  _burn */\n      tag_205\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      jump\t// in\n    tag_221:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":5886:6077  function setFeeAddress(address _address) external onlyOwner {... */\n    tag_101:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_223\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_223:\n        /* \"pTOKEN2.sol\":5956:5987  _assemblyOwnerNotZero(_address) */\n      tag_225\n        /* \"pTOKEN2.sol\":5978:5986  _address */\n      dup2\n        /* \"pTOKEN2.sol\":5956:5977  _assemblyOwnerNotZero */\n      tag_226\n        /* \"pTOKEN2.sol\":5956:5987  _assemblyOwnerNotZero(_address) */\n      jump\t// in\n    tag_225:\n        /* \"pTOKEN2.sol\":6018:6026  _address */\n      dup1\n        /* \"pTOKEN2.sol\":5997:6007  feeAddress */\n      0x0a\n      0x00\n        /* \"pTOKEN2.sol\":5997:6027  feeAddress = payable(_address) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"pTOKEN2.sol\":6061:6069  _address */\n      dup1\n        /* \"pTOKEN2.sol\":6043:6070  FeeAddressUpdated(_address) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x446e39bcf1b47cfadfaa23442cb4b34682cfe6bd9220da084894e3b1f834e4f3\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"pTOKEN2.sol\":5886:6077  function setFeeAddress(address _address) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":1689:1713  uint256 public FEES = 35 */\n    tag_103:\n      sload(0x08)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_106:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1703:1716  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"pTOKEN2.sol\":1474:1514  uint256 public MINT_AND_REDEEM_FEE = 967 */\n    tag_110:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_113:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_229\n      swap1\n      tag_149\n      jump\t// in\n    tag_229:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_230\n      swap1\n      tag_149\n      jump\t// in\n    tag_230:\n      dup1\n      iszero\n      tag_231\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_232\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_231)\n    tag_232:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_233:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_233\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_231:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"pTOKEN2.sol\":9230:9450  function getRedeemPrice(uint256 _amount) external view returns (uint256) {... */\n    tag_117:\n        /* \"pTOKEN2.sol\":9294:9301  uint256 */\n      0x00\n        /* \"pTOKEN2.sol\":1375:1379  1000 */\n      0x03e8\n        /* \"pTOKEN2.sol\":9398:9411  totalSupply() */\n      tag_235\n        /* \"pTOKEN2.sol\":9398:9409  totalSupply */\n      tag_57\n        /* \"pTOKEN2.sol\":9398:9411  totalSupply() */\n      jump\t// in\n    tag_235:\n        /* \"pTOKEN2.sol\":9361:9380  MINT_AND_REDEEM_FEE */\n      sload(0x07)\n        /* \"pTOKEN2.sol\":9344:9356  totalBacking */\n      sload(0x09)\n        /* \"pTOKEN2.sol\":9334:9341  _amount */\n      dup6\n        /* \"pTOKEN2.sol\":9334:9356  _amount * totalBacking */\n      tag_236\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_236:\n        /* \"pTOKEN2.sol\":9333:9381  (_amount * totalBacking) * (MINT_AND_REDEEM_FEE) */\n      tag_237\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_237:\n        /* \"pTOKEN2.sol\":9332:9412  ((_amount * totalBacking) * (MINT_AND_REDEEM_FEE)) /... */\n      tag_238\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_238:\n        /* \"pTOKEN2.sol\":9332:9443  ((_amount * totalBacking) * (MINT_AND_REDEEM_FEE)) /... */\n      tag_239\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_239:\n        /* \"pTOKEN2.sol\":9313:9443  return... */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":9230:9450  function getRedeemPrice(uint256 _amount) external view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":3405:3737  function fillContract(uint256 _value) external onlyOwner {... */\n    tag_121:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_241\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_241:\n        /* \"pTOKEN2.sol\":3481:3486  start */\n      0x0a\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"pTOKEN2.sol\":3480:3486  !start */\n      iszero\n        /* \"pTOKEN2.sol\":3472:3487  require(!start) */\n      tag_243\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_243:\n        /* \"pTOKEN2.sol\":3497:3568  SafeERC20.safeTransferFrom(_BACKING, msg.sender, address(this), _value) */\n      tag_244\n        /* \"pTOKEN2.sol\":3524:3532  _BACKING */\n      immutable(\"0x90a0a53a674dda23f50c6d7df8f61e9f3e3cf11a0ea21d6964915bb3c7f9b219\")\n        /* \"pTOKEN2.sol\":3534:3544  msg.sender */\n      caller\n        /* \"pTOKEN2.sol\":3554:3558  this */\n      address\n        /* \"pTOKEN2.sol\":3561:3567  _value */\n      dup5\n        /* \"pTOKEN2.sol\":3497:3523  SafeERC20.safeTransferFrom */\n      tag_194\n        /* \"pTOKEN2.sol\":3497:3568  SafeERC20.safeTransferFrom(_BACKING, msg.sender, address(this), _value) */\n      jump\t// in\n    tag_244:\n        /* \"pTOKEN2.sol\":3578:3603  _mint(msg.sender, _value) */\n      tag_245\n        /* \"pTOKEN2.sol\":3584:3594  msg.sender */\n      caller\n        /* \"pTOKEN2.sol\":3596:3602  _value */\n      dup3\n        /* \"pTOKEN2.sol\":3578:3583  _mint */\n      tag_199\n        /* \"pTOKEN2.sol\":3578:3603  _mint(msg.sender, _value) */\n      jump\t// in\n    tag_245:\n        /* \"pTOKEN2.sol\":3613:3671  transfer(0x000000000000000000000000000000000000dEaD, 1000) */\n      tag_246\n        /* \"pTOKEN2.sol\":3622:3664  0x000000000000000000000000000000000000dEaD */\n      0xdead\n        /* \"pTOKEN2.sol\":3666:3670  1000 */\n      0x03e8\n        /* \"pTOKEN2.sol\":3613:3621  transfer */\n      tag_124\n        /* \"pTOKEN2.sol\":3613:3671  transfer(0x000000000000000000000000000000000000dEaD, 1000) */\n      jump\t// in\n    tag_246:\n      pop\n        /* \"pTOKEN2.sol\":3697:3705  _BACKING */\n      immutable(\"0x90a0a53a674dda23f50c6d7df8f61e9f3e3cf11a0ea21d6964915bb3c7f9b219\")\n        /* \"pTOKEN2.sol\":3697:3715  _BACKING.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"pTOKEN2.sol\":3724:3728  this */\n      address\n        /* \"pTOKEN2.sol\":3697:3730  _BACKING.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_247\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_247:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_249\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_249:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_250\n      swap2\n      swap1\n      tag_167\n      jump\t// in\n    tag_250:\n        /* \"pTOKEN2.sol\":3682:3694  totalBacking */\n      0x09\n        /* \"pTOKEN2.sol\":3682:3730  totalBacking = _BACKING.balanceOf(address(this)) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"pTOKEN2.sol\":3405:3737  function fillContract(uint256 _value) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_124:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3695:3708  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      tag_252\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3721  _msgSender */\n      tag_156\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      jump\t// in\n    tag_252:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3695:3723  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_253\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3743:3748  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_175\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n    tag_253:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3777:3781  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3770:3781  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":6689:6884  function setTeamFee(uint16 _amount) external onlyOwner {... */\n    tag_129:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_255\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_255:\n        /* \"pTOKEN2.sol\":6767:6770  100 */\n      0x64\n        /* \"pTOKEN2.sol\":6757:6764  _amount */\n      dup2\n        /* \"pTOKEN2.sol\":6757:6770  _amount > 100 */\n      0xffff\n      and\n      gt\n        /* \"pTOKEN2.sol\":6757:6786  _amount > 100 || _amount < 25 */\n      dup1\n      tag_257\n      jumpi\n      pop\n        /* \"pTOKEN2.sol\":6784:6786  25 */\n      0x19\n        /* \"pTOKEN2.sol\":6774:6781  _amount */\n      dup2\n        /* \"pTOKEN2.sol\":6774:6786  _amount < 25 */\n      0xffff\n      and\n      lt\n        /* \"pTOKEN2.sol\":6757:6786  _amount > 100 || _amount < 25 */\n    tag_257:\n        /* \"pTOKEN2.sol\":6754:6814  if(_amount > 100 || _amount < 25) revert TeamFeeNotInRange() */\n      iszero\n      tag_258\n      jumpi\n        /* \"pTOKEN2.sol\":6795:6814  TeamFeeNotInRange() */\n      mload(0x40)\n      0x7f176cee00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"pTOKEN2.sol\":6754:6814  if(_amount > 100 || _amount < 25) revert TeamFeeNotInRange() */\n    tag_258:\n        /* \"pTOKEN2.sol\":6832:6839  _amount */\n      dup1\n        /* \"pTOKEN2.sol\":6825:6839  FEES = _amount */\n      0xffff\n      and\n        /* \"pTOKEN2.sol\":6825:6829  FEES */\n      0x08\n        /* \"pTOKEN2.sol\":6825:6839  FEES = _amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"pTOKEN2.sol\":6854:6877  TeamFeeUpdated(_amount) */\n      0x9de4e85041d310d87df38a671e7ecf270c37d73ea017960b904af70512059621\n        /* \"pTOKEN2.sol\":6869:6876  _amount */\n      dup2\n        /* \"pTOKEN2.sol\":6854:6877  TeamFeeUpdated(_amount) */\n      mload(0x40)\n      tag_259\n      swap2\n      swap1\n      tag_260\n      jump\t// in\n    tag_259:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"pTOKEN2.sol\":6689:6884  function setTeamFee(uint16 _amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":5044:5706  function redeem(uint256 _amount) external nonReentrant {... */\n    tag_132:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2356:2377  _nonReentrantBefore() */\n      tag_262\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2356:2375  _nonReentrantBefore */\n      tag_182\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2356:2377  _nonReentrantBefore() */\n      jump\t// in\n    tag_262:\n        /* \"pTOKEN2.sol\":1323:1327  1000 */\n      0x03e8\n        /* \"pTOKEN2.sol\":5113:5120  _amount */\n      dup2\n        /* \"pTOKEN2.sol\":5113:5127  _amount < _MIN */\n      lt\n        /* \"pTOKEN2.sol\":5109:5154  if (_amount < _MIN) revert MustTradeOverMin() */\n      iszero\n      tag_264\n      jumpi\n        /* \"pTOKEN2.sol\":5136:5154  MustTradeOverMin() */\n      mload(0x40)\n      0x2b4db67a00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"pTOKEN2.sol\":5109:5154  if (_amount < _MIN) revert MustTradeOverMin() */\n    tag_264:\n        /* \"pTOKEN2.sol\":5165:5179  uint256 pToken */\n      0x00\n        /* \"pTOKEN2.sol\":5182:5207  _PTOKENtoBACKING(_amount) */\n      tag_265\n        /* \"pTOKEN2.sol\":5199:5206  _amount */\n      dup3\n        /* \"pTOKEN2.sol\":5182:5198  _PTOKENtoBACKING */\n      tag_266\n        /* \"pTOKEN2.sol\":5182:5207  _PTOKENtoBACKING(_amount) */\n      jump\t// in\n    tag_265:\n        /* \"pTOKEN2.sol\":5165:5207  uint256 pToken = _PTOKENtoBACKING(_amount) */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":5218:5245  uint256 backingToFeeAddress */\n      0x00\n        /* \"pTOKEN2.sol\":5258:5262  FEES */\n      sload(0x08)\n        /* \"pTOKEN2.sol\":5248:5255  _amount */\n      dup4\n        /* \"pTOKEN2.sol\":5248:5262  _amount / FEES */\n      tag_267\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_267:\n        /* \"pTOKEN2.sol\":5218:5262  uint256 backingToFeeAddress = _amount / FEES */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":5272:5295  uint256 backingToSender */\n      0x00\n        /* \"pTOKEN2.sol\":1375:1379  1000 */\n      0x03e8\n        /* \"pTOKEN2.sol\":5309:5328  MINT_AND_REDEEM_FEE */\n      sload(0x07)\n        /* \"pTOKEN2.sol\":5299:5306  _amount */\n      dup6\n        /* \"pTOKEN2.sol\":5299:5328  _amount * MINT_AND_REDEEM_FEE */\n      tag_268\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_268:\n        /* \"pTOKEN2.sol\":5298:5346  (_amount * MINT_AND_REDEEM_FEE) / _FEE_BASE_1000 */\n      tag_269\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_269:\n        /* \"pTOKEN2.sol\":5272:5346  uint256 backingToSender = (_amount * MINT_AND_REDEEM_FEE) / _FEE_BASE_1000 */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":5391:5410  backingToFeeAddress */\n      dup2\n        /* \"pTOKEN2.sol\":5373:5388  backingToSender */\n      dup2\n        /* \"pTOKEN2.sol\":5373:5410  backingToSender + backingToFeeAddress */\n      tag_270\n      swap2\n      swap1\n      tag_192\n      jump\t// in\n    tag_270:\n        /* \"pTOKEN2.sol\":5356:5368  totalBacking */\n      0x09\n      0x00\n        /* \"pTOKEN2.sol\":5356:5411  totalBacking -= (backingToSender + backingToFeeAddress) */\n      dup3\n      dup3\n      sload\n      tag_271\n      swap2\n      swap1\n      tag_190\n      jump\t// in\n    tag_271:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"pTOKEN2.sol\":5422:5447  _burn(msg.sender, pToken) */\n      tag_272\n        /* \"pTOKEN2.sol\":5428:5438  msg.sender */\n      caller\n        /* \"pTOKEN2.sol\":5440:5446  pToken */\n      dup5\n        /* \"pTOKEN2.sol\":5422:5427  _burn */\n      tag_205\n        /* \"pTOKEN2.sol\":5422:5447  _burn(msg.sender, pToken) */\n      jump\t// in\n    tag_272:\n        /* \"pTOKEN2.sol\":5458:5542  SafeERC20.safeTransferFrom(_BACKING, address(this), feeAddress, backingToFeeAddress) */\n      tag_273\n        /* \"pTOKEN2.sol\":5485:5493  _BACKING */\n      immutable(\"0x90a0a53a674dda23f50c6d7df8f61e9f3e3cf11a0ea21d6964915bb3c7f9b219\")\n        /* \"pTOKEN2.sol\":5503:5507  this */\n      address\n        /* \"pTOKEN2.sol\":5510:5520  feeAddress */\n      0x0a\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"pTOKEN2.sol\":5522:5541  backingToFeeAddress */\n      dup6\n        /* \"pTOKEN2.sol\":5458:5484  SafeERC20.safeTransferFrom */\n      tag_194\n        /* \"pTOKEN2.sol\":5458:5542  SafeERC20.safeTransferFrom(_BACKING, address(this), feeAddress, backingToFeeAddress) */\n      jump\t// in\n    tag_273:\n        /* \"pTOKEN2.sol\":5553:5633  SafeERC20.safeTransferFrom(_BACKING, address(this), msg.sender, backingToSender) */\n      tag_274\n        /* \"pTOKEN2.sol\":5580:5588  _BACKING */\n      immutable(\"0x90a0a53a674dda23f50c6d7df8f61e9f3e3cf11a0ea21d6964915bb3c7f9b219\")\n        /* \"pTOKEN2.sol\":5598:5602  this */\n      address\n        /* \"pTOKEN2.sol\":5605:5615  msg.sender */\n      caller\n        /* \"pTOKEN2.sol\":5617:5632  backingToSender */\n      dup5\n        /* \"pTOKEN2.sol\":5553:5579  SafeERC20.safeTransferFrom */\n      tag_194\n        /* \"pTOKEN2.sol\":5553:5633  SafeERC20.safeTransferFrom(_BACKING, address(this), msg.sender, backingToSender) */\n      jump\t// in\n    tag_274:\n        /* \"pTOKEN2.sol\":5691:5698  _amount */\n      dup4\n        /* \"pTOKEN2.sol\":5683:5689  pToken */\n      dup4\n        /* \"pTOKEN2.sol\":5666:5681  block.timestamp */\n      timestamp\n        /* \"pTOKEN2.sol\":5649:5699  PriceAfterRedeem(block.timestamp, pToken, _amount) */\n      0x1be07ad598d802b0a04e208e5f3dfe7eaf27339c0f0e4a75ddba517bbe5c8f36\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"pTOKEN2.sol\":5099:5706  {... */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2398:2418  _nonReentrantAfter() */\n      tag_275\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2398:2416  _nonReentrantAfter */\n      tag_201\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2398:2418  _nonReentrantAfter() */\n      jump\t// in\n    tag_275:\n        /* \"pTOKEN2.sol\":5044:5706  function redeem(uint256 _amount) external nonReentrant {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_136:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3964:3969  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3971:3978  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3945:3979  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":1957:1984  uint256 public totalBacking */\n    tag_139:\n      sload(0x09)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_143:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_278\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_278:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2647:2648  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2635  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_280\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_281\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_281:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_280:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_282\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_217\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_282:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":6256:6493  function setMintAndRedeemFee(uint16 _amount) external onlyOwner {... */\n    tag_146:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_284\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_284:\n        /* \"pTOKEN2.sol\":6343:6346  980 */\n      0x03d4\n        /* \"pTOKEN2.sol\":6333:6340  _amount */\n      dup2\n        /* \"pTOKEN2.sol\":6333:6346  _amount > 980 */\n      0xffff\n      and\n      gt\n        /* \"pTOKEN2.sol\":6333:6363  _amount > 980 || _amount < 950 */\n      dup1\n      tag_286\n      jumpi\n      pop\n        /* \"pTOKEN2.sol\":6360:6363  950 */\n      0x03b6\n        /* \"pTOKEN2.sol\":6350:6357  _amount */\n      dup2\n        /* \"pTOKEN2.sol\":6350:6363  _amount < 950 */\n      0xffff\n      and\n      lt\n        /* \"pTOKEN2.sol\":6333:6363  _amount > 980 || _amount < 950 */\n    tag_286:\n        /* \"pTOKEN2.sol\":6330:6400  if(_amount > 980 || _amount < 950) revert MintAndRedeemFeeNotInRange() */\n      iszero\n      tag_287\n      jumpi\n        /* \"pTOKEN2.sol\":6372:6400  MintAndRedeemFeeNotInRange() */\n      mload(0x40)\n      0x48565ad500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"pTOKEN2.sol\":6330:6400  if(_amount > 980 || _amount < 950) revert MintAndRedeemFeeNotInRange() */\n    tag_287:\n        /* \"pTOKEN2.sol\":6432:6439  _amount */\n      dup1\n        /* \"pTOKEN2.sol\":6410:6439  MINT_AND_REDEEM_FEE = _amount */\n      0xffff\n      and\n        /* \"pTOKEN2.sol\":6410:6429  MINT_AND_REDEEM_FEE */\n      0x07\n        /* \"pTOKEN2.sol\":6410:6439  MINT_AND_REDEEM_FEE = _amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"pTOKEN2.sol\":6454:6486  MintAndRedeemFeeUpdated(_amount) */\n      0xa7aaf5668e7d5e60bfa38b5d07a3178204a2d8cb16f5a03678c20f42c7954295\n        /* \"pTOKEN2.sol\":6478:6485  _amount */\n      dup2\n        /* \"pTOKEN2.sol\":6454:6486  MintAndRedeemFeeUpdated(_amount) */\n      mload(0x40)\n      tag_288\n      swap2\n      swap1\n      tag_260\n      jump\t// in\n    tag_288:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"pTOKEN2.sol\":6256:6493  function setMintAndRedeemFee(uint16 _amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n    tag_156:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":709:716  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":728:745  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_158:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_291\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_292\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_291:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_161:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1866:1878  _msgSender() */\n      tag_294\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1866:1876  _msgSender */\n      tag_156\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1866:1878  _msgSender() */\n      jump\t// in\n    tag_294:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1862  owner() */\n      tag_295\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1860  owner */\n      tag_106\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1862  owner() */\n      jump\t// in\n    tag_295:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_296\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1928:1940  _msgSender() */\n      tag_297\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1928:1938  _msgSender */\n      tag_156\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1928:1940  _msgSender() */\n      jump\t// in\n    tag_297:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      0x118cdaa700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_298\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_298:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n    tag_296:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_173:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      tag_300\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10799:10804  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10806:10813  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10798  allowance */\n      tag_136\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      jump\t// in\n    tag_300:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10814  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10848:10865  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10844  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_301\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_302\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10963:10970  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10972:10988  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10990:10995  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_303\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_304\n      jump\t// in\n    tag_303:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_302:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_305\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_292\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_305:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n    tag_301:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_175:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5755:5756  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5743  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_307\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_308\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_308:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_307:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5848:5849  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5836  to */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_309\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_310\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_310:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_309:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_311\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_312\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n    tag_311:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2431:2738  function _nonReentrantBefore() private {... */\n    tag_182:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1755:1756  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2558:2565  _status */\n      sload(0x06)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2558:2576  _status == ENTERED */\n      sub\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2554:2640  if (_status == ENTERED) {... */\n      tag_314\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2599:2629  ReentrancyGuardReentrantCall() */\n      mload(0x40)\n      0x3ee5aeb500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2554:2640  if (_status == ENTERED) {... */\n    tag_314:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1755:1756  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2714:2721  _status */\n      0x06\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2714:2731  _status = ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2431:2738  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"pTOKEN2.sol\":7855:7993  function _BACKINGtoPTOKEN(uint256 _value) private view returns (uint256) {... */\n    tag_186:\n        /* \"pTOKEN2.sol\":7919:7926  uint256 */\n      0x00\n        /* \"pTOKEN2.sol\":7973:7985  totalBacking */\n      sload(0x09)\n        /* \"pTOKEN2.sol\":7955:7968  totalSupply() */\n      tag_316\n        /* \"pTOKEN2.sol\":7955:7966  totalSupply */\n      tag_57\n        /* \"pTOKEN2.sol\":7955:7968  totalSupply() */\n      jump\t// in\n    tag_316:\n        /* \"pTOKEN2.sol\":7946:7952  _value */\n      dup4\n        /* \"pTOKEN2.sol\":7946:7968  _value * totalSupply() */\n      tag_317\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_317:\n        /* \"pTOKEN2.sol\":7945:7986  (_value * totalSupply()) / (totalBacking) */\n      tag_318\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_318:\n        /* \"pTOKEN2.sol\":7938:7986  return (_value * totalSupply()) / (totalBacking) */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":7855:7993  function _BACKINGtoPTOKEN(uint256 _value) private view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_194:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1883  _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value))) */\n      tag_320\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1822:1827  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1844:1849  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1844:1862  token.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1865:1869  from */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1871:1873  to */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1875:1880  value */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      add(0x24, mload(0x40))\n      tag_321\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_322\n      jump\t// in\n    tag_321:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap2\n      pop\n      0xe0\n      shl\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1821  _callOptionalReturn */\n      tag_323\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1883  _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value))) */\n      jump\t// in\n    tag_320:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n    tag_199:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7810:7811  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7798  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_325\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_326\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_326:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_325:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      tag_327\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n      tag_312\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      jump\t// in\n    tag_327:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2744:2952  function _nonReentrantAfter() private {... */\n    tag_201:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1713:1714  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2924:2931  _status */\n      0x06\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2924:2945  _status = NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2744:2952  function _nonReentrantAfter() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_205:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8336:8337  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8324  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_330\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_331\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_331:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_330:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_332\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_312\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n    tag_332:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_217:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3010  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3029:3037  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3026  _owner */\n      0x05\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3083:3091  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3073:3081  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":8327:8547  function _assemblyOwnerNotZero(address _addr) private pure {... */\n    tag_226:\n        /* \"pTOKEN2.sol\":8429:8434  _addr */\n      dup1\n        /* \"pTOKEN2.sol\":8419:8531  if iszero(_addr) {... */\n      tag_335\n      jumpi\n        /* \"pTOKEN2.sol\":8467:8481  \"Zero address\" */\n      0x5a65726f20616464726573730000000000000000000000000000000000000000\n        /* \"pTOKEN2.sol\":8461:8465  0x00 */\n      0x00\n        /* \"pTOKEN2.sol\":8454:8482  mstore(0x00, \"Zero address\") */\n      mstore\n        /* \"pTOKEN2.sol\":8512:8516  0x20 */\n      0x20\n        /* \"pTOKEN2.sol\":8506:8510  0x00 */\n      0x00\n        /* \"pTOKEN2.sol\":8499:8517  revert(0x00, 0x20) */\n      revert\n        /* \"pTOKEN2.sol\":8419:8531  if iszero(_addr) {... */\n    tag_335:\n        /* \"pTOKEN2.sol\":8327:8547  function _assemblyOwnerNotZero(address _addr) private pure {... */\n      pop\n      jump\t// out\n        /* \"pTOKEN2.sol\":7550:7686  function _PTOKENtoBACKING(uint256 _value) private view returns (uint256) {... */\n    tag_266:\n        /* \"pTOKEN2.sol\":7614:7621  uint256 */\n      0x00\n        /* \"pTOKEN2.sol\":7666:7679  totalSupply() */\n      tag_337\n        /* \"pTOKEN2.sol\":7666:7677  totalSupply */\n      tag_57\n        /* \"pTOKEN2.sol\":7666:7679  totalSupply() */\n      jump\t// in\n    tag_337:\n        /* \"pTOKEN2.sol\":7650:7662  totalBacking */\n      sload(0x09)\n        /* \"pTOKEN2.sol\":7641:7647  _value */\n      dup4\n        /* \"pTOKEN2.sol\":7641:7662  _value * totalBacking */\n      tag_338\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_338:\n        /* \"pTOKEN2.sol\":7640:7679  (_value * totalBacking) / totalSupply() */\n      tag_339\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_339:\n        /* \"pTOKEN2.sol\":7633:7679  return (_value * totalBacking) / totalSupply() */\n      swap1\n      pop\n        /* \"pTOKEN2.sol\":7550:7686  function _PTOKENtoBACKING(uint256 _value) private view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_292:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10078:10079  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_341\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_342\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_342:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_341:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10178:10179  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10166  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_343\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_344\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_344:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_343:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10284:10289  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10266:10271  owner */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10273:10280  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10303:10312  emitEvent */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      iszero\n      tag_345\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_346\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_346:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n    tag_345:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_312:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6376:6377  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6364  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_348\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_349\n      swap2\n      swap1\n      tag_192\n      jump\t// in\n    tag_349:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      jump(tag_350)\n    tag_348:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6579  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6580:6584  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6585  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6617:6622  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6614  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_351\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6674:6678  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6680:6691  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6693:6698  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_352\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_304\n      jump\t// in\n    tag_352:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_351:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6866:6871  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6863  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6844:6848  from */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6534:6896  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_350:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6924:6925  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6912  to */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_353\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7089:7094  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_354)\n    tag_353:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7301:7306  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7294:7296  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_354:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_355\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_355:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_323:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4478:4501  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4537  address(token).functionCall(data) */\n      tag_357\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4532:4536  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4512:4517  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4531  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_358\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4537  address(token).functionCall(data) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_357:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4478:4537  bytes memory returndata = address(token).functionCall(data) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4572:4573  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4561  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4568  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4573  returndata.length != 0 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      dup1\n      iszero\n      tag_359\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4589:4599  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_360\n      swap2\n      swap1\n      tag_361\n      jump\t// in\n    tag_360:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4577:4608  !abi.decode(returndata, (bool)) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n    tag_359:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n      iszero\n      tag_362\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4664:4669  token */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      mload(0x40)\n      0x5274afe700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_363\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_363:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n    tag_362:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4129:4688  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2705:2856  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_358:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2780:2792  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2849  functionCallWithValue(target, data, 0) */\n      tag_365\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2833:2839  target */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2841:2845  data */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2847:2848  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2832  functionCallWithValue */\n      tag_366\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2849  functionCallWithValue(target, data, 0) */\n      jump\t// in\n    tag_365:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2804:2849  return functionCallWithValue(target, data, 0) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2705:2856  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3180:3572  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n    tag_366:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3279:3291  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3331:3336  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3307:3328  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3307:3336  address(this).balance < value */\n      lt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3303:3411  if (address(this).balance < value) {... */\n      iszero\n      tag_368\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3394:3398  this */\n      address\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3359:3400  AddressInsufficientBalance(address(this)) */\n      mload(0x40)\n      0xcd78605900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_369\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_369:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3303:3411  if (address(this).balance < value) {... */\n    tag_368:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3421:3433  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3435:3458  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3468  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3473  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3481:3486  value */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3488:3492  data */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      mload(0x40)\n      tag_370\n      swap2\n      swap1\n      tag_371\n      jump\t// in\n    tag_370:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_374\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_373)\n    tag_374:\n      0x60\n      swap2\n      pop\n    tag_373:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3420:3493  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_375\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3537:3543  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3545:3552  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3554:3564  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3536  verifyCallResultFromTarget */\n      tag_376\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      jump\t// in\n    tag_375:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3503:3565  return verifyCallResultFromTarget(target, success, returndata) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3180:3572  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_376:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4769:4781  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4798:4805  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n      tag_378\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4840  _revert(returndata) */\n      tag_379\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4829:4839  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4828  _revert */\n      tag_380\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4840  _revert(returndata) */\n      jump\t// in\n    tag_379:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n      jump(tag_381)\n    tag_378:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5066:5067  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5055  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5062  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5067  returndata.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      dup1\n      iszero\n      tag_382\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5093:5094  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5077  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5089  target.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5094  target.code.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n    tag_382:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n      iszero\n      tag_383\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5138:5144  target */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      mload(0x40)\n      0x9996b31500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_384\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_384:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n    tag_383:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5180:5190  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5173:5190  return returndata */\n      swap1\n      pop\n      jump(tag_377)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_381:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_377:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5743:6259  function _revert(bytes memory returndata) private pure {... */\n    tag_380:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5894:5895  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5884  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5891  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5895  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n      iszero\n      tag_386\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6102:6112  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6096:6113  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6158:6173  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6145:6155  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6141:6143  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6137:6156  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6130:6174  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n    tag_386:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6225:6242  FailedInnerCall() */\n      mload(0x40)\n      0x1425ea4200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":7:133   */\n    tag_388:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":84:126   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":77:82   */\n      dup3\n        /* \"#utility.yul\":73:127   */\n      and\n        /* \"#utility.yul\":62:127   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:133   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":139:199   */\n    tag_389:\n        /* \"#utility.yul\":167:170   */\n      0x00\n        /* \"#utility.yul\":188:193   */\n      dup2\n        /* \"#utility.yul\":181:193   */\n      swap1\n      pop\n        /* \"#utility.yul\":139:199   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":205:347   */\n    tag_390:\n        /* \"#utility.yul\":255:264   */\n      0x00\n        /* \"#utility.yul\":288:341   */\n      tag_434\n        /* \"#utility.yul\":306:340   */\n      tag_435\n        /* \"#utility.yul\":315:339   */\n      tag_436\n        /* \"#utility.yul\":333:338   */\n      dup5\n        /* \"#utility.yul\":315:339   */\n      tag_388\n      jump\t// in\n    tag_436:\n        /* \"#utility.yul\":306:340   */\n      tag_389\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":288:341   */\n      tag_388\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":275:341   */\n      swap1\n      pop\n        /* \"#utility.yul\":205:347   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":353:479   */\n    tag_391:\n        /* \"#utility.yul\":403:412   */\n      0x00\n        /* \"#utility.yul\":436:473   */\n      tag_438\n        /* \"#utility.yul\":467:472   */\n      dup3\n        /* \"#utility.yul\":436:473   */\n      tag_390\n      jump\t// in\n    tag_438:\n        /* \"#utility.yul\":423:473   */\n      swap1\n      pop\n        /* \"#utility.yul\":353:479   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":485:625   */\n    tag_392:\n        /* \"#utility.yul\":549:558   */\n      0x00\n        /* \"#utility.yul\":582:619   */\n      tag_440\n        /* \"#utility.yul\":613:618   */\n      dup3\n        /* \"#utility.yul\":582:619   */\n      tag_391\n      jump\t// in\n    tag_440:\n        /* \"#utility.yul\":569:619   */\n      swap1\n      pop\n        /* \"#utility.yul\":485:625   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":631:790   */\n    tag_393:\n        /* \"#utility.yul\":732:783   */\n      tag_442\n        /* \"#utility.yul\":777:782   */\n      dup2\n        /* \"#utility.yul\":732:783   */\n      tag_392\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":727:730   */\n      dup3\n        /* \"#utility.yul\":720:784   */\n      mstore\n        /* \"#utility.yul\":631:790   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":796:1046   */\n    tag_43:\n        /* \"#utility.yul\":903:907   */\n      0x00\n        /* \"#utility.yul\":941:943   */\n      0x20\n        /* \"#utility.yul\":930:939   */\n      dup3\n        /* \"#utility.yul\":926:944   */\n      add\n        /* \"#utility.yul\":918:944   */\n      swap1\n      pop\n        /* \"#utility.yul\":954:1039   */\n      tag_444\n        /* \"#utility.yul\":1036:1037   */\n      0x00\n        /* \"#utility.yul\":1025:1034   */\n      dup4\n        /* \"#utility.yul\":1021:1038   */\n      add\n        /* \"#utility.yul\":1012:1018   */\n      dup5\n        /* \"#utility.yul\":954:1039   */\n      tag_393\n      jump\t// in\n    tag_444:\n        /* \"#utility.yul\":796:1046   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1052:1151   */\n    tag_394:\n        /* \"#utility.yul\":1104:1110   */\n      0x00\n        /* \"#utility.yul\":1138:1143   */\n      dup2\n        /* \"#utility.yul\":1132:1144   */\n      mload\n        /* \"#utility.yul\":1122:1144   */\n      swap1\n      pop\n        /* \"#utility.yul\":1052:1151   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1157:1326   */\n    tag_395:\n        /* \"#utility.yul\":1241:1252   */\n      0x00\n        /* \"#utility.yul\":1275:1281   */\n      dup3\n        /* \"#utility.yul\":1270:1273   */\n      dup3\n        /* \"#utility.yul\":1263:1282   */\n      mstore\n        /* \"#utility.yul\":1315:1319   */\n      0x20\n        /* \"#utility.yul\":1310:1313   */\n      dup3\n        /* \"#utility.yul\":1306:1320   */\n      add\n        /* \"#utility.yul\":1291:1320   */\n      swap1\n      pop\n        /* \"#utility.yul\":1157:1326   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1332:1578   */\n    tag_396:\n        /* \"#utility.yul\":1413:1414   */\n      0x00\n        /* \"#utility.yul\":1423:1536   */\n    tag_448:\n        /* \"#utility.yul\":1437:1443   */\n      dup4\n        /* \"#utility.yul\":1434:1435   */\n      dup2\n        /* \"#utility.yul\":1431:1444   */\n      lt\n        /* \"#utility.yul\":1423:1536   */\n      iszero\n      tag_450\n      jumpi\n        /* \"#utility.yul\":1522:1523   */\n      dup1\n        /* \"#utility.yul\":1517:1520   */\n      dup3\n        /* \"#utility.yul\":1513:1524   */\n      add\n        /* \"#utility.yul\":1507:1525   */\n      mload\n        /* \"#utility.yul\":1503:1504   */\n      dup2\n        /* \"#utility.yul\":1498:1501   */\n      dup5\n        /* \"#utility.yul\":1494:1505   */\n      add\n        /* \"#utility.yul\":1487:1526   */\n      mstore\n        /* \"#utility.yul\":1459:1461   */\n      0x20\n        /* \"#utility.yul\":1456:1457   */\n      dup2\n        /* \"#utility.yul\":1452:1462   */\n      add\n        /* \"#utility.yul\":1447:1462   */\n      swap1\n      pop\n        /* \"#utility.yul\":1423:1536   */\n      jump(tag_448)\n    tag_450:\n        /* \"#utility.yul\":1570:1571   */\n      0x00\n        /* \"#utility.yul\":1561:1567   */\n      dup5\n        /* \"#utility.yul\":1556:1559   */\n      dup5\n        /* \"#utility.yul\":1552:1568   */\n      add\n        /* \"#utility.yul\":1545:1572   */\n      mstore\n        /* \"#utility.yul\":1394:1578   */\n      pop\n        /* \"#utility.yul\":1332:1578   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1584:1686   */\n    tag_397:\n        /* \"#utility.yul\":1625:1631   */\n      0x00\n        /* \"#utility.yul\":1676:1678   */\n      0x1f\n        /* \"#utility.yul\":1672:1679   */\n      not\n        /* \"#utility.yul\":1667:1669   */\n      0x1f\n        /* \"#utility.yul\":1660:1665   */\n      dup4\n        /* \"#utility.yul\":1656:1670   */\n      add\n        /* \"#utility.yul\":1652:1680   */\n      and\n        /* \"#utility.yul\":1642:1680   */\n      swap1\n      pop\n        /* \"#utility.yul\":1584:1686   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1692:2069   */\n    tag_398:\n        /* \"#utility.yul\":1780:1783   */\n      0x00\n        /* \"#utility.yul\":1808:1847   */\n      tag_453\n        /* \"#utility.yul\":1841:1846   */\n      dup3\n        /* \"#utility.yul\":1808:1847   */\n      tag_394\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":1863:1934   */\n      tag_454\n        /* \"#utility.yul\":1927:1933   */\n      dup2\n        /* \"#utility.yul\":1922:1925   */\n      dup6\n        /* \"#utility.yul\":1863:1934   */\n      tag_395\n      jump\t// in\n    tag_454:\n        /* \"#utility.yul\":1856:1934   */\n      swap4\n      pop\n        /* \"#utility.yul\":1943:2008   */\n      tag_455\n        /* \"#utility.yul\":2001:2007   */\n      dup2\n        /* \"#utility.yul\":1996:1999   */\n      dup6\n        /* \"#utility.yul\":1989:1993   */\n      0x20\n        /* \"#utility.yul\":1982:1987   */\n      dup7\n        /* \"#utility.yul\":1978:1994   */\n      add\n        /* \"#utility.yul\":1943:2008   */\n      tag_396\n      jump\t// in\n    tag_455:\n        /* \"#utility.yul\":2033:2062   */\n      tag_456\n        /* \"#utility.yul\":2055:2061   */\n      dup2\n        /* \"#utility.yul\":2033:2062   */\n      tag_397\n      jump\t// in\n    tag_456:\n        /* \"#utility.yul\":2028:2031   */\n      dup5\n        /* \"#utility.yul\":2024:2063   */\n      add\n        /* \"#utility.yul\":2017:2063   */\n      swap2\n      pop\n        /* \"#utility.yul\":1784:2069   */\n      pop\n        /* \"#utility.yul\":1692:2069   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2075:2388   */\n    tag_47:\n        /* \"#utility.yul\":2188:2192   */\n      0x00\n        /* \"#utility.yul\":2226:2228   */\n      0x20\n        /* \"#utility.yul\":2215:2224   */\n      dup3\n        /* \"#utility.yul\":2211:2229   */\n      add\n        /* \"#utility.yul\":2203:2229   */\n      swap1\n      pop\n        /* \"#utility.yul\":2275:2284   */\n      dup2\n        /* \"#utility.yul\":2269:2273   */\n      dup2\n        /* \"#utility.yul\":2265:2285   */\n      sub\n        /* \"#utility.yul\":2261:2262   */\n      0x00\n        /* \"#utility.yul\":2250:2259   */\n      dup4\n        /* \"#utility.yul\":2246:2263   */\n      add\n        /* \"#utility.yul\":2239:2286   */\n      mstore\n        /* \"#utility.yul\":2303:2381   */\n      tag_458\n        /* \"#utility.yul\":2376:2380   */\n      dup2\n        /* \"#utility.yul\":2367:2373   */\n      dup5\n        /* \"#utility.yul\":2303:2381   */\n      tag_398\n      jump\t// in\n    tag_458:\n        /* \"#utility.yul\":2295:2381   */\n      swap1\n      pop\n        /* \"#utility.yul\":2075:2388   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2475:2592   */\n    tag_400:\n        /* \"#utility.yul\":2584:2585   */\n      0x00\n        /* \"#utility.yul\":2581:2582   */\n      dup1\n        /* \"#utility.yul\":2574:2586   */\n      revert\n        /* \"#utility.yul\":2721:2817   */\n    tag_402:\n        /* \"#utility.yul\":2758:2765   */\n      0x00\n        /* \"#utility.yul\":2787:2811   */\n      tag_463\n        /* \"#utility.yul\":2805:2810   */\n      dup3\n        /* \"#utility.yul\":2787:2811   */\n      tag_388\n      jump\t// in\n    tag_463:\n        /* \"#utility.yul\":2776:2811   */\n      swap1\n      pop\n        /* \"#utility.yul\":2721:2817   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2823:2945   */\n    tag_403:\n        /* \"#utility.yul\":2896:2920   */\n      tag_465\n        /* \"#utility.yul\":2914:2919   */\n      dup2\n        /* \"#utility.yul\":2896:2920   */\n      tag_402\n      jump\t// in\n    tag_465:\n        /* \"#utility.yul\":2889:2894   */\n      dup2\n        /* \"#utility.yul\":2886:2921   */\n      eq\n        /* \"#utility.yul\":2876:2939   */\n      tag_466\n      jumpi\n        /* \"#utility.yul\":2935:2936   */\n      0x00\n        /* \"#utility.yul\":2932:2933   */\n      dup1\n        /* \"#utility.yul\":2925:2937   */\n      revert\n        /* \"#utility.yul\":2876:2939   */\n    tag_466:\n        /* \"#utility.yul\":2823:2945   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2951:3090   */\n    tag_404:\n        /* \"#utility.yul\":2997:3002   */\n      0x00\n        /* \"#utility.yul\":3035:3041   */\n      dup2\n        /* \"#utility.yul\":3022:3042   */\n      calldataload\n        /* \"#utility.yul\":3013:3042   */\n      swap1\n      pop\n        /* \"#utility.yul\":3051:3084   */\n      tag_468\n        /* \"#utility.yul\":3078:3083   */\n      dup2\n        /* \"#utility.yul\":3051:3084   */\n      tag_403\n      jump\t// in\n    tag_468:\n        /* \"#utility.yul\":2951:3090   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3096:3173   */\n    tag_405:\n        /* \"#utility.yul\":3133:3140   */\n      0x00\n        /* \"#utility.yul\":3162:3167   */\n      dup2\n        /* \"#utility.yul\":3151:3167   */\n      swap1\n      pop\n        /* \"#utility.yul\":3096:3173   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3179:3301   */\n    tag_406:\n        /* \"#utility.yul\":3252:3276   */\n      tag_471\n        /* \"#utility.yul\":3270:3275   */\n      dup2\n        /* \"#utility.yul\":3252:3276   */\n      tag_405\n      jump\t// in\n    tag_471:\n        /* \"#utility.yul\":3245:3250   */\n      dup2\n        /* \"#utility.yul\":3242:3277   */\n      eq\n        /* \"#utility.yul\":3232:3295   */\n      tag_472\n      jumpi\n        /* \"#utility.yul\":3291:3292   */\n      0x00\n        /* \"#utility.yul\":3288:3289   */\n      dup1\n        /* \"#utility.yul\":3281:3293   */\n      revert\n        /* \"#utility.yul\":3232:3295   */\n    tag_472:\n        /* \"#utility.yul\":3179:3301   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3307:3446   */\n    tag_407:\n        /* \"#utility.yul\":3353:3358   */\n      0x00\n        /* \"#utility.yul\":3391:3397   */\n      dup2\n        /* \"#utility.yul\":3378:3398   */\n      calldataload\n        /* \"#utility.yul\":3369:3398   */\n      swap1\n      pop\n        /* \"#utility.yul\":3407:3440   */\n      tag_474\n        /* \"#utility.yul\":3434:3439   */\n      dup2\n        /* \"#utility.yul\":3407:3440   */\n      tag_406\n      jump\t// in\n    tag_474:\n        /* \"#utility.yul\":3307:3446   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3452:3926   */\n    tag_50:\n        /* \"#utility.yul\":3520:3526   */\n      0x00\n        /* \"#utility.yul\":3528:3534   */\n      dup1\n        /* \"#utility.yul\":3577:3579   */\n      0x40\n        /* \"#utility.yul\":3565:3574   */\n      dup4\n        /* \"#utility.yul\":3556:3563   */\n      dup6\n        /* \"#utility.yul\":3552:3575   */\n      sub\n        /* \"#utility.yul\":3548:3580   */\n      slt\n        /* \"#utility.yul\":3545:3664   */\n      iszero\n      tag_476\n      jumpi\n        /* \"#utility.yul\":3583:3662   */\n      tag_477\n      tag_400\n      jump\t// in\n    tag_477:\n        /* \"#utility.yul\":3545:3664   */\n    tag_476:\n        /* \"#utility.yul\":3703:3704   */\n      0x00\n        /* \"#utility.yul\":3728:3781   */\n      tag_478\n        /* \"#utility.yul\":3773:3780   */\n      dup6\n        /* \"#utility.yul\":3764:3770   */\n      dup3\n        /* \"#utility.yul\":3753:3762   */\n      dup7\n        /* \"#utility.yul\":3749:3771   */\n      add\n        /* \"#utility.yul\":3728:3781   */\n      tag_404\n      jump\t// in\n    tag_478:\n        /* \"#utility.yul\":3718:3781   */\n      swap3\n      pop\n        /* \"#utility.yul\":3674:3791   */\n      pop\n        /* \"#utility.yul\":3830:3832   */\n      0x20\n        /* \"#utility.yul\":3856:3909   */\n      tag_479\n        /* \"#utility.yul\":3901:3908   */\n      dup6\n        /* \"#utility.yul\":3892:3898   */\n      dup3\n        /* \"#utility.yul\":3881:3890   */\n      dup7\n        /* \"#utility.yul\":3877:3899   */\n      add\n        /* \"#utility.yul\":3856:3909   */\n      tag_407\n      jump\t// in\n    tag_479:\n        /* \"#utility.yul\":3846:3909   */\n      swap2\n      pop\n        /* \"#utility.yul\":3801:3919   */\n      pop\n        /* \"#utility.yul\":3452:3926   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3932:4022   */\n    tag_408:\n        /* \"#utility.yul\":3966:3973   */\n      0x00\n        /* \"#utility.yul\":4009:4014   */\n      dup2\n        /* \"#utility.yul\":4002:4015   */\n      iszero\n        /* \"#utility.yul\":3995:4016   */\n      iszero\n        /* \"#utility.yul\":3984:4016   */\n      swap1\n      pop\n        /* \"#utility.yul\":3932:4022   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4028:4137   */\n    tag_409:\n        /* \"#utility.yul\":4109:4130   */\n      tag_482\n        /* \"#utility.yul\":4124:4129   */\n      dup2\n        /* \"#utility.yul\":4109:4130   */\n      tag_408\n      jump\t// in\n    tag_482:\n        /* \"#utility.yul\":4104:4107   */\n      dup3\n        /* \"#utility.yul\":4097:4131   */\n      mstore\n        /* \"#utility.yul\":4028:4137   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4143:4353   */\n    tag_53:\n        /* \"#utility.yul\":4230:4234   */\n      0x00\n        /* \"#utility.yul\":4268:4270   */\n      0x20\n        /* \"#utility.yul\":4257:4266   */\n      dup3\n        /* \"#utility.yul\":4253:4271   */\n      add\n        /* \"#utility.yul\":4245:4271   */\n      swap1\n      pop\n        /* \"#utility.yul\":4281:4346   */\n      tag_484\n        /* \"#utility.yul\":4343:4344   */\n      0x00\n        /* \"#utility.yul\":4332:4341   */\n      dup4\n        /* \"#utility.yul\":4328:4345   */\n      add\n        /* \"#utility.yul\":4319:4325   */\n      dup5\n        /* \"#utility.yul\":4281:4346   */\n      tag_409\n      jump\t// in\n    tag_484:\n        /* \"#utility.yul\":4143:4353   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4359:4477   */\n    tag_410:\n        /* \"#utility.yul\":4446:4470   */\n      tag_486\n        /* \"#utility.yul\":4464:4469   */\n      dup2\n        /* \"#utility.yul\":4446:4470   */\n      tag_405\n      jump\t// in\n    tag_486:\n        /* \"#utility.yul\":4441:4444   */\n      dup3\n        /* \"#utility.yul\":4434:4471   */\n      mstore\n        /* \"#utility.yul\":4359:4477   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4483:4705   */\n    tag_59:\n        /* \"#utility.yul\":4576:4580   */\n      0x00\n        /* \"#utility.yul\":4614:4616   */\n      0x20\n        /* \"#utility.yul\":4603:4612   */\n      dup3\n        /* \"#utility.yul\":4599:4617   */\n      add\n        /* \"#utility.yul\":4591:4617   */\n      swap1\n      pop\n        /* \"#utility.yul\":4627:4698   */\n      tag_488\n        /* \"#utility.yul\":4695:4696   */\n      0x00\n        /* \"#utility.yul\":4684:4693   */\n      dup4\n        /* \"#utility.yul\":4680:4697   */\n      add\n        /* \"#utility.yul\":4671:4677   */\n      dup5\n        /* \"#utility.yul\":4627:4698   */\n      tag_410\n      jump\t// in\n    tag_488:\n        /* \"#utility.yul\":4483:4705   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4711:5330   */\n    tag_65:\n        /* \"#utility.yul\":4788:4794   */\n      0x00\n        /* \"#utility.yul\":4796:4802   */\n      dup1\n        /* \"#utility.yul\":4804:4810   */\n      0x00\n        /* \"#utility.yul\":4853:4855   */\n      0x60\n        /* \"#utility.yul\":4841:4850   */\n      dup5\n        /* \"#utility.yul\":4832:4839   */\n      dup7\n        /* \"#utility.yul\":4828:4851   */\n      sub\n        /* \"#utility.yul\":4824:4856   */\n      slt\n        /* \"#utility.yul\":4821:4940   */\n      iszero\n      tag_490\n      jumpi\n        /* \"#utility.yul\":4859:4938   */\n      tag_491\n      tag_400\n      jump\t// in\n    tag_491:\n        /* \"#utility.yul\":4821:4940   */\n    tag_490:\n        /* \"#utility.yul\":4979:4980   */\n      0x00\n        /* \"#utility.yul\":5004:5057   */\n      tag_492\n        /* \"#utility.yul\":5049:5056   */\n      dup7\n        /* \"#utility.yul\":5040:5046   */\n      dup3\n        /* \"#utility.yul\":5029:5038   */\n      dup8\n        /* \"#utility.yul\":5025:5047   */\n      add\n        /* \"#utility.yul\":5004:5057   */\n      tag_404\n      jump\t// in\n    tag_492:\n        /* \"#utility.yul\":4994:5057   */\n      swap4\n      pop\n        /* \"#utility.yul\":4950:5067   */\n      pop\n        /* \"#utility.yul\":5106:5108   */\n      0x20\n        /* \"#utility.yul\":5132:5185   */\n      tag_493\n        /* \"#utility.yul\":5177:5184   */\n      dup7\n        /* \"#utility.yul\":5168:5174   */\n      dup3\n        /* \"#utility.yul\":5157:5166   */\n      dup8\n        /* \"#utility.yul\":5153:5175   */\n      add\n        /* \"#utility.yul\":5132:5185   */\n      tag_404\n      jump\t// in\n    tag_493:\n        /* \"#utility.yul\":5122:5185   */\n      swap3\n      pop\n        /* \"#utility.yul\":5077:5195   */\n      pop\n        /* \"#utility.yul\":5234:5236   */\n      0x40\n        /* \"#utility.yul\":5260:5313   */\n      tag_494\n        /* \"#utility.yul\":5305:5312   */\n      dup7\n        /* \"#utility.yul\":5296:5302   */\n      dup3\n        /* \"#utility.yul\":5285:5294   */\n      dup8\n        /* \"#utility.yul\":5281:5303   */\n      add\n        /* \"#utility.yul\":5260:5313   */\n      tag_407\n      jump\t// in\n    tag_494:\n        /* \"#utility.yul\":5250:5313   */\n      swap2\n      pop\n        /* \"#utility.yul\":5205:5323   */\n      pop\n        /* \"#utility.yul\":4711:5330   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":5336:5422   */\n    tag_411:\n        /* \"#utility.yul\":5371:5378   */\n      0x00\n        /* \"#utility.yul\":5411:5415   */\n      0xff\n        /* \"#utility.yul\":5404:5409   */\n      dup3\n        /* \"#utility.yul\":5400:5416   */\n      and\n        /* \"#utility.yul\":5389:5416   */\n      swap1\n      pop\n        /* \"#utility.yul\":5336:5422   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5428:5540   */\n    tag_412:\n        /* \"#utility.yul\":5511:5533   */\n      tag_497\n        /* \"#utility.yul\":5527:5532   */\n      dup2\n        /* \"#utility.yul\":5511:5533   */\n      tag_411\n      jump\t// in\n    tag_497:\n        /* \"#utility.yul\":5506:5509   */\n      dup3\n        /* \"#utility.yul\":5499:5534   */\n      mstore\n        /* \"#utility.yul\":5428:5540   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5546:5760   */\n    tag_71:\n        /* \"#utility.yul\":5635:5639   */\n      0x00\n        /* \"#utility.yul\":5673:5675   */\n      0x20\n        /* \"#utility.yul\":5662:5671   */\n      dup3\n        /* \"#utility.yul\":5658:5676   */\n      add\n        /* \"#utility.yul\":5650:5676   */\n      swap1\n      pop\n        /* \"#utility.yul\":5686:5753   */\n      tag_499\n        /* \"#utility.yul\":5750:5751   */\n      0x00\n        /* \"#utility.yul\":5739:5748   */\n      dup4\n        /* \"#utility.yul\":5735:5752   */\n      add\n        /* \"#utility.yul\":5726:5732   */\n      dup5\n        /* \"#utility.yul\":5686:5753   */\n      tag_412\n      jump\t// in\n    tag_499:\n        /* \"#utility.yul\":5546:5760   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5766:5870   */\n    tag_413:\n        /* \"#utility.yul\":5811:5818   */\n      0x00\n        /* \"#utility.yul\":5840:5864   */\n      tag_501\n        /* \"#utility.yul\":5858:5863   */\n      dup3\n        /* \"#utility.yul\":5840:5864   */\n      tag_388\n      jump\t// in\n    tag_501:\n        /* \"#utility.yul\":5829:5864   */\n      swap1\n      pop\n        /* \"#utility.yul\":5766:5870   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5876:6018   */\n    tag_414:\n        /* \"#utility.yul\":5979:6011   */\n      tag_503\n        /* \"#utility.yul\":6005:6010   */\n      dup2\n        /* \"#utility.yul\":5979:6011   */\n      tag_413\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":5974:5977   */\n      dup3\n        /* \"#utility.yul\":5967:6012   */\n      mstore\n        /* \"#utility.yul\":5876:6018   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6024:6278   */\n    tag_80:\n        /* \"#utility.yul\":6133:6137   */\n      0x00\n        /* \"#utility.yul\":6171:6173   */\n      0x20\n        /* \"#utility.yul\":6160:6169   */\n      dup3\n        /* \"#utility.yul\":6156:6174   */\n      add\n        /* \"#utility.yul\":6148:6174   */\n      swap1\n      pop\n        /* \"#utility.yul\":6184:6271   */\n      tag_505\n        /* \"#utility.yul\":6268:6269   */\n      0x00\n        /* \"#utility.yul\":6257:6266   */\n      dup4\n        /* \"#utility.yul\":6253:6270   */\n      add\n        /* \"#utility.yul\":6244:6250   */\n      dup5\n        /* \"#utility.yul\":6184:6271   */\n      tag_414\n      jump\t// in\n    tag_505:\n        /* \"#utility.yul\":6024:6278   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6284:6613   */\n    tag_83:\n        /* \"#utility.yul\":6343:6349   */\n      0x00\n        /* \"#utility.yul\":6392:6394   */\n      0x20\n        /* \"#utility.yul\":6380:6389   */\n      dup3\n        /* \"#utility.yul\":6371:6378   */\n      dup5\n        /* \"#utility.yul\":6367:6390   */\n      sub\n        /* \"#utility.yul\":6363:6395   */\n      slt\n        /* \"#utility.yul\":6360:6479   */\n      iszero\n      tag_507\n      jumpi\n        /* \"#utility.yul\":6398:6477   */\n      tag_508\n      tag_400\n      jump\t// in\n    tag_508:\n        /* \"#utility.yul\":6360:6479   */\n    tag_507:\n        /* \"#utility.yul\":6518:6519   */\n      0x00\n        /* \"#utility.yul\":6543:6596   */\n      tag_509\n        /* \"#utility.yul\":6588:6595   */\n      dup5\n        /* \"#utility.yul\":6579:6585   */\n      dup3\n        /* \"#utility.yul\":6568:6577   */\n      dup6\n        /* \"#utility.yul\":6564:6586   */\n      add\n        /* \"#utility.yul\":6543:6596   */\n      tag_407\n      jump\t// in\n    tag_509:\n        /* \"#utility.yul\":6533:6596   */\n      swap2\n      pop\n        /* \"#utility.yul\":6489:6606   */\n      pop\n        /* \"#utility.yul\":6284:6613   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6619:6948   */\n    tag_91:\n        /* \"#utility.yul\":6678:6684   */\n      0x00\n        /* \"#utility.yul\":6727:6729   */\n      0x20\n        /* \"#utility.yul\":6715:6724   */\n      dup3\n        /* \"#utility.yul\":6706:6713   */\n      dup5\n        /* \"#utility.yul\":6702:6725   */\n      sub\n        /* \"#utility.yul\":6698:6730   */\n      slt\n        /* \"#utility.yul\":6695:6814   */\n      iszero\n      tag_511\n      jumpi\n        /* \"#utility.yul\":6733:6812   */\n      tag_512\n      tag_400\n      jump\t// in\n    tag_512:\n        /* \"#utility.yul\":6695:6814   */\n    tag_511:\n        /* \"#utility.yul\":6853:6854   */\n      0x00\n        /* \"#utility.yul\":6878:6931   */\n      tag_513\n        /* \"#utility.yul\":6923:6930   */\n      dup5\n        /* \"#utility.yul\":6914:6920   */\n      dup3\n        /* \"#utility.yul\":6903:6912   */\n      dup6\n        /* \"#utility.yul\":6899:6921   */\n      add\n        /* \"#utility.yul\":6878:6931   */\n      tag_404\n      jump\t// in\n    tag_513:\n        /* \"#utility.yul\":6868:6931   */\n      swap2\n      pop\n        /* \"#utility.yul\":6824:6941   */\n      pop\n        /* \"#utility.yul\":6619:6948   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6954:7072   */\n    tag_415:\n        /* \"#utility.yul\":7041:7065   */\n      tag_515\n        /* \"#utility.yul\":7059:7064   */\n      dup2\n        /* \"#utility.yul\":7041:7065   */\n      tag_402\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":7036:7039   */\n      dup3\n        /* \"#utility.yul\":7029:7066   */\n      mstore\n        /* \"#utility.yul\":6954:7072   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7078:7300   */\n    tag_108:\n        /* \"#utility.yul\":7171:7175   */\n      0x00\n        /* \"#utility.yul\":7209:7211   */\n      0x20\n        /* \"#utility.yul\":7198:7207   */\n      dup3\n        /* \"#utility.yul\":7194:7212   */\n      add\n        /* \"#utility.yul\":7186:7212   */\n      swap1\n      pop\n        /* \"#utility.yul\":7222:7293   */\n      tag_517\n        /* \"#utility.yul\":7290:7291   */\n      0x00\n        /* \"#utility.yul\":7279:7288   */\n      dup4\n        /* \"#utility.yul\":7275:7292   */\n      add\n        /* \"#utility.yul\":7266:7272   */\n      dup5\n        /* \"#utility.yul\":7222:7293   */\n      tag_415\n      jump\t// in\n    tag_517:\n        /* \"#utility.yul\":7078:7300   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7306:7395   */\n    tag_416:\n        /* \"#utility.yul\":7342:7349   */\n      0x00\n        /* \"#utility.yul\":7382:7388   */\n      0xffff\n        /* \"#utility.yul\":7375:7380   */\n      dup3\n        /* \"#utility.yul\":7371:7389   */\n      and\n        /* \"#utility.yul\":7360:7389   */\n      swap1\n      pop\n        /* \"#utility.yul\":7306:7395   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7401:7521   */\n    tag_417:\n        /* \"#utility.yul\":7473:7496   */\n      tag_520\n        /* \"#utility.yul\":7490:7495   */\n      dup2\n        /* \"#utility.yul\":7473:7496   */\n      tag_416\n      jump\t// in\n    tag_520:\n        /* \"#utility.yul\":7466:7471   */\n      dup2\n        /* \"#utility.yul\":7463:7497   */\n      eq\n        /* \"#utility.yul\":7453:7515   */\n      tag_521\n      jumpi\n        /* \"#utility.yul\":7511:7512   */\n      0x00\n        /* \"#utility.yul\":7508:7509   */\n      dup1\n        /* \"#utility.yul\":7501:7513   */\n      revert\n        /* \"#utility.yul\":7453:7515   */\n    tag_521:\n        /* \"#utility.yul\":7401:7521   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7527:7664   */\n    tag_418:\n        /* \"#utility.yul\":7572:7577   */\n      0x00\n        /* \"#utility.yul\":7610:7616   */\n      dup2\n        /* \"#utility.yul\":7597:7617   */\n      calldataload\n        /* \"#utility.yul\":7588:7617   */\n      swap1\n      pop\n        /* \"#utility.yul\":7626:7658   */\n      tag_523\n        /* \"#utility.yul\":7652:7657   */\n      dup2\n        /* \"#utility.yul\":7626:7658   */\n      tag_417\n      jump\t// in\n    tag_523:\n        /* \"#utility.yul\":7527:7664   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7670:7997   */\n    tag_128:\n        /* \"#utility.yul\":7728:7734   */\n      0x00\n        /* \"#utility.yul\":7777:7779   */\n      0x20\n        /* \"#utility.yul\":7765:7774   */\n      dup3\n        /* \"#utility.yul\":7756:7763   */\n      dup5\n        /* \"#utility.yul\":7752:7775   */\n      sub\n        /* \"#utility.yul\":7748:7780   */\n      slt\n        /* \"#utility.yul\":7745:7864   */\n      iszero\n      tag_525\n      jumpi\n        /* \"#utility.yul\":7783:7862   */\n      tag_526\n      tag_400\n      jump\t// in\n    tag_526:\n        /* \"#utility.yul\":7745:7864   */\n    tag_525:\n        /* \"#utility.yul\":7903:7904   */\n      0x00\n        /* \"#utility.yul\":7928:7980   */\n      tag_527\n        /* \"#utility.yul\":7972:7979   */\n      dup5\n        /* \"#utility.yul\":7963:7969   */\n      dup3\n        /* \"#utility.yul\":7952:7961   */\n      dup6\n        /* \"#utility.yul\":7948:7970   */\n      add\n        /* \"#utility.yul\":7928:7980   */\n      tag_418\n      jump\t// in\n    tag_527:\n        /* \"#utility.yul\":7918:7980   */\n      swap2\n      pop\n        /* \"#utility.yul\":7874:7990   */\n      pop\n        /* \"#utility.yul\":7670:7997   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8003:8477   */\n    tag_135:\n        /* \"#utility.yul\":8071:8077   */\n      0x00\n        /* \"#utility.yul\":8079:8085   */\n      dup1\n        /* \"#utility.yul\":8128:8130   */\n      0x40\n        /* \"#utility.yul\":8116:8125   */\n      dup4\n        /* \"#utility.yul\":8107:8114   */\n      dup6\n        /* \"#utility.yul\":8103:8126   */\n      sub\n        /* \"#utility.yul\":8099:8131   */\n      slt\n        /* \"#utility.yul\":8096:8215   */\n      iszero\n      tag_529\n      jumpi\n        /* \"#utility.yul\":8134:8213   */\n      tag_530\n      tag_400\n      jump\t// in\n    tag_530:\n        /* \"#utility.yul\":8096:8215   */\n    tag_529:\n        /* \"#utility.yul\":8254:8255   */\n      0x00\n        /* \"#utility.yul\":8279:8332   */\n      tag_531\n        /* \"#utility.yul\":8324:8331   */\n      dup6\n        /* \"#utility.yul\":8315:8321   */\n      dup3\n        /* \"#utility.yul\":8304:8313   */\n      dup7\n        /* \"#utility.yul\":8300:8322   */\n      add\n        /* \"#utility.yul\":8279:8332   */\n      tag_404\n      jump\t// in\n    tag_531:\n        /* \"#utility.yul\":8269:8332   */\n      swap3\n      pop\n        /* \"#utility.yul\":8225:8342   */\n      pop\n        /* \"#utility.yul\":8381:8383   */\n      0x20\n        /* \"#utility.yul\":8407:8460   */\n      tag_532\n        /* \"#utility.yul\":8452:8459   */\n      dup6\n        /* \"#utility.yul\":8443:8449   */\n      dup3\n        /* \"#utility.yul\":8432:8441   */\n      dup7\n        /* \"#utility.yul\":8428:8450   */\n      add\n        /* \"#utility.yul\":8407:8460   */\n      tag_404\n      jump\t// in\n    tag_532:\n        /* \"#utility.yul\":8397:8460   */\n      swap2\n      pop\n        /* \"#utility.yul\":8352:8470   */\n      pop\n        /* \"#utility.yul\":8003:8477   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8483:8663   */\n    tag_419:\n        /* \"#utility.yul\":8531:8608   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8528:8529   */\n      0x00\n        /* \"#utility.yul\":8521:8609   */\n      mstore\n        /* \"#utility.yul\":8628:8632   */\n      0x22\n        /* \"#utility.yul\":8625:8626   */\n      0x04\n        /* \"#utility.yul\":8618:8633   */\n      mstore\n        /* \"#utility.yul\":8652:8656   */\n      0x24\n        /* \"#utility.yul\":8649:8650   */\n      0x00\n        /* \"#utility.yul\":8642:8657   */\n      revert\n        /* \"#utility.yul\":8669:8989   */\n    tag_149:\n        /* \"#utility.yul\":8713:8719   */\n      0x00\n        /* \"#utility.yul\":8750:8751   */\n      0x02\n        /* \"#utility.yul\":8744:8748   */\n      dup3\n        /* \"#utility.yul\":8740:8752   */\n      div\n        /* \"#utility.yul\":8730:8752   */\n      swap1\n      pop\n        /* \"#utility.yul\":8797:8798   */\n      0x01\n        /* \"#utility.yul\":8791:8795   */\n      dup3\n        /* \"#utility.yul\":8787:8799   */\n      and\n        /* \"#utility.yul\":8818:8836   */\n      dup1\n        /* \"#utility.yul\":8808:8889   */\n      tag_535\n      jumpi\n        /* \"#utility.yul\":8874:8878   */\n      0x7f\n        /* \"#utility.yul\":8866:8872   */\n      dup3\n        /* \"#utility.yul\":8862:8879   */\n      and\n        /* \"#utility.yul\":8852:8879   */\n      swap2\n      pop\n        /* \"#utility.yul\":8808:8889   */\n    tag_535:\n        /* \"#utility.yul\":8936:8938   */\n      0x20\n        /* \"#utility.yul\":8928:8934   */\n      dup3\n        /* \"#utility.yul\":8925:8939   */\n      lt\n        /* \"#utility.yul\":8905:8923   */\n      dup2\n        /* \"#utility.yul\":8902:8940   */\n      sub\n        /* \"#utility.yul\":8899:8983   */\n      tag_536\n      jumpi\n        /* \"#utility.yul\":8955:8973   */\n      tag_537\n      tag_419\n      jump\t// in\n    tag_537:\n        /* \"#utility.yul\":8899:8983   */\n    tag_536:\n        /* \"#utility.yul\":8720:8989   */\n      pop\n        /* \"#utility.yul\":8669:8989   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8995:9138   */\n    tag_420:\n        /* \"#utility.yul\":9052:9057   */\n      0x00\n        /* \"#utility.yul\":9083:9089   */\n      dup2\n        /* \"#utility.yul\":9077:9090   */\n      mload\n        /* \"#utility.yul\":9068:9090   */\n      swap1\n      pop\n        /* \"#utility.yul\":9099:9132   */\n      tag_539\n        /* \"#utility.yul\":9126:9131   */\n      dup2\n        /* \"#utility.yul\":9099:9132   */\n      tag_406\n      jump\t// in\n    tag_539:\n        /* \"#utility.yul\":8995:9138   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9144:9495   */\n    tag_167:\n        /* \"#utility.yul\":9214:9220   */\n      0x00\n        /* \"#utility.yul\":9263:9265   */\n      0x20\n        /* \"#utility.yul\":9251:9260   */\n      dup3\n        /* \"#utility.yul\":9242:9249   */\n      dup5\n        /* \"#utility.yul\":9238:9261   */\n      sub\n        /* \"#utility.yul\":9234:9266   */\n      slt\n        /* \"#utility.yul\":9231:9350   */\n      iszero\n      tag_541\n      jumpi\n        /* \"#utility.yul\":9269:9348   */\n      tag_542\n      tag_400\n      jump\t// in\n    tag_542:\n        /* \"#utility.yul\":9231:9350   */\n    tag_541:\n        /* \"#utility.yul\":9389:9390   */\n      0x00\n        /* \"#utility.yul\":9414:9478   */\n      tag_543\n        /* \"#utility.yul\":9470:9477   */\n      dup5\n        /* \"#utility.yul\":9461:9467   */\n      dup3\n        /* \"#utility.yul\":9450:9459   */\n      dup6\n        /* \"#utility.yul\":9446:9468   */\n      add\n        /* \"#utility.yul\":9414:9478   */\n      tag_420\n      jump\t// in\n    tag_543:\n        /* \"#utility.yul\":9404:9478   */\n      swap2\n      pop\n        /* \"#utility.yul\":9360:9488   */\n      pop\n        /* \"#utility.yul\":9144:9495   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9501:9681   */\n    tag_421:\n        /* \"#utility.yul\":9549:9626   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9546:9547   */\n      0x00\n        /* \"#utility.yul\":9539:9627   */\n      mstore\n        /* \"#utility.yul\":9646:9650   */\n      0x12\n        /* \"#utility.yul\":9643:9644   */\n      0x04\n        /* \"#utility.yul\":9636:9651   */\n      mstore\n        /* \"#utility.yul\":9670:9674   */\n      0x24\n        /* \"#utility.yul\":9667:9668   */\n      0x00\n        /* \"#utility.yul\":9660:9675   */\n      revert\n        /* \"#utility.yul\":9687:9867   */\n    tag_422:\n        /* \"#utility.yul\":9735:9812   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9732:9733   */\n      0x00\n        /* \"#utility.yul\":9725:9813   */\n      mstore\n        /* \"#utility.yul\":9832:9836   */\n      0x11\n        /* \"#utility.yul\":9829:9830   */\n      0x04\n        /* \"#utility.yul\":9822:9837   */\n      mstore\n        /* \"#utility.yul\":9856:9860   */\n      0x24\n        /* \"#utility.yul\":9853:9854   */\n      0x00\n        /* \"#utility.yul\":9846:9861   */\n      revert\n        /* \"#utility.yul\":9873:10058   */\n    tag_188:\n        /* \"#utility.yul\":9913:9914   */\n      0x00\n        /* \"#utility.yul\":9930:9950   */\n      tag_547\n        /* \"#utility.yul\":9948:9949   */\n      dup3\n        /* \"#utility.yul\":9930:9950   */\n      tag_405\n      jump\t// in\n    tag_547:\n        /* \"#utility.yul\":9925:9950   */\n      swap2\n      pop\n        /* \"#utility.yul\":9964:9984   */\n      tag_548\n        /* \"#utility.yul\":9982:9983   */\n      dup4\n        /* \"#utility.yul\":9964:9984   */\n      tag_405\n      jump\t// in\n    tag_548:\n        /* \"#utility.yul\":9959:9984   */\n      swap3\n      pop\n        /* \"#utility.yul\":10003:10004   */\n      dup3\n        /* \"#utility.yul\":9993:10028   */\n      tag_549\n      jumpi\n        /* \"#utility.yul\":10008:10026   */\n      tag_550\n      tag_421\n      jump\t// in\n    tag_550:\n        /* \"#utility.yul\":9993:10028   */\n    tag_549:\n        /* \"#utility.yul\":10050:10051   */\n      dup3\n        /* \"#utility.yul\":10047:10048   */\n      dup3\n        /* \"#utility.yul\":10043:10052   */\n      div\n        /* \"#utility.yul\":10038:10052   */\n      swap1\n      pop\n        /* \"#utility.yul\":9873:10058   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10064:10258   */\n    tag_190:\n        /* \"#utility.yul\":10104:10108   */\n      0x00\n        /* \"#utility.yul\":10124:10144   */\n      tag_552\n        /* \"#utility.yul\":10142:10143   */\n      dup3\n        /* \"#utility.yul\":10124:10144   */\n      tag_405\n      jump\t// in\n    tag_552:\n        /* \"#utility.yul\":10119:10144   */\n      swap2\n      pop\n        /* \"#utility.yul\":10158:10178   */\n      tag_553\n        /* \"#utility.yul\":10176:10177   */\n      dup4\n        /* \"#utility.yul\":10158:10178   */\n      tag_405\n      jump\t// in\n    tag_553:\n        /* \"#utility.yul\":10153:10178   */\n      swap3\n      pop\n        /* \"#utility.yul\":10202:10203   */\n      dup3\n        /* \"#utility.yul\":10199:10200   */\n      dup3\n        /* \"#utility.yul\":10195:10204   */\n      sub\n        /* \"#utility.yul\":10187:10204   */\n      swap1\n      pop\n        /* \"#utility.yul\":10226:10227   */\n      dup2\n        /* \"#utility.yul\":10220:10224   */\n      dup2\n        /* \"#utility.yul\":10217:10228   */\n      gt\n        /* \"#utility.yul\":10214:10251   */\n      iszero\n      tag_554\n      jumpi\n        /* \"#utility.yul\":10231:10249   */\n      tag_555\n      tag_422\n      jump\t// in\n    tag_555:\n        /* \"#utility.yul\":10214:10251   */\n    tag_554:\n        /* \"#utility.yul\":10064:10258   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10264:10455   */\n    tag_192:\n        /* \"#utility.yul\":10304:10307   */\n      0x00\n        /* \"#utility.yul\":10323:10343   */\n      tag_557\n        /* \"#utility.yul\":10341:10342   */\n      dup3\n        /* \"#utility.yul\":10323:10343   */\n      tag_405\n      jump\t// in\n    tag_557:\n        /* \"#utility.yul\":10318:10343   */\n      swap2\n      pop\n        /* \"#utility.yul\":10357:10377   */\n      tag_558\n        /* \"#utility.yul\":10375:10376   */\n      dup4\n        /* \"#utility.yul\":10357:10377   */\n      tag_405\n      jump\t// in\n    tag_558:\n        /* \"#utility.yul\":10352:10377   */\n      swap3\n      pop\n        /* \"#utility.yul\":10400:10401   */\n      dup3\n        /* \"#utility.yul\":10397:10398   */\n      dup3\n        /* \"#utility.yul\":10393:10402   */\n      add\n        /* \"#utility.yul\":10386:10402   */\n      swap1\n      pop\n        /* \"#utility.yul\":10421:10424   */\n      dup1\n        /* \"#utility.yul\":10418:10419   */\n      dup3\n        /* \"#utility.yul\":10415:10425   */\n      gt\n        /* \"#utility.yul\":10412:10448   */\n      iszero\n      tag_559\n      jumpi\n        /* \"#utility.yul\":10428:10446   */\n      tag_560\n      tag_422\n      jump\t// in\n    tag_560:\n        /* \"#utility.yul\":10412:10448   */\n    tag_559:\n        /* \"#utility.yul\":10264:10455   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10461:10871   */\n    tag_197:\n        /* \"#utility.yul\":10501:10508   */\n      0x00\n        /* \"#utility.yul\":10524:10544   */\n      tag_562\n        /* \"#utility.yul\":10542:10543   */\n      dup3\n        /* \"#utility.yul\":10524:10544   */\n      tag_405\n      jump\t// in\n    tag_562:\n        /* \"#utility.yul\":10519:10544   */\n      swap2\n      pop\n        /* \"#utility.yul\":10558:10578   */\n      tag_563\n        /* \"#utility.yul\":10576:10577   */\n      dup4\n        /* \"#utility.yul\":10558:10578   */\n      tag_405\n      jump\t// in\n    tag_563:\n        /* \"#utility.yul\":10553:10578   */\n      swap3\n      pop\n        /* \"#utility.yul\":10613:10614   */\n      dup3\n        /* \"#utility.yul\":10610:10611   */\n      dup3\n        /* \"#utility.yul\":10606:10615   */\n      mul\n        /* \"#utility.yul\":10635:10665   */\n      tag_564\n        /* \"#utility.yul\":10653:10664   */\n      dup2\n        /* \"#utility.yul\":10635:10665   */\n      tag_405\n      jump\t// in\n    tag_564:\n        /* \"#utility.yul\":10624:10665   */\n      swap2\n      pop\n        /* \"#utility.yul\":10814:10815   */\n      dup3\n        /* \"#utility.yul\":10805:10812   */\n      dup3\n        /* \"#utility.yul\":10801:10816   */\n      div\n        /* \"#utility.yul\":10798:10799   */\n      dup5\n        /* \"#utility.yul\":10795:10817   */\n      eq\n        /* \"#utility.yul\":10775:10776   */\n      dup4\n        /* \"#utility.yul\":10768:10777   */\n      iszero\n        /* \"#utility.yul\":10748:10831   */\n      or\n        /* \"#utility.yul\":10725:10864   */\n      tag_565\n      jumpi\n        /* \"#utility.yul\":10844:10862   */\n      tag_566\n      tag_422\n      jump\t// in\n    tag_566:\n        /* \"#utility.yul\":10725:10864   */\n    tag_565:\n        /* \"#utility.yul\":10509:10871   */\n      pop\n        /* \"#utility.yul\":10461:10871   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10877:11017   */\n    tag_423:\n        /* \"#utility.yul\":10926:10935   */\n      0x00\n        /* \"#utility.yul\":10959:11011   */\n      tag_568\n        /* \"#utility.yul\":10977:11010   */\n      tag_569\n        /* \"#utility.yul\":10986:11009   */\n      tag_570\n        /* \"#utility.yul\":11003:11008   */\n      dup5\n        /* \"#utility.yul\":10986:11009   */\n      tag_416\n      jump\t// in\n    tag_570:\n        /* \"#utility.yul\":10977:11010   */\n      tag_389\n      jump\t// in\n    tag_569:\n        /* \"#utility.yul\":10959:11011   */\n      tag_405\n      jump\t// in\n    tag_568:\n        /* \"#utility.yul\":10946:11011   */\n      swap1\n      pop\n        /* \"#utility.yul\":10877:11017   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11023:11152   */\n    tag_424:\n        /* \"#utility.yul\":11109:11145   */\n      tag_572\n        /* \"#utility.yul\":11139:11144   */\n      dup2\n        /* \"#utility.yul\":11109:11145   */\n      tag_423\n      jump\t// in\n    tag_572:\n        /* \"#utility.yul\":11104:11107   */\n      dup3\n        /* \"#utility.yul\":11097:11146   */\n      mstore\n        /* \"#utility.yul\":11023:11152   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11158:11378   */\n    tag_260:\n        /* \"#utility.yul\":11250:11254   */\n      0x00\n        /* \"#utility.yul\":11288:11290   */\n      0x20\n        /* \"#utility.yul\":11277:11286   */\n      dup3\n        /* \"#utility.yul\":11273:11291   */\n      add\n        /* \"#utility.yul\":11265:11291   */\n      swap1\n      pop\n        /* \"#utility.yul\":11301:11371   */\n      tag_574\n        /* \"#utility.yul\":11368:11369   */\n      0x00\n        /* \"#utility.yul\":11357:11366   */\n      dup4\n        /* \"#utility.yul\":11353:11370   */\n      add\n        /* \"#utility.yul\":11344:11350   */\n      dup5\n        /* \"#utility.yul\":11301:11371   */\n      tag_424\n      jump\t// in\n    tag_574:\n        /* \"#utility.yul\":11158:11378   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11384:11826   */\n    tag_304:\n        /* \"#utility.yul\":11533:11537   */\n      0x00\n        /* \"#utility.yul\":11571:11573   */\n      0x60\n        /* \"#utility.yul\":11560:11569   */\n      dup3\n        /* \"#utility.yul\":11556:11574   */\n      add\n        /* \"#utility.yul\":11548:11574   */\n      swap1\n      pop\n        /* \"#utility.yul\":11584:11655   */\n      tag_576\n        /* \"#utility.yul\":11652:11653   */\n      0x00\n        /* \"#utility.yul\":11641:11650   */\n      dup4\n        /* \"#utility.yul\":11637:11654   */\n      add\n        /* \"#utility.yul\":11628:11634   */\n      dup7\n        /* \"#utility.yul\":11584:11655   */\n      tag_415\n      jump\t// in\n    tag_576:\n        /* \"#utility.yul\":11665:11737   */\n      tag_577\n        /* \"#utility.yul\":11733:11735   */\n      0x20\n        /* \"#utility.yul\":11722:11731   */\n      dup4\n        /* \"#utility.yul\":11718:11736   */\n      add\n        /* \"#utility.yul\":11709:11715   */\n      dup6\n        /* \"#utility.yul\":11665:11737   */\n      tag_410\n      jump\t// in\n    tag_577:\n        /* \"#utility.yul\":11747:11819   */\n      tag_578\n        /* \"#utility.yul\":11815:11817   */\n      0x40\n        /* \"#utility.yul\":11804:11813   */\n      dup4\n        /* \"#utility.yul\":11800:11818   */\n      add\n        /* \"#utility.yul\":11791:11797   */\n      dup5\n        /* \"#utility.yul\":11747:11819   */\n      tag_410\n      jump\t// in\n    tag_578:\n        /* \"#utility.yul\":11384:11826   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11832:12274   */\n    tag_322:\n        /* \"#utility.yul\":11981:11985   */\n      0x00\n        /* \"#utility.yul\":12019:12021   */\n      0x60\n        /* \"#utility.yul\":12008:12017   */\n      dup3\n        /* \"#utility.yul\":12004:12022   */\n      add\n        /* \"#utility.yul\":11996:12022   */\n      swap1\n      pop\n        /* \"#utility.yul\":12032:12103   */\n      tag_580\n        /* \"#utility.yul\":12100:12101   */\n      0x00\n        /* \"#utility.yul\":12089:12098   */\n      dup4\n        /* \"#utility.yul\":12085:12102   */\n      add\n        /* \"#utility.yul\":12076:12082   */\n      dup7\n        /* \"#utility.yul\":12032:12103   */\n      tag_415\n      jump\t// in\n    tag_580:\n        /* \"#utility.yul\":12113:12185   */\n      tag_581\n        /* \"#utility.yul\":12181:12183   */\n      0x20\n        /* \"#utility.yul\":12170:12179   */\n      dup4\n        /* \"#utility.yul\":12166:12184   */\n      add\n        /* \"#utility.yul\":12157:12163   */\n      dup6\n        /* \"#utility.yul\":12113:12185   */\n      tag_415\n      jump\t// in\n    tag_581:\n        /* \"#utility.yul\":12195:12267   */\n      tag_582\n        /* \"#utility.yul\":12263:12265   */\n      0x40\n        /* \"#utility.yul\":12252:12261   */\n      dup4\n        /* \"#utility.yul\":12248:12266   */\n      add\n        /* \"#utility.yul\":12239:12245   */\n      dup5\n        /* \"#utility.yul\":12195:12267   */\n      tag_410\n      jump\t// in\n    tag_582:\n        /* \"#utility.yul\":11832:12274   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12280:12396   */\n    tag_425:\n        /* \"#utility.yul\":12350:12371   */\n      tag_584\n        /* \"#utility.yul\":12365:12370   */\n      dup2\n        /* \"#utility.yul\":12350:12371   */\n      tag_408\n      jump\t// in\n    tag_584:\n        /* \"#utility.yul\":12343:12348   */\n      dup2\n        /* \"#utility.yul\":12340:12372   */\n      eq\n        /* \"#utility.yul\":12330:12390   */\n      tag_585\n      jumpi\n        /* \"#utility.yul\":12386:12387   */\n      0x00\n        /* \"#utility.yul\":12383:12384   */\n      dup1\n        /* \"#utility.yul\":12376:12388   */\n      revert\n        /* \"#utility.yul\":12330:12390   */\n    tag_585:\n        /* \"#utility.yul\":12280:12396   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12402:12539   */\n    tag_426:\n        /* \"#utility.yul\":12456:12461   */\n      0x00\n        /* \"#utility.yul\":12487:12493   */\n      dup2\n        /* \"#utility.yul\":12481:12494   */\n      mload\n        /* \"#utility.yul\":12472:12494   */\n      swap1\n      pop\n        /* \"#utility.yul\":12503:12533   */\n      tag_587\n        /* \"#utility.yul\":12527:12532   */\n      dup2\n        /* \"#utility.yul\":12503:12533   */\n      tag_425\n      jump\t// in\n    tag_587:\n        /* \"#utility.yul\":12402:12539   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12545:12890   */\n    tag_361:\n        /* \"#utility.yul\":12612:12618   */\n      0x00\n        /* \"#utility.yul\":12661:12663   */\n      0x20\n        /* \"#utility.yul\":12649:12658   */\n      dup3\n        /* \"#utility.yul\":12640:12647   */\n      dup5\n        /* \"#utility.yul\":12636:12659   */\n      sub\n        /* \"#utility.yul\":12632:12664   */\n      slt\n        /* \"#utility.yul\":12629:12748   */\n      iszero\n      tag_589\n      jumpi\n        /* \"#utility.yul\":12667:12746   */\n      tag_590\n      tag_400\n      jump\t// in\n    tag_590:\n        /* \"#utility.yul\":12629:12748   */\n    tag_589:\n        /* \"#utility.yul\":12787:12788   */\n      0x00\n        /* \"#utility.yul\":12812:12873   */\n      tag_591\n        /* \"#utility.yul\":12865:12872   */\n      dup5\n        /* \"#utility.yul\":12856:12862   */\n      dup3\n        /* \"#utility.yul\":12845:12854   */\n      dup6\n        /* \"#utility.yul\":12841:12863   */\n      add\n        /* \"#utility.yul\":12812:12873   */\n      tag_426\n      jump\t// in\n    tag_591:\n        /* \"#utility.yul\":12802:12873   */\n      swap2\n      pop\n        /* \"#utility.yul\":12758:12883   */\n      pop\n        /* \"#utility.yul\":12545:12890   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12896:12994   */\n    tag_427:\n        /* \"#utility.yul\":12947:12953   */\n      0x00\n        /* \"#utility.yul\":12981:12986   */\n      dup2\n        /* \"#utility.yul\":12975:12987   */\n      mload\n        /* \"#utility.yul\":12965:12987   */\n      swap1\n      pop\n        /* \"#utility.yul\":12896:12994   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13000:13147   */\n    tag_428:\n        /* \"#utility.yul\":13101:13112   */\n      0x00\n        /* \"#utility.yul\":13138:13141   */\n      dup2\n        /* \"#utility.yul\":13123:13141   */\n      swap1\n      pop\n        /* \"#utility.yul\":13000:13147   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13153:13539   */\n    tag_429:\n        /* \"#utility.yul\":13257:13260   */\n      0x00\n        /* \"#utility.yul\":13285:13323   */\n      tag_595\n        /* \"#utility.yul\":13317:13322   */\n      dup3\n        /* \"#utility.yul\":13285:13323   */\n      tag_427\n      jump\t// in\n    tag_595:\n        /* \"#utility.yul\":13339:13427   */\n      tag_596\n        /* \"#utility.yul\":13420:13426   */\n      dup2\n        /* \"#utility.yul\":13415:13418   */\n      dup6\n        /* \"#utility.yul\":13339:13427   */\n      tag_428\n      jump\t// in\n    tag_596:\n        /* \"#utility.yul\":13332:13427   */\n      swap4\n      pop\n        /* \"#utility.yul\":13436:13501   */\n      tag_597\n        /* \"#utility.yul\":13494:13500   */\n      dup2\n        /* \"#utility.yul\":13489:13492   */\n      dup6\n        /* \"#utility.yul\":13482:13486   */\n      0x20\n        /* \"#utility.yul\":13475:13480   */\n      dup7\n        /* \"#utility.yul\":13471:13487   */\n      add\n        /* \"#utility.yul\":13436:13501   */\n      tag_396\n      jump\t// in\n    tag_597:\n        /* \"#utility.yul\":13526:13532   */\n      dup1\n        /* \"#utility.yul\":13521:13524   */\n      dup5\n        /* \"#utility.yul\":13517:13533   */\n      add\n        /* \"#utility.yul\":13510:13533   */\n      swap2\n      pop\n        /* \"#utility.yul\":13261:13539   */\n      pop\n        /* \"#utility.yul\":13153:13539   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13545:13816   */\n    tag_371:\n        /* \"#utility.yul\":13675:13678   */\n      0x00\n        /* \"#utility.yul\":13697:13790   */\n      tag_599\n        /* \"#utility.yul\":13786:13789   */\n      dup3\n        /* \"#utility.yul\":13777:13783   */\n      dup5\n        /* \"#utility.yul\":13697:13790   */\n      tag_429\n      jump\t// in\n    tag_599:\n        /* \"#utility.yul\":13690:13790   */\n      swap2\n      pop\n        /* \"#utility.yul\":13807:13810   */\n      dup2\n        /* \"#utility.yul\":13800:13810   */\n      swap1\n      pop\n        /* \"#utility.yul\":13545:13816   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122021f293dd8c949a1e75cea771275a9fdf34eb94db78f4c7618c2a6e239766a10164736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1572": {
									"entryPoint": null,
									"id": 1572,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_1762": {
									"entryPoint": null,
									"id": 1762,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_336": {
									"entryPoint": null,
									"id": 336,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 779,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 1053,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address_fromMemory": {
									"entryPoint": 1075,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 1984,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 2001,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 1296,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 1144,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 1605,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 1009,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 978,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1426,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 1567,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 1444,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1756,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 1314,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1244,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 1727,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 1435,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 1697,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x22": {
									"entryPoint": 1199,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1154,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 1483,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 974,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"shift_left_dynamic": {
									"entryPoint": 1329,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 1685,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 1539,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 1341,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 1492,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 1028,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 1535,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:6934:12",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:12"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:12",
														"type": ""
													}
												],
												"src": "7:75:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:12"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:12"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:12",
														"type": ""
													}
												],
												"src": "334:126:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:12",
														"type": ""
													}
												],
												"src": "466:96:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:12"
															},
															"nodeType": "YulIf",
															"src": "621:63:12"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:12",
														"type": ""
													}
												],
												"src": "568:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:12"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:12",
														"type": ""
													}
												],
												"src": "696:143:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "939:413:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "985:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "987:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "987:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "987:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "960:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "969:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "956:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "956:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "981:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "952:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "952:32:12"
															},
															"nodeType": "YulIf",
															"src": "949:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "1078:128:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1093:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1107:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1097:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1122:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1168:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1179:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1164:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1164:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1188:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1132:31:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1132:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1122:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1216:129:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1231:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1245:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1235:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1261:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1307:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1318:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1303:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1303:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1327:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1271:31:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1271:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1261:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "901:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "912:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "924:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "932:6:12",
														"type": ""
													}
												],
												"src": "845:507:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1417:40:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1428:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1444:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1438:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1438:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1428:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1400:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1410:6:12",
														"type": ""
													}
												],
												"src": "1358:99:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1491:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1508:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1511:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1501:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1501:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1501:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1605:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1608:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1598:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1598:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1598:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1629:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1632:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1622:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1622:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1622:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1463:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1677:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1694:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1697:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1687:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1687:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1687:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1791:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1794:4:12",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1784:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1784:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1784:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1815:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1818:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1808:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1808:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1808:15:12"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "1649:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1886:269:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1896:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1910:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1916:1:12",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "1906:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1906:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1896:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1927:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1957:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1963:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1953:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1953:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1931:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2004:51:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2018:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2032:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2040:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2028:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2028:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2018:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1984:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1977:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1977:26:12"
															},
															"nodeType": "YulIf",
															"src": "1974:81:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2107:42:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "2121:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2121:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2121:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2071:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2094:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2102:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2091:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2091:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2068:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2068:38:12"
															},
															"nodeType": "YulIf",
															"src": "2065:84:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1870:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1879:6:12",
														"type": ""
													}
												],
												"src": "1835:320:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2215:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2225:11:12",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "2233:3:12"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "2225:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2253:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "2256:3:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2246:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2246:14:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2246:14:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2269:26:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2287:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2290:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2277:9:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2277:18:12"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "2269:4:12"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "2202:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2210:4:12",
														"type": ""
													}
												],
												"src": "2161:141:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2352:49:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2362:33:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2380:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2387:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2376:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2376:14:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2392:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2372:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2372:23:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "2362:6:12"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2335:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "2345:6:12",
														"type": ""
													}
												],
												"src": "2308:93:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:54:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "2495:4:12"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2501:5:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "2491:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2491:16:12"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "2470:8:12"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "2435:4:12",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2441:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "2451:8:12",
														"type": ""
													}
												],
												"src": "2407:107:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2596:317:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2606:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nodeType": "YulIdentifier",
																		"src": "2627:10:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2639:1:12",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2623:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2623:18:12"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nodeType": "YulTypedName",
																	"src": "2610:9:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2650:109:12",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "2681:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2692:66:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "2662:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2662:97:12"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "2654:4:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2768:51:12",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "2799:9:12"
																	},
																	{
																		"name": "toInsert",
																		"nodeType": "YulIdentifier",
																		"src": "2810:8:12"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "2780:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2780:39:12"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nodeType": "YulIdentifier",
																	"src": "2768:8:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2828:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2841:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "2852:4:12"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2848:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2848:9:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2837:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2837:21:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2828:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2867:40:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2880:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nodeType": "YulIdentifier",
																				"src": "2891:8:12"
																			},
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "2901:4:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2887:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2887:19:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2877:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2877:30:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "2867:6:12"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2557:5:12",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nodeType": "YulTypedName",
														"src": "2564:10:12",
														"type": ""
													},
													{
														"name": "toInsert",
														"nodeType": "YulTypedName",
														"src": "2576:8:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "2589:6:12",
														"type": ""
													}
												],
												"src": "2520:393:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2964:32:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2974:16:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2985:5:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2974:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2946:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2956:7:12",
														"type": ""
													}
												],
												"src": "2919:77:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3034:28:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3044:12:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3051:5:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3044:3:12"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3020:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3030:3:12",
														"type": ""
													}
												],
												"src": "3002:60:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3128:82:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3138:66:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3196:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3178:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3178:24:12"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "3169:8:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3169:34:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3151:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3151:53:12"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "3138:9:12"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3108:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "3118:9:12",
														"type": ""
													}
												],
												"src": "3068:142:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3263:28:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3273:12:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3280:5:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3273:3:12"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3249:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3259:3:12",
														"type": ""
													}
												],
												"src": "3216:75:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3373:193:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3383:63:12",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nodeType": "YulIdentifier",
																		"src": "3438:7:12"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3407:30:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3407:39:12"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nodeType": "YulTypedName",
																	"src": "3387:16:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "3462:4:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "3502:4:12"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "3496:5:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3496:11:12"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3509:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nodeType": "YulIdentifier",
																						"src": "3541:16:12"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3517:23:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3517:41:12"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nodeType": "YulIdentifier",
																			"src": "3468:27:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3468:91:12"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "3455:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3455:105:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3455:105:12"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "3350:4:12",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3356:6:12",
														"type": ""
													},
													{
														"name": "value_0",
														"nodeType": "YulTypedName",
														"src": "3364:7:12",
														"type": ""
													}
												],
												"src": "3297:269:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3621:24:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3631:8:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3638:1:12",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3631:3:12"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3617:3:12",
														"type": ""
													}
												],
												"src": "3572:73:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3704:136:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3714:46:12",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3728:30:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3728:32:12"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nodeType": "YulTypedName",
																	"src": "3718:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "3813:4:12"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3819:6:12"
																	},
																	{
																		"name": "zero_0",
																		"nodeType": "YulIdentifier",
																		"src": "3827:6:12"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3769:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3769:65:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3769:65:12"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "3690:4:12",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3696:6:12",
														"type": ""
													}
												],
												"src": "3651:189:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3896:136:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3963:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "4007:5:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4014:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "3977:29:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3977:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3977:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nodeType": "YulIdentifier",
																		"src": "3916:5:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "3923:3:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3913:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3913:14:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3928:26:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3930:22:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "3943:5:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3950:1:12",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3939:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3939:13:12"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nodeType": "YulIdentifier",
																				"src": "3930:5:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3910:2:12",
																"statements": []
															},
															"src": "3906:120:12"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nodeType": "YulTypedName",
														"src": "3884:5:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3891:3:12",
														"type": ""
													}
												],
												"src": "3846:186:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4117:464:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4143:431:12",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "4157:54:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "4205:5:12"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nodeType": "YulIdentifier",
																				"src": "4173:31:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4173:38:12"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nodeType": "YulTypedName",
																				"src": "4161:8:12",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "4224:63:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nodeType": "YulIdentifier",
																					"src": "4247:8:12"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nodeType": "YulIdentifier",
																							"src": "4275:10:12"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nodeType": "YulIdentifier",
																						"src": "4257:17:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4257:29:12"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4243:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4243:44:12"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "4228:11:12",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "4444:27:12",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "4446:23:12",
																					"value": {
																						"name": "dataArea",
																						"nodeType": "YulIdentifier",
																						"src": "4461:8:12"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "4446:11:12"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "4428:10:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4440:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "4425:2:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4425:18:12"
																		},
																		"nodeType": "YulIf",
																		"src": "4422:49:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nodeType": "YulIdentifier",
																					"src": "4513:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nodeType": "YulIdentifier",
																							"src": "4530:8:12"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "4558:3:12"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nodeType": "YulIdentifier",
																								"src": "4540:17:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4540:22:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4526:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4526:37:12"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nodeType": "YulIdentifier",
																				"src": "4484:28:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4484:80:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4484:80:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "4134:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4139:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4131:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4131:11:12"
															},
															"nodeType": "YulIf",
															"src": "4128:446:12"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "4093:5:12",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "4100:3:12",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "4105:10:12",
														"type": ""
													}
												],
												"src": "4038:543:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4650:54:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4660:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "4685:4:12"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4691:5:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4681:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4681:16:12"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "4660:8:12"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "4625:4:12",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4631:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "4641:8:12",
														"type": ""
													}
												],
												"src": "4587:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4761:118:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4771:68:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4820:1:12",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nodeType": "YulIdentifier",
																						"src": "4823:5:12"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "4816:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4816:13:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4835:1:12",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "4831:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4831:6:12"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nodeType": "YulIdentifier",
																			"src": "4787:28:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4787:51:12"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "4783:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4783:56:12"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "4775:4:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4848:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4862:4:12"
																	},
																	{
																		"name": "mask",
																		"nodeType": "YulIdentifier",
																		"src": "4868:4:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4858:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4858:15:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "4848:6:12"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4738:4:12",
														"type": ""
													},
													{
														"name": "bytes",
														"nodeType": "YulTypedName",
														"src": "4744:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "4754:6:12",
														"type": ""
													}
												],
												"src": "4710:169:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4965:214:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5098:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5125:4:12"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "5131:3:12"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "5106:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5106:29:12"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "5098:4:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5144:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5155:4:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5165:1:12",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "5168:3:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5161:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5161:11:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5152:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:21:12"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "5144:4:12"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4946:4:12",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "4952:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "4960:4:12",
														"type": ""
													}
												],
												"src": "4884:295:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5276:1303:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5287:51:12",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "5334:3:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "5301:32:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5301:37:12"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "5291:6:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5423:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "5425:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5425:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5425:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "5395:6:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5403:18:12",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5392:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5392:30:12"
															},
															"nodeType": "YulIf",
															"src": "5389:56:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5455:52:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nodeType": "YulIdentifier",
																				"src": "5501:4:12"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nodeType": "YulIdentifier",
																			"src": "5495:5:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5495:11:12"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nodeType": "YulIdentifier",
																	"src": "5469:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5469:38:12"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nodeType": "YulTypedName",
																	"src": "5459:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "5600:4:12"
																	},
																	{
																		"name": "oldLen",
																		"nodeType": "YulIdentifier",
																		"src": "5606:6:12"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "5614:6:12"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "5554:45:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5554:67:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5554:67:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5631:18:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5648:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "5635:9:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5659:17:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5672:4:12",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "5659:9:12"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "5723:611:12",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "5737:37:12",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "5756:6:12"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "5768:4:12",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "5764:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5764:9:12"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "5752:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5752:22:12"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "5741:7:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "5788:51:12",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "5834:4:12"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "5802:31:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5802:37:12"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "5792:6:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "5852:10:12",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5861:1:12",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "5856:1:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "5920:163:12",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "5945:6:12"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "5963:3:12"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "5968:9:12"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "5959:3:12"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "5959:19:12"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "5953:5:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "5953:26:12"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "5938:6:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5938:42:12"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "5938:42:12"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "5997:24:12",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "6011:6:12"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6019:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6007:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6007:14:12"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "5997:6:12"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "6038:31:12",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "6055:9:12"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6066:2:12",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6051:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6051:18:12"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "6038:9:12"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "5886:1:12"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "5889:7:12"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "5883:2:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5883:14:12"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "5898:21:12",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "5900:17:12",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "5909:1:12"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "5912:4:12",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "5905:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5905:12:12"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "5900:1:12"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "5879:3:12",
																					"statements": []
																				},
																				"src": "5875:208:12"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "6119:156:12",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "6137:43:12",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "6164:3:12"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "6169:9:12"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "6160:3:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6160:19:12"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "6154:5:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6154:26:12"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "6141:9:12",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "6204:6:12"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "6231:9:12"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nodeType": "YulIdentifier",
																														"src": "6246:6:12"
																													},
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "6254:4:12",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nodeType": "YulIdentifier",
																													"src": "6242:3:12"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "6242:17:12"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nodeType": "YulIdentifier",
																											"src": "6212:18:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6212:48:12"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "6197:6:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6197:64:12"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "6197:64:12"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "6102:7:12"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "6111:6:12"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "6099:2:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6099:19:12"
																				},
																				"nodeType": "YulIf",
																				"src": "6096:179:12"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "6295:4:12"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "6309:6:12"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "6317:1:12",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nodeType": "YulIdentifier",
																										"src": "6305:3:12"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "6305:14:12"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "6321:1:12",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "6301:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6301:22:12"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "6288:6:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6288:36:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "6288:36:12"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "5716:618:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5721:1:12",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "6351:222:12",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "6365:14:12",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6378:1:12",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "6369:5:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "6402:67:12",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "6420:35:12",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "6439:3:12"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "6444:9:12"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "6435:3:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6435:19:12"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "6429:5:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6429:26:12"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "6420:5:12"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "6395:6:12"
																				},
																				"nodeType": "YulIf",
																				"src": "6392:77:12"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "6489:4:12"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "6548:5:12"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "6555:6:12"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "6495:52:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6495:67:12"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "6482:6:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6482:81:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "6482:81:12"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "6343:230:12",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "5696:6:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5704:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5693:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5693:14:12"
															},
															"nodeType": "YulSwitch",
															"src": "5686:887:12"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "5265:4:12",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "5271:3:12",
														"type": ""
													}
												],
												"src": "5184:1395:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6650:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6667:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6690:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6672:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6672:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6660:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6660:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6660:37:12"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6638:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6645:3:12",
														"type": ""
													}
												],
												"src": "6585:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6807:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6817:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6829:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6840:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6825:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6825:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6817:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6897:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6910:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6921:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6906:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6906:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6853:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6853:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6853:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6779:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6791:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6802:4:12",
														"type": ""
													}
												],
												"src": "6709:222:12"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH2 0x3C7 PUSH1 0x7 SSTORE PUSH1 0x23 PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0xB PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x5C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2B51 CODESIZE SUB DUP1 PUSH3 0x2B51 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x82 SWAP2 SWAP1 PUSH3 0x433 JUMP JUMPDEST PUSH1 0xB PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x70616E7468656F6E20544F4B454E000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x70544F4B454E0000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x121 SWAP2 SWAP1 PUSH3 0x6DC JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x6DC JUMP JUMPDEST POP POP POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x1A9 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1A0 SWAP2 SWAP1 PUSH3 0x7D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1BA DUP2 PUSH3 0x30B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x229 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8579BEFE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x28F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8579BEFE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0xA PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP PUSH3 0x7EC JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0x3FD DUP3 PUSH3 0x3D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x40F DUP2 PUSH3 0x3F1 JUMP JUMPDEST DUP2 EQ PUSH3 0x41A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH3 0x42D DUP2 PUSH3 0x404 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x44C JUMPI PUSH3 0x44B PUSH3 0x3CE JUMP JUMPDEST JUMPDEST PUSH0 PUSH3 0x45B DUP6 DUP3 DUP7 ADD PUSH3 0x41D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x46E DUP6 DUP3 DUP7 ADD PUSH3 0x41D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x4F4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x50A JUMPI PUSH3 0x509 PUSH3 0x4AF JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH3 0x56E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x531 JUMP JUMPDEST PUSH3 0x57A DUP7 DUP4 PUSH3 0x531 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0x5C4 PUSH3 0x5BE PUSH3 0x5B8 DUP5 PUSH3 0x592 JUMP JUMPDEST PUSH3 0x59B JUMP JUMPDEST PUSH3 0x592 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x5DF DUP4 PUSH3 0x5A4 JUMP JUMPDEST PUSH3 0x5F7 PUSH3 0x5EE DUP3 PUSH3 0x5CB JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x53D JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH3 0x60D PUSH3 0x5FF JUMP JUMPDEST PUSH3 0x61A DUP2 DUP5 DUP5 PUSH3 0x5D4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x641 JUMPI PUSH3 0x635 PUSH0 DUP3 PUSH3 0x603 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x620 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x690 JUMPI PUSH3 0x65A DUP2 PUSH3 0x510 JUMP JUMPDEST PUSH3 0x665 DUP5 PUSH3 0x522 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x675 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x68D PUSH3 0x684 DUP6 PUSH3 0x522 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x61F JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0x6B2 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x695 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0x6CC DUP4 DUP4 PUSH3 0x6A1 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x6E7 DUP3 PUSH3 0x478 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x703 JUMPI PUSH3 0x702 PUSH3 0x482 JUMP JUMPDEST JUMPDEST PUSH3 0x70F DUP3 SLOAD PUSH3 0x4DC JUMP JUMPDEST PUSH3 0x71C DUP3 DUP3 DUP6 PUSH3 0x645 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x752 JUMPI PUSH0 DUP5 ISZERO PUSH3 0x73D JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x749 DUP6 DUP3 PUSH3 0x6BF JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x7B8 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x762 DUP7 PUSH3 0x510 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x78B JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x764 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x7AB JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x7A7 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x6A1 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x7CB DUP2 PUSH3 0x3F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x7E6 PUSH0 DUP4 ADD DUP5 PUSH3 0x7C0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2322 PUSH3 0x82F PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x592 ADD MSTORE DUP2 DUP2 PUSH2 0x670 ADD MSTORE DUP2 DUP2 PUSH2 0x831 ADD MSTORE DUP2 DUP2 PUSH2 0xB90 ADD MSTORE DUP2 DUP2 PUSH2 0xBD2 ADD MSTORE DUP2 DUP2 PUSH2 0xDDF ADD MSTORE PUSH2 0xE2C ADD MSTORE PUSH2 0x2322 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D8 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xA88DF21A GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x50A JUMPI DUP1 PUSH4 0xEB2CD258 EQ PUSH2 0x53A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x558 JUMPI DUP1 PUSH4 0xF40FA4BC EQ PUSH2 0x574 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0xA88DF21A EQ PUSH2 0x486 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0xC38F2BFE EQ PUSH2 0x4D2 JUMPI DUP1 PUSH4 0xDB006A75 EQ PUSH2 0x4EE JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0x92054FE7 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xA492FBC6 EQ PUSH2 0x456 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x8705FCD4 EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0x8B7B23EE EQ PUSH2 0x3DE JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x42966C68 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x559E775B EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x39C JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0x35975A37 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x41275358 EQ PUSH2 0x302 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x16F9B467 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x16F9B467 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0x19F04174 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x28E JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x29CD242 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x218 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1E4 PUSH2 0x590 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F1 SWAP2 SWAP1 PUSH2 0x1C14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x202 PUSH2 0x5B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x1CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x232 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22D SWAP2 SWAP1 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0x644 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23F SWAP2 SWAP1 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x250 PUSH2 0x666 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH2 0x73B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x267 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x278 PUSH2 0x744 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x285 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0x1DE2 JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B5 SWAP2 SWAP1 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C6 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D3 SWAP2 SWAP1 PUSH2 0x1E4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E4 PUSH2 0x783 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x300 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0x7A8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30A PUSH2 0x8DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x1E86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0x8FF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x356 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x351 SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0x913 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x386 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x1ECA JUMP JUMPDEST PUSH2 0x955 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x393 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A4 PUSH2 0x99A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0x9AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D7 SWAP2 SWAP1 PUSH2 0x1ECA JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E6 PUSH2 0xA64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F3 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x404 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x422 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x42F SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x440 PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x44D SWAP2 SWAP1 PUSH2 0x1CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x470 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0xB28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x47D SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x49B SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0xB6A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0xC93 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x508 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x503 SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0xD2E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x524 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x51F SWAP2 SWAP1 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x531 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x542 PUSH2 0xF12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x572 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x56D SWAP2 SWAP1 PUSH2 0x1ECA JUMP JUMPDEST PUSH2 0xF18 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x589 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0xF9C JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x5C3 SWAP1 PUSH2 0x1FEA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5EF SWAP1 PUSH2 0x1FEA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x63A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x611 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x63A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x61D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x64E PUSH2 0x1039 JUMP JUMPDEST SWAP1 POP PUSH2 0x65B DUP2 DUP6 DUP6 PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x66E PUSH2 0x1052 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6C7 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6E2 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x706 SWAP2 SWAP1 PUSH2 0x202E JUMP JUMPDEST PUSH1 0x9 DUP2 SWAP1 SSTORE POP SELFBALANCE PUSH32 0xA3FAF2F1EB729D9E646E40F512A8458C02057EE480D3B576A37E8A8AB30F0555 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x9 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x757 PUSH2 0x1039 JUMP JUMPDEST SWAP1 POP PUSH2 0x764 DUP6 DUP3 DUP6 PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x76F DUP6 DUP6 DUP6 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x78B PUSH2 0x1052 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x7B0 PUSH2 0x125B JUMP JUMPDEST PUSH2 0x3E8 DUP2 LT ISZERO PUSH2 0x7EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B4DB67A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x7F6 DUP3 PUSH2 0x12A1 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x8 SLOAD DUP4 PUSH2 0x807 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH2 0x815 SWAP2 SWAP1 PUSH2 0x20E3 JUMP JUMPDEST PUSH1 0x9 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x825 SWAP2 SWAP1 PUSH2 0x2116 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x879 PUSH32 0x0 CALLER PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x12C9 JUMP JUMPDEST PUSH2 0x89D DUP5 PUSH2 0x3E8 PUSH1 0x7 SLOAD DUP6 PUSH2 0x88E SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x898 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x134B JUMP JUMPDEST DUP3 DUP3 TIMESTAMP PUSH32 0x79D4FBA3FC168DBD2A0C2A5235112B3442D90A21282F7B69506D05A46FDBBB7 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x8D6 PUSH2 0x13CA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x910 PUSH2 0x90A PUSH2 0x1039 JUMP JUMPDEST DUP3 PUSH2 0x13D4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0x3E8 PUSH1 0x9 SLOAD PUSH1 0x7 SLOAD PUSH2 0x925 PUSH2 0x73B JUMP JUMPDEST DUP6 PUSH2 0x930 SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x93A SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x944 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x94E SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9A2 PUSH2 0x1052 JUMP JUMPDEST PUSH2 0x9AB PUSH0 PUSH2 0x1453 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x9BF DUP3 PUSH2 0x9B9 PUSH2 0x1039 JUMP JUMPDEST DUP4 PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x9C9 DUP3 DUP3 PUSH2 0x13D4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x9D5 PUSH2 0x1052 JUMP JUMPDEST PUSH2 0x9DE DUP2 PUSH2 0x1516 JUMP JUMPDEST DUP1 PUSH1 0xA PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x446E39BCF1B47CFADFAA23442CB4B34682CFE6BD9220DA084894E3B1F834E4F3 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0xAA7 SWAP1 PUSH2 0x1FEA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAD3 SWAP1 PUSH2 0x1FEA JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB1E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAF5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB1E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB01 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x3E8 PUSH2 0xB34 PUSH2 0x73B JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x9 SLOAD DUP6 PUSH2 0xB45 SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0xB4F SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0xB59 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0xB63 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB72 PUSH2 0x1052 JUMP JUMPDEST PUSH1 0xA PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xB8B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xBB7 PUSH32 0x0 CALLER ADDRESS DUP5 PUSH2 0x12C9 JUMP JUMPDEST PUSH2 0xBC1 CALLER DUP3 PUSH2 0x134B JUMP JUMPDEST PUSH2 0xBCF PUSH2 0xDEAD PUSH2 0x3E8 PUSH2 0xC71 JUMP JUMPDEST POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC29 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC44 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC68 SWAP2 SWAP1 PUSH2 0x202E JUMP JUMPDEST PUSH1 0x9 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xC7B PUSH2 0x1039 JUMP JUMPDEST SWAP1 POP PUSH2 0xC88 DUP2 DUP6 DUP6 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC9B PUSH2 0x1052 JUMP JUMPDEST PUSH1 0x64 DUP2 PUSH2 0xFFFF AND GT DUP1 PUSH2 0xCB2 JUMPI POP PUSH1 0x19 DUP2 PUSH2 0xFFFF AND LT JUMPDEST ISZERO PUSH2 0xCE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7F176CEE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0xFFFF AND PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH32 0x9DE4E85041D310D87DF38A671E7ECF270C37D73EA017960B904AF70512059621 DUP2 PUSH1 0x40 MLOAD PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x21BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xD36 PUSH2 0x125B JUMP JUMPDEST PUSH2 0x3E8 DUP2 LT ISZERO PUSH2 0xD72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B4DB67A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xD7C DUP3 PUSH2 0x1546 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x8 SLOAD DUP4 PUSH2 0xD8D SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x3E8 PUSH1 0x7 SLOAD DUP6 PUSH2 0xDA1 SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0xDAB SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 PUSH2 0xDB9 SWAP2 SWAP1 PUSH2 0x2116 JUMP JUMPDEST PUSH1 0x9 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xDC9 SWAP2 SWAP1 PUSH2 0x20E3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xDDA CALLER DUP5 PUSH2 0x13D4 JUMP JUMPDEST PUSH2 0xE27 PUSH32 0x0 ADDRESS PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x12C9 JUMP JUMPDEST PUSH2 0xE53 PUSH32 0x0 ADDRESS CALLER DUP5 PUSH2 0x12C9 JUMP JUMPDEST DUP4 DUP4 TIMESTAMP PUSH32 0x1BE07AD598D802B0A04E208E5F3DFE7EAF27339C0F0E4A75DDBA517BBE5C8F36 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP PUSH2 0xE8D PUSH2 0x13CA JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xF20 PUSH2 0x1052 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF90 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF87 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF99 DUP2 PUSH2 0x1453 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xFA4 PUSH2 0x1052 JUMP JUMPDEST PUSH2 0x3D4 DUP2 PUSH2 0xFFFF AND GT DUP1 PUSH2 0xFBD JUMPI POP PUSH2 0x3B6 DUP2 PUSH2 0xFFFF AND LT JUMPDEST ISZERO PUSH2 0xFF4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x48565AD500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0xFFFF AND PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH32 0xA7AAF5668E7D5E60BFA38B5D07A3178204A2D8CB16F5A03678C20F42C7954295 DUP2 PUSH1 0x40 MLOAD PUSH2 0x102E SWAP2 SWAP1 PUSH2 0x21BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x104D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x156E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x105A PUSH2 0x1039 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1078 PUSH2 0xA6A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x10D7 JUMPI PUSH2 0x109B PUSH2 0x1039 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10CE SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH2 0x10E4 DUP5 DUP5 PUSH2 0xE90 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x1165 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x1156 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x114D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1164 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x156E JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11DB JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11D2 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x124B JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1242 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1256 DUP4 DUP4 DUP4 PUSH2 0x173D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x6 SLOAD SUB PUSH2 0x1297 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 PUSH1 0x9 SLOAD PUSH2 0x12AD PUSH2 0x73B JUMP JUMPDEST DUP4 PUSH2 0x12B8 SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x12C2 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1345 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x12FE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2208 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1956 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13BB JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B2 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13C6 PUSH0 DUP4 DUP4 PUSH2 0x173D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1444 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x143B SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x144F DUP3 PUSH0 DUP4 PUSH2 0x173D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 PUSH2 0x1543 JUMPI PUSH32 0x5A65726F20616464726573730000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x20 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0x154F PUSH2 0x73B JUMP JUMPDEST PUSH1 0x9 SLOAD DUP4 PUSH2 0x155D SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x1567 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15DE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D5 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x164E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1645 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1737 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x172E SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x178D JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1781 SWAP2 SWAP1 PUSH2 0x2116 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x185B JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x1816 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x180D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x18A2 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x18EC JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1949 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1980 DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x19EB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD EQ ISZERO DUP1 ISZERO PUSH2 0x19A4 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x19A2 SWAP2 SWAP1 PUSH2 0x2267 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x19E6 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19DD SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19F8 DUP4 DUP4 PUSH0 PUSH2 0x1A00 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x1A47 JUMPI ADDRESS PUSH1 0x40 MLOAD PUSH32 0xCD78605900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3E SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1A6F SWAP2 SWAP1 PUSH2 0x22D6 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1AA9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AAE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1ABE DUP7 DUP4 DUP4 PUSH2 0x1AC9 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x1ADE JUMPI PUSH2 0x1AD9 DUP3 PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1B4E JUMP JUMPDEST PUSH0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x1B04 JUMPI POP PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x1B46 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3D SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x1B4F JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1B68 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BDC PUSH2 0x1BD7 PUSH2 0x1BD2 DUP5 PUSH2 0x1B9A JUMP JUMPDEST PUSH2 0x1BB9 JUMP JUMPDEST PUSH2 0x1B9A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BED DUP3 PUSH2 0x1BC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BFE DUP3 PUSH2 0x1BE3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C0E DUP2 PUSH2 0x1BF4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C27 PUSH0 DUP4 ADD DUP5 PUSH2 0x1C05 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C64 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1C49 JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1C89 DUP3 PUSH2 0x1C2D JUMP JUMPDEST PUSH2 0x1C93 DUP2 DUP6 PUSH2 0x1C37 JUMP JUMPDEST SWAP4 POP PUSH2 0x1CA3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1C47 JUMP JUMPDEST PUSH2 0x1CAC DUP2 PUSH2 0x1C6F JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1CCF DUP2 DUP5 PUSH2 0x1C7F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH2 0x1CE5 DUP3 PUSH2 0x1B9A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CF5 DUP2 PUSH2 0x1CDB JUMP JUMPDEST DUP2 EQ PUSH2 0x1CFF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D10 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D28 DUP2 PUSH2 0x1D16 JUMP JUMPDEST DUP2 EQ PUSH2 0x1D32 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D43 DUP2 PUSH2 0x1D1F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D5F JUMPI PUSH2 0x1D5E PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1D6C DUP6 DUP3 DUP7 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D7D DUP6 DUP3 DUP7 ADD PUSH2 0x1D35 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D9B DUP2 PUSH2 0x1D87 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DB4 PUSH0 DUP4 ADD DUP5 PUSH2 0x1D92 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DC3 DUP2 PUSH2 0x1D16 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DDC PUSH0 DUP4 ADD DUP5 PUSH2 0x1DBA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DF9 JUMPI PUSH2 0x1DF8 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E06 DUP7 DUP3 DUP8 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1E17 DUP7 DUP3 DUP8 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1E28 DUP7 DUP3 DUP8 ADD PUSH2 0x1D35 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E47 DUP2 PUSH2 0x1E32 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1E60 PUSH0 DUP4 ADD DUP5 PUSH2 0x1E3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1E70 DUP3 PUSH2 0x1B9A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E80 DUP2 PUSH2 0x1E66 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1E99 PUSH0 DUP4 ADD DUP5 PUSH2 0x1E77 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EB4 JUMPI PUSH2 0x1EB3 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EC1 DUP5 DUP3 DUP6 ADD PUSH2 0x1D35 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EDF JUMPI PUSH2 0x1EDE PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EEC DUP5 DUP3 DUP6 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1EFE DUP2 PUSH2 0x1CDB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F17 PUSH0 DUP4 ADD DUP5 PUSH2 0x1EF5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F33 DUP2 PUSH2 0x1F1D JUMP JUMPDEST DUP2 EQ PUSH2 0x1F3D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1F4E DUP2 PUSH2 0x1F2A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F69 JUMPI PUSH2 0x1F68 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F76 DUP5 DUP3 DUP6 ADD PUSH2 0x1F40 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F95 JUMPI PUSH2 0x1F94 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FA2 DUP6 DUP3 DUP7 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1FB3 DUP6 DUP3 DUP7 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2001 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2014 JUMPI PUSH2 0x2013 PUSH2 0x1FBD JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2028 DUP2 PUSH2 0x1D1F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2043 JUMPI PUSH2 0x2042 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2050 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x20BD DUP3 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP PUSH2 0x20C8 DUP4 PUSH2 0x1D16 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x20D8 JUMPI PUSH2 0x20D7 PUSH2 0x2059 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x20ED DUP3 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP PUSH2 0x20F8 DUP4 PUSH2 0x1D16 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2110 JUMPI PUSH2 0x210F PUSH2 0x2086 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2120 DUP3 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP PUSH2 0x212B DUP4 PUSH2 0x1D16 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2143 JUMPI PUSH2 0x2142 PUSH2 0x2086 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2153 DUP3 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP PUSH2 0x215E DUP4 PUSH2 0x1D16 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x216C DUP2 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2183 JUMPI PUSH2 0x2182 PUSH2 0x2086 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x21A4 PUSH2 0x219F PUSH2 0x219A DUP5 PUSH2 0x1F1D JUMP JUMPDEST PUSH2 0x1BB9 JUMP JUMPDEST PUSH2 0x1D16 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21B4 DUP2 PUSH2 0x218A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21CD PUSH0 DUP4 ADD DUP5 PUSH2 0x21AB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x21E6 PUSH0 DUP4 ADD DUP7 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x21F3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1DBA JUMP JUMPDEST PUSH2 0x2200 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1DBA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x221B PUSH0 DUP4 ADD DUP7 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x2228 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x2235 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1DBA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2246 DUP2 PUSH2 0x1D87 JUMP JUMPDEST DUP2 EQ PUSH2 0x2250 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2261 DUP2 PUSH2 0x223D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x227C JUMPI PUSH2 0x227B PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2289 DUP5 DUP3 DUP6 ADD PUSH2 0x2253 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x22B0 DUP3 PUSH2 0x2292 JUMP JUMPDEST PUSH2 0x22BA DUP2 DUP6 PUSH2 0x229C JUMP JUMPDEST SWAP4 POP PUSH2 0x22CA DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1C47 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x22E1 DUP3 DUP5 PUSH2 0x22A6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 CALLCODE SWAP4 0xDD DUP13 SWAP5 SWAP11 0x1E PUSH22 0xCEA771275A9FDF34EB94DB78F4C7618C2A6E239766A1 ADD PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "775:8904:11:-:0;;;1511:3;1474:40;;1711:2;1689:24;;2093:1;2054:41;;;;;;;;;;;;;;;;;;;;2755:333;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2848:12;;;;;;;;;;;1896:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1970:5;1962;:13;;;;;;:::i;:::-;;1995:7;1985;:17;;;;;;:::i;:::-;;1896:113;;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;1713:1:10;1917:7;:21;;;;2898:1:11::2;2875:25;;:11;:25;;::::0;2871:61:::2;;2909:23;;;;;;;;;;;;;;2871:61;2966:1;2946:22;;:8;:22;;::::0;2942:58:::2;;2977:23;;;;;;;;;;;;;;2942:58;3032:11;3011:10;;:33;;;;;;;;;;;;;;;;;;3072:8;3054:27;;;;;;;;::::0;::::2;2755:333:::0;;775:8904;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;88:117:12:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:507::-;924:6;932;981:2;969:9;960:7;956:23;952:32;949:119;;;987:79;;:::i;:::-;949:119;1107:1;1132:64;1188:7;1179:6;1168:9;1164:22;1132:64;:::i;:::-;1122:74;;1078:128;1245:2;1271:64;1327:7;1318:6;1307:9;1303:22;1271:64;:::i;:::-;1261:74;;1216:129;845:507;;;;;:::o;1358:99::-;1410:6;1444:5;1438:12;1428:22;;1358:99;;;:::o;1463:180::-;1511:77;1508:1;1501:88;1608:4;1605:1;1598:15;1632:4;1629:1;1622:15;1649:180;1697:77;1694:1;1687:88;1794:4;1791:1;1784:15;1818:4;1815:1;1808:15;1835:320;1879:6;1916:1;1910:4;1906:12;1896:22;;1963:1;1957:4;1953:12;1984:18;1974:81;;2040:4;2032:6;2028:17;2018:27;;1974:81;2102:2;2094:6;2091:14;2071:18;2068:38;2065:84;;2121:18;;:::i;:::-;2065:84;1886:269;1835:320;;;:::o;2161:141::-;2210:4;2233:3;2225:11;;2256:3;2253:1;2246:14;2290:4;2287:1;2277:18;2269:26;;2161:141;;;:::o;2308:93::-;2345:6;2392:2;2387;2380:5;2376:14;2372:23;2362:33;;2308:93;;;:::o;2407:107::-;2451:8;2501:5;2495:4;2491:16;2470:37;;2407:107;;;;:::o;2520:393::-;2589:6;2639:1;2627:10;2623:18;2662:97;2692:66;2681:9;2662:97;:::i;:::-;2780:39;2810:8;2799:9;2780:39;:::i;:::-;2768:51;;2852:4;2848:9;2841:5;2837:21;2828:30;;2901:4;2891:8;2887:19;2880:5;2877:30;2867:40;;2596:317;;2520:393;;;;;:::o;2919:77::-;2956:7;2985:5;2974:16;;2919:77;;;:::o;3002:60::-;3030:3;3051:5;3044:12;;3002:60;;;:::o;3068:142::-;3118:9;3151:53;3169:34;3178:24;3196:5;3178:24;:::i;:::-;3169:34;:::i;:::-;3151:53;:::i;:::-;3138:66;;3068:142;;;:::o;3216:75::-;3259:3;3280:5;3273:12;;3216:75;;;:::o;3297:269::-;3407:39;3438:7;3407:39;:::i;:::-;3468:91;3517:41;3541:16;3517:41;:::i;:::-;3509:6;3502:4;3496:11;3468:91;:::i;:::-;3462:4;3455:105;3373:193;3297:269;;;:::o;3572:73::-;3617:3;3572:73;:::o;3651:189::-;3728:32;;:::i;:::-;3769:65;3827:6;3819;3813:4;3769:65;:::i;:::-;3704:136;3651:189;;:::o;3846:186::-;3906:120;3923:3;3916:5;3913:14;3906:120;;;3977:39;4014:1;4007:5;3977:39;:::i;:::-;3950:1;3943:5;3939:13;3930:22;;3906:120;;;3846:186;;:::o;4038:543::-;4139:2;4134:3;4131:11;4128:446;;;4173:38;4205:5;4173:38;:::i;:::-;4257:29;4275:10;4257:29;:::i;:::-;4247:8;4243:44;4440:2;4428:10;4425:18;4422:49;;;4461:8;4446:23;;4422:49;4484:80;4540:22;4558:3;4540:22;:::i;:::-;4530:8;4526:37;4513:11;4484:80;:::i;:::-;4143:431;;4128:446;4038:543;;;:::o;4587:117::-;4641:8;4691:5;4685:4;4681:16;4660:37;;4587:117;;;;:::o;4710:169::-;4754:6;4787:51;4835:1;4831:6;4823:5;4820:1;4816:13;4787:51;:::i;:::-;4783:56;4868:4;4862;4858:15;4848:25;;4761:118;4710:169;;;;:::o;4884:295::-;4960:4;5106:29;5131:3;5125:4;5106:29;:::i;:::-;5098:37;;5168:3;5165:1;5161:11;5155:4;5152:21;5144:29;;4884:295;;;;:::o;5184:1395::-;5301:37;5334:3;5301:37;:::i;:::-;5403:18;5395:6;5392:30;5389:56;;;5425:18;;:::i;:::-;5389:56;5469:38;5501:4;5495:11;5469:38;:::i;:::-;5554:67;5614:6;5606;5600:4;5554:67;:::i;:::-;5648:1;5672:4;5659:17;;5704:2;5696:6;5693:14;5721:1;5716:618;;;;6378:1;6395:6;6392:77;;;6444:9;6439:3;6435:19;6429:26;6420:35;;6392:77;6495:67;6555:6;6548:5;6495:67;:::i;:::-;6489:4;6482:81;6351:222;5686:887;;5716:618;5768:4;5764:9;5756:6;5752:22;5802:37;5834:4;5802:37;:::i;:::-;5861:1;5875:208;5889:7;5886:1;5883:14;5875:208;;;5968:9;5963:3;5959:19;5953:26;5945:6;5938:42;6019:1;6011:6;6007:14;5997:24;;6066:2;6055:9;6051:18;6038:31;;5912:4;5909:1;5905:12;5900:17;;5875:208;;;6111:6;6102:7;6099:19;6096:179;;;6169:9;6164:3;6160:19;6154:26;6212:48;6254:4;6246:6;6242:17;6231:9;6212:48;:::i;:::-;6204:6;6197:64;6119:156;6096:179;6321:1;6317;6309:6;6305:14;6301:22;6295:4;6288:36;5723:611;;;5686:887;;5276:1303;;;5184:1395;;:::o;6585:118::-;6672:24;6690:5;6672:24;:::i;:::-;6667:3;6660:37;6585:118;;:::o;6709:222::-;6802:4;6840:2;6829:9;6825:18;6817:26;;6853:71;6921:1;6910:9;6906:17;6897:6;6853:71;:::i;:::-;6709:222;;;;:::o;775:8904:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@FEES_1668": {
									"entryPoint": 2660,
									"id": 1668,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@MINT_AND_REDEEM_FEE_1665": {
									"entryPoint": 2706,
									"id": 1665,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_BACKING_1654": {
									"entryPoint": 1424,
									"id": 1654,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_BACKINGtoPTOKEN_2106": {
									"entryPoint": 4769,
									"id": 2106,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_PTOKENtoBACKING_2088": {
									"entryPoint": 5446,
									"id": 2088,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_approve_690": {
									"entryPoint": 4160,
									"id": 690,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_750": {
									"entryPoint": 5486,
									"id": 750,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_assemblyOwnerNotZero_2114": {
									"entryPoint": 5398,
									"id": 2114,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_burn_672": {
									"entryPoint": 5076,
									"id": 672,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_callOptionalReturn_1225": {
									"entryPoint": 6486,
									"id": 1225,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_84": {
									"entryPoint": 4178,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_mint_639": {
									"entryPoint": 4939,
									"id": 639,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1540": {
									"entryPoint": 4153,
									"id": 1540,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_nonReentrantAfter_1607": {
									"entryPoint": 5066,
									"id": 1607,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_nonReentrantBefore_1599": {
									"entryPoint": 4699,
									"id": 1599,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_revert_1527": {
									"entryPoint": 6998,
									"id": 1527,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_spendAllowance_798": {
									"entryPoint": 4313,
									"id": 798,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 5203,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_529": {
									"entryPoint": 4459,
									"id": 529,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_606": {
									"entryPoint": 5949,
									"id": 606,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_426": {
									"entryPoint": 3728,
									"id": 426,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_450": {
									"entryPoint": 1604,
									"id": 450,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_385": {
									"entryPoint": 2389,
									"id": 385,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_922": {
									"entryPoint": 2477,
									"id": 922,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_901": {
									"entryPoint": 2303,
									"id": 901,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@decimals_363": {
									"entryPoint": 1915,
									"id": 363,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@emergencyFixTotalBacking_2071": {
									"entryPoint": 1638,
									"id": 2071,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@feeAddress_1672": {
									"entryPoint": 2266,
									"id": 1672,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@fillContract_1810": {
									"entryPoint": 2922,
									"id": 1810,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_1395": {
									"entryPoint": 6656,
									"id": 1395,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@functionCall_1349": {
									"entryPoint": 6635,
									"id": 1349,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getMintPrice_2139": {
									"entryPoint": 2323,
									"id": 2139,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getRedeemPrice_2164": {
									"entryPoint": 2856,
									"id": 2164,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getTotalBacking_2173": {
									"entryPoint": 1860,
									"id": 2173,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@mint_1884": {
									"entryPoint": 1960,
									"id": 1884,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_345": {
									"entryPoint": 1460,
									"id": 345,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_67": {
									"entryPoint": 2666,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@redeem_1966": {
									"entryPoint": 3374,
									"id": 1966,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@renounceOwnership_98": {
									"entryPoint": 2458,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_1062": {
									"entryPoint": 4809,
									"id": 1062,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setFeeAddress_1990": {
									"entryPoint": 2509,
									"id": 1990,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setMintAndRedeemFee_2018": {
									"entryPoint": 3996,
									"id": 2018,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setStart_1820": {
									"entryPoint": 1923,
									"id": 1820,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setTeamFee_2046": {
									"entryPoint": 3219,
									"id": 2046,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@symbol_354": {
									"entryPoint": 2712,
									"id": 354,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalBacking_1670": {
									"entryPoint": 3858,
									"id": 1670,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalSupply_372": {
									"entryPoint": 1851,
									"id": 372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_482": {
									"entryPoint": 1869,
									"id": 482,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_126": {
									"entryPoint": 3864,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_409": {
									"entryPoint": 3185,
									"id": 409,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@verifyCallResultFromTarget_1487": {
									"entryPoint": 6857,
									"id": 1487,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 7426,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 8787,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint16": {
									"entryPoint": 8000,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 7477,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 8218,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7882,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 8063,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 7650,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 7497,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 8807,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint16": {
									"entryPoint": 8020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7839,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 8238,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_payable_to_t_address_payable_fromStack": {
									"entryPoint": 7799,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 7925,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 7570,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 8870,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_contract$_IERC20_$877_to_t_address_fromStack": {
									"entryPoint": 7173,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7295,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint16_to_t_uint256_fromStack": {
									"entryPoint": 8619,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 7610,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 7742,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 8918,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 7940,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed": {
									"entryPoint": 7814,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 8712,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8659,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 7585,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$877__to_t_address__fromStack_reversed": {
									"entryPoint": 7188,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7351,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint16__to_t_uint256__fromStack_reversed": {
									"entryPoint": 8634,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 7625,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 7757,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 8850,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 7213,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 8860,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 7223,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8470,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 8371,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 8521,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8419,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 7387,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_address_payable": {
									"entryPoint": 7782,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 7559,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint16": {
									"entryPoint": 7965,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 7066,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 7446,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 7730,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IERC20_$877_to_t_address": {
									"entryPoint": 7156,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 7139,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 7106,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint16_to_t_uint256": {
									"entryPoint": 8586,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 7239,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 8170,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 7097,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 8326,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 8281,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 8125,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 7383,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 7279,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 7404,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 8765,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint16": {
									"entryPoint": 7978,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 7455,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:13819:12",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "52:81:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "62:65:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "77:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "84:42:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "73:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "73:54:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "34:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "44:7:12",
														"type": ""
													}
												],
												"src": "7:126:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "171:28:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "181:12:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "188:5:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "181:3:12"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "157:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "167:3:12",
														"type": ""
													}
												],
												"src": "139:60:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "265:82:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "275:66:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "333:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "315:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "315:24:12"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "306:8:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "306:34:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "288:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "288:53:12"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "275:9:12"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "245:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "255:9:12",
														"type": ""
													}
												],
												"src": "205:142:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "413:66:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "423:50:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "467:5:12"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "436:30:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "436:37:12"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "423:9:12"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "393:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "403:9:12",
														"type": ""
													}
												],
												"src": "353:126:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "559:66:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "569:50:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "613:5:12"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "582:30:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "582:37:12"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "569:9:12"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC20_$877_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "539:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "549:9:12",
														"type": ""
													}
												],
												"src": "485:140:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "710:80:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "727:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "777:5:12"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IERC20_$877_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "732:44:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "732:51:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "720:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "720:64:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "720:64:12"
														}
													]
												},
												"name": "abi_encode_t_contract$_IERC20_$877_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "698:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "705:3:12",
														"type": ""
													}
												],
												"src": "631:159:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "908:138:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "918:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "930:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "941:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "926:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "926:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "918:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1012:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1025:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1036:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1021:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1021:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC20_$877_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "954:57:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "954:85:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "954:85:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$877__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "880:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "892:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "903:4:12",
														"type": ""
													}
												],
												"src": "796:250:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1111:40:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1122:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1138:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1132:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1132:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1122:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1094:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1104:6:12",
														"type": ""
													}
												],
												"src": "1052:99:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1253:73:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1270:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1275:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1263:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1263:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1263:19:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1291:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1310:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1315:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1306:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1306:14:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "1291:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1225:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1230:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "1241:11:12",
														"type": ""
													}
												],
												"src": "1157:169:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1394:184:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1404:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1413:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1408:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1473:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1498:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1503:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1494:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1494:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "1517:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1522:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1513:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1513:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1507:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1507:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1487:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1487:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1487:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1434:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1437:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1431:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1431:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1445:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1447:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1456:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1459:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1452:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1452:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1447:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1427:3:12",
																"statements": []
															},
															"src": "1423:113:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "1556:3:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1561:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1552:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1552:16:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1570:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1545:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1545:27:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1545:27:12"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1376:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1381:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1386:6:12",
														"type": ""
													}
												],
												"src": "1332:246:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1632:54:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1642:38:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1660:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1667:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1656:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1656:14:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1676:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1672:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1672:7:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1652:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1652:28:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "1642:6:12"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1615:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "1625:6:12",
														"type": ""
													}
												],
												"src": "1584:102:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1784:285:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1794:53:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1841:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "1808:32:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1808:39:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1798:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1856:78:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1922:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1927:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1863:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1863:71:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1856:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1982:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1989:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1978:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1978:16:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1996:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2001:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "1943:34:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1943:65:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1943:65:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2017:46:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2028:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2055:6:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2033:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2033:29:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2024:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2024:39:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2017:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1765:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1772:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1780:3:12",
														"type": ""
													}
												],
												"src": "1692:377:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2193:195:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2203:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2215:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2226:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2211:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2211:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2203:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2250:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2261:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2246:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2246:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2269:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2275:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2265:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2265:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2239:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2239:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2239:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2295:86:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2367:6:12"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2376:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2303:63:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2303:78:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2295:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2165:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2177:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2188:4:12",
														"type": ""
													}
												],
												"src": "2075:313:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2434:35:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2444:19:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2460:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2454:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2454:9:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "2444:6:12"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2427:6:12",
														"type": ""
													}
												],
												"src": "2394:75:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2564:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2581:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2584:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2574:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2574:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2574:12:12"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "2475:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2687:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2704:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2707:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2697:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2697:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2697:12:12"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "2598:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2766:51:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2776:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2805:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2787:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2787:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2776:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2748:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2758:7:12",
														"type": ""
													}
												],
												"src": "2721:96:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2866:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2923:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2932:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2935:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2925:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2925:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2925:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2889:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2914:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "2896:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2896:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2886:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2886:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2879:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2879:43:12"
															},
															"nodeType": "YulIf",
															"src": "2876:63:12"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2859:5:12",
														"type": ""
													}
												],
												"src": "2823:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3003:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3013:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3035:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3022:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3022:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3013:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3078:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "3051:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3051:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3051:33:12"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2981:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2989:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2997:5:12",
														"type": ""
													}
												],
												"src": "2951:139:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3141:32:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3151:16:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3162:5:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3151:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3123:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3133:7:12",
														"type": ""
													}
												],
												"src": "3096:77:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3222:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3279:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3288:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3291:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3281:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3281:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3281:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3245:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3270:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3252:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3252:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3242:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3242:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3235:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3235:43:12"
															},
															"nodeType": "YulIf",
															"src": "3232:63:12"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3215:5:12",
														"type": ""
													}
												],
												"src": "3179:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3359:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3369:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3391:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3378:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3378:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3369:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3434:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3407:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3407:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3407:33:12"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3337:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3345:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3353:5:12",
														"type": ""
													}
												],
												"src": "3307:139:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3535:391:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3581:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3583:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3583:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3583:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3556:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3565:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3552:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3552:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3577:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3548:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3548:32:12"
															},
															"nodeType": "YulIf",
															"src": "3545:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "3674:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3689:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3703:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3693:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3718:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3753:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3764:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3749:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3749:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3773:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3728:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3728:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3718:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3801:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3816:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3830:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3820:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3846:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3881:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3892:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3877:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3877:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3901:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3856:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3856:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3846:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3497:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3508:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3520:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3528:6:12",
														"type": ""
													}
												],
												"src": "3452:474:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3974:48:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3984:32:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4009:5:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4002:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4002:13:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3995:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3995:21:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3984:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3956:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3966:7:12",
														"type": ""
													}
												],
												"src": "3932:90:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4087:50:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4104:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4124:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "4109:14:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4109:21:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4097:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4097:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4097:34:12"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4075:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4082:3:12",
														"type": ""
													}
												],
												"src": "4028:109:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4235:118:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4245:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4257:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4268:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4253:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4253:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4245:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4319:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4332:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4343:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4328:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4328:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4281:37:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4281:65:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4281:65:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4207:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4219:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4230:4:12",
														"type": ""
													}
												],
												"src": "4143:210:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4424:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4441:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4464:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4446:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4446:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4434:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4434:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4434:37:12"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4412:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4419:3:12",
														"type": ""
													}
												],
												"src": "4359:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4581:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4591:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4603:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4614:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4599:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4599:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4591:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4671:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4684:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4695:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4680:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4680:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4627:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4627:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4627:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4553:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4565:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4576:4:12",
														"type": ""
													}
												],
												"src": "4483:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4811:519:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4857:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4859:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4859:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4859:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4832:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4841:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4828:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4828:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4853:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4824:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4824:32:12"
															},
															"nodeType": "YulIf",
															"src": "4821:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "4950:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4965:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4979:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4969:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4994:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5029:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5040:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5025:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5025:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5049:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5004:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5004:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4994:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5077:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5092:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5106:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5096:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5122:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5157:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5168:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5153:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5153:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5177:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5132:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5132:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5122:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5205:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5220:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5234:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5224:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5250:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5285:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5296:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5281:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5281:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5305:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5260:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5260:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "5250:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4765:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4776:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4788:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4796:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4804:6:12",
														"type": ""
													}
												],
												"src": "4711:619:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5379:43:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5389:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5404:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5411:4:12",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5400:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5400:16:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5389:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5361:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5371:7:12",
														"type": ""
													}
												],
												"src": "5336:86:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5489:51:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5506:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5527:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "5511:15:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5511:22:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5499:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5499:35:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5499:35:12"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5477:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5484:3:12",
														"type": ""
													}
												],
												"src": "5428:112:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5640:120:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5650:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5662:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5673:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5658:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5658:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5650:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5726:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5739:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5750:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5735:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5735:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5686:39:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5686:67:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5686:67:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5612:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5624:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5635:4:12",
														"type": ""
													}
												],
												"src": "5546:214:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5819:51:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5829:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5858:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "5840:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5840:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5829:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address_payable",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5801:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5811:7:12",
														"type": ""
													}
												],
												"src": "5766:104:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5957:61:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5974:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6005:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address_payable",
																			"nodeType": "YulIdentifier",
																			"src": "5979:25:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5979:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5967:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5967:45:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5967:45:12"
														}
													]
												},
												"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5945:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5952:3:12",
														"type": ""
													}
												],
												"src": "5876:142:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6138:140:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6148:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6160:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6171:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6156:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6156:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6148:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6244:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6257:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6268:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6253:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6253:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6184:59:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6184:87:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6184:87:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6110:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6122:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6133:4:12",
														"type": ""
													}
												],
												"src": "6024:254:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6350:263:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6396:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6398:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6398:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6398:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6371:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6380:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6367:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6367:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6392:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6363:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6363:32:12"
															},
															"nodeType": "YulIf",
															"src": "6360:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "6489:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6504:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6518:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6508:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6533:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6568:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6579:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6564:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6564:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6588:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "6543:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6543:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6533:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6320:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6331:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6343:6:12",
														"type": ""
													}
												],
												"src": "6284:329:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6685:263:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6731:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6733:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6733:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6733:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6706:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6715:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6702:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6702:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6727:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6698:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6698:32:12"
															},
															"nodeType": "YulIf",
															"src": "6695:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "6824:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6839:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6853:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6843:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6868:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6903:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6914:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6899:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6899:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6923:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6878:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6868:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6655:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6666:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6678:6:12",
														"type": ""
													}
												],
												"src": "6619:329:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7019:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7036:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7059:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "7041:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7041:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7029:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7029:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7029:37:12"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7007:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7014:3:12",
														"type": ""
													}
												],
												"src": "6954:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7176:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7186:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7198:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7209:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7194:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7194:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7186:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7266:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7279:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7290:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7275:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7275:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7222:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7222:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7222:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7148:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7160:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7171:4:12",
														"type": ""
													}
												],
												"src": "7078:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7350:45:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7360:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7375:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7382:6:12",
																		"type": "",
																		"value": "0xffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "7371:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7371:18:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "7360:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7332:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "7342:7:12",
														"type": ""
													}
												],
												"src": "7306:89:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7443:78:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7499:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7508:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7511:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7501:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7501:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7501:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7466:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7490:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint16",
																					"nodeType": "YulIdentifier",
																					"src": "7473:16:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7473:23:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "7463:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7463:34:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7456:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7456:42:12"
															},
															"nodeType": "YulIf",
															"src": "7453:62:12"
														}
													]
												},
												"name": "validator_revert_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7436:5:12",
														"type": ""
													}
												],
												"src": "7401:120:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7578:86:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7588:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7610:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "7597:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7597:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7588:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7652:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint16",
																	"nodeType": "YulIdentifier",
																	"src": "7626:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7626:32:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7626:32:12"
														}
													]
												},
												"name": "abi_decode_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7556:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7564:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7572:5:12",
														"type": ""
													}
												],
												"src": "7527:137:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7735:262:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7781:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "7783:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7783:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7783:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7756:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7765:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7752:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7752:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7777:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7748:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7748:32:12"
															},
															"nodeType": "YulIf",
															"src": "7745:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "7874:116:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7889:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7903:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7893:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7918:62:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7952:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7963:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7948:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7948:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7972:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16",
																			"nodeType": "YulIdentifier",
																			"src": "7928:19:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7928:52:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "7918:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7705:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7716:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7728:6:12",
														"type": ""
													}
												],
												"src": "7670:327:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8086:391:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8132:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "8134:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8134:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8134:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8107:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8116:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8103:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8103:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8128:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8099:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8099:32:12"
															},
															"nodeType": "YulIf",
															"src": "8096:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "8225:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8240:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8254:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8244:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8269:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8304:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8315:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8300:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8300:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8324:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "8279:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8279:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "8269:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8352:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8367:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8381:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8371:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8397:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8432:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8443:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8428:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8428:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8452:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "8407:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8407:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "8397:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8048:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8059:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8071:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8079:6:12",
														"type": ""
													}
												],
												"src": "8003:474:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8511:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8528:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8531:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8521:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8521:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8521:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8625:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8628:4:12",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8618:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8618:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8618:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8649:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8652:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8642:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8642:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8642:15:12"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "8483:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8720:269:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8730:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "8744:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8750:1:12",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "8740:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8740:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "8730:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8761:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "8791:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8797:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "8787:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8787:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "8765:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8838:51:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8852:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "8866:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8874:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "8862:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8862:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8852:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "8818:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8811:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8811:26:12"
															},
															"nodeType": "YulIf",
															"src": "8808:81:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8941:42:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "8955:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8955:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8955:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "8905:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8928:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8936:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "8925:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8925:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "8902:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8902:38:12"
															},
															"nodeType": "YulIf",
															"src": "8899:84:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "8704:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8713:6:12",
														"type": ""
													}
												],
												"src": "8669:320:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9058:80:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9068:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "9083:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9077:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9077:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "9068:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9126:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9099:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9099:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9099:33:12"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "9036:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9044:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9052:5:12",
														"type": ""
													}
												],
												"src": "8995:143:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9221:274:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9267:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "9269:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9269:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9269:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9242:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9251:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9238:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9238:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9263:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9234:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9234:32:12"
															},
															"nodeType": "YulIf",
															"src": "9231:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "9360:128:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9375:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9389:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9379:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9404:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9450:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9461:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9446:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9446:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9470:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "9414:31:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9414:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "9404:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9191:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9202:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9214:6:12",
														"type": ""
													}
												],
												"src": "9144:351:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9529:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9546:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9549:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9539:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9539:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9539:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9643:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9646:4:12",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9636:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9636:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9636:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9667:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9670:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9660:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9660:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9660:15:12"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "9501:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9715:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9732:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9735:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9725:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9725:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9725:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9829:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9832:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9822:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9822:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9822:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9853:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9856:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9846:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9846:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9846:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "9687:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9915:143:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9925:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9948:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9930:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9930:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "9925:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9959:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9982:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9964:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9964:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "9959:1:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10006:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "10008:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10008:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10008:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10003:1:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9996:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9996:9:12"
															},
															"nodeType": "YulIf",
															"src": "9993:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10038:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10047:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10050:1:12"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10043:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10043:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "10038:1:12"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9904:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9907:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "9913:1:12",
														"type": ""
													}
												],
												"src": "9873:185:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10109:149:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10119:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10142:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10124:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10124:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "10119:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10153:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10176:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10158:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10158:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "10153:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10187:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10199:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10202:1:12"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10195:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10195:9:12"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "10187:4:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10229:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10231:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10231:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10231:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "10220:4:12"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10226:1:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10217:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10217:11:12"
															},
															"nodeType": "YulIf",
															"src": "10214:37:12"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10095:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10098:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "10104:4:12",
														"type": ""
													}
												],
												"src": "10064:194:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10308:147:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10318:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10341:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10323:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10323:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "10318:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10352:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10375:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10357:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10357:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "10352:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10386:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10397:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10400:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10393:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10393:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "10386:3:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10426:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10428:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10428:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10428:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10418:1:12"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "10421:3:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10415:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10415:10:12"
															},
															"nodeType": "YulIf",
															"src": "10412:36:12"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10295:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10298:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "10304:3:12",
														"type": ""
													}
												],
												"src": "10264:191:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10509:362:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10519:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10542:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10524:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10524:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "10519:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10553:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10576:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10558:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10558:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "10553:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10587:28:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10610:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10613:1:12"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "10606:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10606:9:12"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nodeType": "YulTypedName",
																	"src": "10591:11:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10624:41:12",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nodeType": "YulIdentifier",
																		"src": "10653:11:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10635:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10635:30:12"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "10624:7:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10842:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10844:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10844:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10844:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "10775:1:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "10768:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10768:9:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "10798:1:12"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "10805:7:12"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "10814:1:12"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "10801:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10801:15:12"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "10795:2:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10795:22:12"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "10748:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10748:83:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10728:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10728:113:12"
															},
															"nodeType": "YulIf",
															"src": "10725:139:12"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10492:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10495:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "10501:7:12",
														"type": ""
													}
												],
												"src": "10461:410:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10936:81:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10946:65:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11003:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint16",
																					"nodeType": "YulIdentifier",
																					"src": "10986:16:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10986:23:12"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "10977:8:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10977:33:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10959:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10959:52:12"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "10946:9:12"
																}
															]
														}
													]
												},
												"name": "convert_t_uint16_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10916:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "10926:9:12",
														"type": ""
													}
												],
												"src": "10877:140:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11087:65:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11104:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11139:5:12"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_uint16_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "11109:29:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11109:36:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11097:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11097:49:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11097:49:12"
														}
													]
												},
												"name": "abi_encode_t_uint16_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11075:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11082:3:12",
														"type": ""
													}
												],
												"src": "11023:129:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11255:123:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11265:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11277:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11288:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11273:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11273:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11265:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11344:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11357:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11368:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11353:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11353:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint16_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11301:42:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11301:70:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11301:70:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint16__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11227:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11239:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11250:4:12",
														"type": ""
													}
												],
												"src": "11158:220:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11538:288:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11548:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11560:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11571:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11556:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11556:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11548:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11628:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11641:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11652:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11637:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11637:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11584:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11584:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11584:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11709:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11722:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11733:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11718:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11718:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11665:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11665:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11665:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "11791:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11804:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11815:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11800:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11800:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11747:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11747:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11747:72:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11494:9:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "11506:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11514:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11522:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11533:4:12",
														"type": ""
													}
												],
												"src": "11384:442:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11986:288:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11996:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12008:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12019:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12004:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12004:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11996:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12076:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12089:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12100:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12085:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12085:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12032:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12032:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12032:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "12157:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12170:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12181:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12166:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12166:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12113:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12113:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12113:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12239:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12252:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12263:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12248:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12248:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12195:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12195:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12195:72:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11942:9:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "11954:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11962:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11970:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11981:4:12",
														"type": ""
													}
												],
												"src": "11832:442:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12320:76:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12374:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12383:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12386:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12376:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12376:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12376:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12343:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12365:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "12350:14:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12350:21:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12340:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12340:32:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12333:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12333:40:12"
															},
															"nodeType": "YulIf",
															"src": "12330:60:12"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12313:5:12",
														"type": ""
													}
												],
												"src": "12280:116:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12462:77:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12472:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "12487:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12481:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12481:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "12472:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12527:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "12503:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12503:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12503:30:12"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "12440:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12448:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12456:5:12",
														"type": ""
													}
												],
												"src": "12402:137:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12619:271:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12665:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "12667:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12667:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12667:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12640:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12649:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12636:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12636:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12661:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "12632:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12632:32:12"
															},
															"nodeType": "YulIf",
															"src": "12629:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "12758:125:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "12773:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12787:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "12777:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "12802:71:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "12845:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "12856:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "12841:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12841:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12865:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "12812:28:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12812:61:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "12802:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12589:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "12600:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12612:6:12",
														"type": ""
													}
												],
												"src": "12545:345:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12954:40:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12965:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12981:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12975:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12975:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "12965:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12937:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "12947:6:12",
														"type": ""
													}
												],
												"src": "12896:98:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13113:34:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13123:18:12",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "13138:3:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "13123:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13085:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13090:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "13101:11:12",
														"type": ""
													}
												],
												"src": "13000:147:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13261:278:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13271:52:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13317:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "13285:31:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13285:38:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "13275:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13332:95:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13415:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13420:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13339:75:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13339:88:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13332:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13475:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13482:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13471:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13471:16:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13489:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13494:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "13436:34:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13436:65:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13436:65:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13510:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13521:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13526:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13517:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13517:16:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13510:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13242:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13249:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13257:3:12",
														"type": ""
													}
												],
												"src": "13153:386:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13679:137:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13690:100:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13777:6:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13786:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13697:79:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13697:93:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13690:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13800:10:12",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "13807:3:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13800:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13658:3:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13664:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13675:3:12",
														"type": ""
													}
												],
												"src": "13545:271:12"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC20_$877_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20_$877_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$877_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$877__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20_$877_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function abi_decode_tuple_t_uint16(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function convert_t_uint16_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint16(value)))\n    }\n\n    function abi_encode_t_uint16_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint16_to_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint16__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint16_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1654": [
									{
										"length": 32,
										"start": 1426
									},
									{
										"length": 32,
										"start": 1648
									},
									{
										"length": 32,
										"start": 2097
									},
									{
										"length": 32,
										"start": 2960
									},
									{
										"length": 32,
										"start": 3026
									},
									{
										"length": 32,
										"start": 3551
									},
									{
										"length": 32,
										"start": 3628
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50600436106101d8575f3560e01c806379cc679011610102578063a88df21a116100a0578063dd62ed3e1161006f578063dd62ed3e1461050a578063eb2cd2581461053a578063f2fde38b14610558578063f40fa4bc14610574576101d8565b8063a88df21a14610486578063a9059cbb146104a2578063c38f2bfe146104d2578063db006a75146104ee576101d8565b80638da5cb5b116100dc5780638da5cb5b146103fc57806392054fe71461041a57806395d89b4114610438578063a492fbc614610456576101d8565b806379cc6790146103a65780638705fcd4146103c25780638b7b23ee146103de576101d8565b8063313ce5671161017a57806342966c681161014957806342966c6814610320578063559e775b1461033c57806370a082311461036c578063715018a61461039c576101d8565b8063313ce567146102be57806335975a37146102dc57806340c10f19146102e65780634127535814610302576101d8565b806316f9b467116101b657806316f9b4671461024857806318160ddd1461025257806319f041741461027057806323b872dd1461028e576101d8565b8063029cd242146101dc57806306fdde03146101fa578063095ea7b314610218575b5f80fd5b6101e4610590565b6040516101f19190611c14565b60405180910390f35b6102026105b4565b60405161020f9190611cb7565b60405180910390f35b610232600480360381019061022d9190611d49565b610644565b60405161023f9190611da1565b60405180910390f35b610250610666565b005b61025a61073b565b6040516102679190611dc9565b60405180910390f35b610278610744565b6040516102859190611dc9565b60405180910390f35b6102a860048036038101906102a39190611de2565b61074d565b6040516102b59190611da1565b60405180910390f35b6102c661077b565b6040516102d39190611e4d565b60405180910390f35b6102e4610783565b005b61030060048036038101906102fb9190611d49565b6107a8565b005b61030a6108da565b6040516103179190611e86565b60405180910390f35b61033a60048036038101906103359190611e9f565b6108ff565b005b61035660048036038101906103519190611e9f565b610913565b6040516103639190611dc9565b60405180910390f35b61038660048036038101906103819190611eca565b610955565b6040516103939190611dc9565b60405180910390f35b6103a461099a565b005b6103c060048036038101906103bb9190611d49565b6109ad565b005b6103dc60048036038101906103d79190611eca565b6109cd565b005b6103e6610a64565b6040516103f39190611dc9565b60405180910390f35b610404610a6a565b6040516104119190611f04565b60405180910390f35b610422610a92565b60405161042f9190611dc9565b60405180910390f35b610440610a98565b60405161044d9190611cb7565b60405180910390f35b610470600480360381019061046b9190611e9f565b610b28565b60405161047d9190611dc9565b60405180910390f35b6104a0600480360381019061049b9190611e9f565b610b6a565b005b6104bc60048036038101906104b79190611d49565b610c71565b6040516104c99190611da1565b60405180910390f35b6104ec60048036038101906104e79190611f54565b610c93565b005b61050860048036038101906105039190611e9f565b610d2e565b005b610524600480360381019061051f9190611f7f565b610e90565b6040516105319190611dc9565b60405180910390f35b610542610f12565b60405161054f9190611dc9565b60405180910390f35b610572600480360381019061056d9190611eca565b610f18565b005b61058e60048036038101906105899190611f54565b610f9c565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600380546105c390611fea565b80601f01602080910402602001604051908101604052809291908181526020018280546105ef90611fea565b801561063a5780601f106106115761010080835404028352916020019161063a565b820191905f5260205f20905b81548152906001019060200180831161061d57829003601f168201915b5050505050905090565b5f8061064e611039565b905061065b818585611040565b600191505092915050565b61066e611052565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106c79190611f04565b602060405180830381865afa1580156106e2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610706919061202e565b600981905550477fa3faf2f1eb729d9e646e40f512a8458c02057ee480d3b576a37e8a8ab30f055560405160405180910390a2565b5f600254905090565b5f600954905090565b5f80610757611039565b90506107648582856110d9565b61076f85858561116b565b60019150509392505050565b5f6012905090565b61078b611052565b6001600a60146101000a81548160ff021916908315150217905550565b6107b061125b565b6103e88110156107ec576040517f2b4db67a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6107f6826112a1565b90505f6008548361080791906120b3565b9050808361081591906120e3565b60095f8282546108259190612116565b925050819055506108797f000000000000000000000000000000000000000000000000000000000000000033600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846112c9565b61089d846103e86007548561088e9190612149565b61089891906120b3565b61134b565b8282427f079d4fba3fc168dbd2a0c2a5235112b3442d90a21282f7b69506d05a46fdbbb760405160405180910390a450506108d66113ca565b5050565b600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61091061090a611039565b826113d4565b50565b5f6103e860095460075461092561073b565b856109309190612149565b61093a9190612149565b61094491906120b3565b61094e91906120b3565b9050919050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6109a2611052565b6109ab5f611453565b565b6109bf826109b9611039565b836110d9565b6109c982826113d4565b5050565b6109d5611052565b6109de81611516565b80600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f446e39bcf1b47cfadfaa23442cb4b34682cfe6bd9220da084894e3b1f834e4f360405160405180910390a250565b60085481565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b606060048054610aa790611fea565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad390611fea565b8015610b1e5780601f10610af557610100808354040283529160200191610b1e565b820191905f5260205f20905b815481529060010190602001808311610b0157829003601f168201915b5050505050905090565b5f6103e8610b3461073b565b60075460095485610b459190612149565b610b4f9190612149565b610b5991906120b3565b610b6391906120b3565b9050919050565b610b72611052565b600a60149054906101000a900460ff1615610b8b575f80fd5b610bb77f00000000000000000000000000000000000000000000000000000000000000003330846112c9565b610bc1338261134b565b610bcf61dead6103e8610c71565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c299190611f04565b602060405180830381865afa158015610c44573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c68919061202e565b60098190555050565b5f80610c7b611039565b9050610c8881858561116b565b600191505092915050565b610c9b611052565b60648161ffff161180610cb2575060198161ffff16105b15610ce9576040517f7f176cee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061ffff166008819055507f9de4e85041d310d87df38a671e7ecf270c37d73ea017960b904af7051205962181604051610d2391906121ba565b60405180910390a150565b610d3661125b565b6103e8811015610d72576040517f2b4db67a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610d7c82611546565b90505f60085483610d8d91906120b3565b90505f6103e860075485610da19190612149565b610dab91906120b3565b90508181610db99190612116565b60095f828254610dc991906120e3565b92505081905550610dda33846113d4565b610e277f000000000000000000000000000000000000000000000000000000000000000030600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856112c9565b610e537f00000000000000000000000000000000000000000000000000000000000000003033846112c9565b8383427f1be07ad598d802b0a04e208e5f3dfe7eaf27339c0f0e4a75ddba517bbe5c8f3660405160405180910390a4505050610e8d6113ca565b50565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b60095481565b610f20611052565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f90575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610f879190611f04565b60405180910390fd5b610f9981611453565b50565b610fa4611052565b6103d48161ffff161180610fbd57506103b68161ffff16105b15610ff4576040517f48565ad500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061ffff166007819055507fa7aaf5668e7d5e60bfa38b5d07a3178204a2d8cb16f5a03678c20f42c79542958160405161102e91906121ba565b60405180910390a150565b5f33905090565b61104d838383600161156e565b505050565b61105a611039565b73ffffffffffffffffffffffffffffffffffffffff16611078610a6a565b73ffffffffffffffffffffffffffffffffffffffff16146110d75761109b611039565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016110ce9190611f04565b60405180910390fd5b565b5f6110e48484610e90565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146111655781811015611156578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161114d939291906121d3565b60405180910390fd5b61116484848484035f61156e565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111db575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016111d29190611f04565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361124b575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016112429190611f04565b60405180910390fd5b61125683838361173d565b505050565b600260065403611297576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b5f6009546112ad61073b565b836112b89190612149565b6112c291906120b3565b9050919050565b611345848573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016112fe93929190612208565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611956565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113bb575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016113b29190611f04565b60405180910390fd5b6113c65f838361173d565b5050565b6001600681905550565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611444575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161143b9190611f04565b60405180910390fd5b61144f825f8361173d565b5050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80611543577f5a65726f206164647265737300000000000000000000000000000000000000005f5260205ffd5b50565b5f61154f61073b565b6009548361155d9190612149565b61156791906120b3565b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115de575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016115d59190611f04565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361164e575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016116459190611f04565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611737578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161172e9190611dc9565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361178d578060025f8282546117819190612116565b9250508190555061185b565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611816578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161180d939291906121d3565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118a2578060025f82825403925050819055506118ec565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516119499190611dc9565b60405180910390a3505050565b5f611980828473ffffffffffffffffffffffffffffffffffffffff166119eb90919063ffffffff16565b90505f8151141580156119a45750808060200190518101906119a29190612267565b155b156119e657826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016119dd9190611f04565b60405180910390fd5b505050565b60606119f883835f611a00565b905092915050565b606081471015611a4757306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611a3e9190611f04565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff168486604051611a6f91906122d6565b5f6040518083038185875af1925050503d805f8114611aa9576040519150601f19603f3d011682016040523d82523d5f602084013e611aae565b606091505b5091509150611abe868383611ac9565b925050509392505050565b606082611ade57611ad982611b56565b611b4e565b5f8251148015611b0457505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611b4657836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611b3d9190611f04565b60405180910390fd5b819050611b4f565b5b9392505050565b5f81511115611b685780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f611bdc611bd7611bd284611b9a565b611bb9565b611b9a565b9050919050565b5f611bed82611bc2565b9050919050565b5f611bfe82611be3565b9050919050565b611c0e81611bf4565b82525050565b5f602082019050611c275f830184611c05565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611c64578082015181840152602081019050611c49565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611c8982611c2d565b611c938185611c37565b9350611ca3818560208601611c47565b611cac81611c6f565b840191505092915050565b5f6020820190508181035f830152611ccf8184611c7f565b905092915050565b5f80fd5b5f611ce582611b9a565b9050919050565b611cf581611cdb565b8114611cff575f80fd5b50565b5f81359050611d1081611cec565b92915050565b5f819050919050565b611d2881611d16565b8114611d32575f80fd5b50565b5f81359050611d4381611d1f565b92915050565b5f8060408385031215611d5f57611d5e611cd7565b5b5f611d6c85828601611d02565b9250506020611d7d85828601611d35565b9150509250929050565b5f8115159050919050565b611d9b81611d87565b82525050565b5f602082019050611db45f830184611d92565b92915050565b611dc381611d16565b82525050565b5f602082019050611ddc5f830184611dba565b92915050565b5f805f60608486031215611df957611df8611cd7565b5b5f611e0686828701611d02565b9350506020611e1786828701611d02565b9250506040611e2886828701611d35565b9150509250925092565b5f60ff82169050919050565b611e4781611e32565b82525050565b5f602082019050611e605f830184611e3e565b92915050565b5f611e7082611b9a565b9050919050565b611e8081611e66565b82525050565b5f602082019050611e995f830184611e77565b92915050565b5f60208284031215611eb457611eb3611cd7565b5b5f611ec184828501611d35565b91505092915050565b5f60208284031215611edf57611ede611cd7565b5b5f611eec84828501611d02565b91505092915050565b611efe81611cdb565b82525050565b5f602082019050611f175f830184611ef5565b92915050565b5f61ffff82169050919050565b611f3381611f1d565b8114611f3d575f80fd5b50565b5f81359050611f4e81611f2a565b92915050565b5f60208284031215611f6957611f68611cd7565b5b5f611f7684828501611f40565b91505092915050565b5f8060408385031215611f9557611f94611cd7565b5b5f611fa285828601611d02565b9250506020611fb385828601611d02565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061200157607f821691505b60208210810361201457612013611fbd565b5b50919050565b5f8151905061202881611d1f565b92915050565b5f6020828403121561204357612042611cd7565b5b5f6120508482850161201a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6120bd82611d16565b91506120c883611d16565b9250826120d8576120d7612059565b5b828204905092915050565b5f6120ed82611d16565b91506120f883611d16565b92508282039050818111156121105761210f612086565b5b92915050565b5f61212082611d16565b915061212b83611d16565b925082820190508082111561214357612142612086565b5b92915050565b5f61215382611d16565b915061215e83611d16565b925082820261216c81611d16565b9150828204841483151761218357612182612086565b5b5092915050565b5f6121a461219f61219a84611f1d565b611bb9565b611d16565b9050919050565b6121b48161218a565b82525050565b5f6020820190506121cd5f8301846121ab565b92915050565b5f6060820190506121e65f830186611ef5565b6121f36020830185611dba565b6122006040830184611dba565b949350505050565b5f60608201905061221b5f830186611ef5565b6122286020830185611ef5565b6122356040830184611dba565b949350505050565b61224681611d87565b8114612250575f80fd5b50565b5f815190506122618161223d565b92915050565b5f6020828403121561227c5761227b611cd7565b5b5f61228984828501612253565b91505092915050565b5f81519050919050565b5f81905092915050565b5f6122b082612292565b6122ba818561229c565b93506122ca818560208601611c47565b80840191505092915050565b5f6122e182846122a6565b91508190509291505056fea264697066735822122021f293dd8c949a1e75cea771275a9fdf34eb94db78f4c7618c2a6e239766a10164736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D8 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xA88DF21A GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x50A JUMPI DUP1 PUSH4 0xEB2CD258 EQ PUSH2 0x53A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x558 JUMPI DUP1 PUSH4 0xF40FA4BC EQ PUSH2 0x574 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0xA88DF21A EQ PUSH2 0x486 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0xC38F2BFE EQ PUSH2 0x4D2 JUMPI DUP1 PUSH4 0xDB006A75 EQ PUSH2 0x4EE JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0x92054FE7 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xA492FBC6 EQ PUSH2 0x456 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x8705FCD4 EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0x8B7B23EE EQ PUSH2 0x3DE JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x42966C68 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x559E775B EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x39C JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0x35975A37 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x41275358 EQ PUSH2 0x302 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x16F9B467 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x16F9B467 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0x19F04174 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x28E JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x29CD242 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x218 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1E4 PUSH2 0x590 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F1 SWAP2 SWAP1 PUSH2 0x1C14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x202 PUSH2 0x5B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x1CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x232 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22D SWAP2 SWAP1 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0x644 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23F SWAP2 SWAP1 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x250 PUSH2 0x666 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH2 0x73B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x267 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x278 PUSH2 0x744 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x285 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0x1DE2 JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B5 SWAP2 SWAP1 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C6 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D3 SWAP2 SWAP1 PUSH2 0x1E4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E4 PUSH2 0x783 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x300 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0x7A8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30A PUSH2 0x8DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x1E86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0x8FF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x356 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x351 SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0x913 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x386 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x1ECA JUMP JUMPDEST PUSH2 0x955 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x393 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A4 PUSH2 0x99A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0x9AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D7 SWAP2 SWAP1 PUSH2 0x1ECA JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E6 PUSH2 0xA64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F3 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x404 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x422 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x42F SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x440 PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x44D SWAP2 SWAP1 PUSH2 0x1CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x470 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0xB28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x47D SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x49B SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0xB6A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0xC93 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x508 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x503 SWAP2 SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH2 0xD2E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x524 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x51F SWAP2 SWAP1 PUSH2 0x1F7F JUMP JUMPDEST PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x531 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x542 PUSH2 0xF12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x572 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x56D SWAP2 SWAP1 PUSH2 0x1ECA JUMP JUMPDEST PUSH2 0xF18 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x589 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0xF9C JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x5C3 SWAP1 PUSH2 0x1FEA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5EF SWAP1 PUSH2 0x1FEA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x63A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x611 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x63A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x61D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x64E PUSH2 0x1039 JUMP JUMPDEST SWAP1 POP PUSH2 0x65B DUP2 DUP6 DUP6 PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x66E PUSH2 0x1052 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6C7 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6E2 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x706 SWAP2 SWAP1 PUSH2 0x202E JUMP JUMPDEST PUSH1 0x9 DUP2 SWAP1 SSTORE POP SELFBALANCE PUSH32 0xA3FAF2F1EB729D9E646E40F512A8458C02057EE480D3B576A37E8A8AB30F0555 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x9 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x757 PUSH2 0x1039 JUMP JUMPDEST SWAP1 POP PUSH2 0x764 DUP6 DUP3 DUP6 PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x76F DUP6 DUP6 DUP6 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x78B PUSH2 0x1052 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x7B0 PUSH2 0x125B JUMP JUMPDEST PUSH2 0x3E8 DUP2 LT ISZERO PUSH2 0x7EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B4DB67A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x7F6 DUP3 PUSH2 0x12A1 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x8 SLOAD DUP4 PUSH2 0x807 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH2 0x815 SWAP2 SWAP1 PUSH2 0x20E3 JUMP JUMPDEST PUSH1 0x9 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x825 SWAP2 SWAP1 PUSH2 0x2116 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x879 PUSH32 0x0 CALLER PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x12C9 JUMP JUMPDEST PUSH2 0x89D DUP5 PUSH2 0x3E8 PUSH1 0x7 SLOAD DUP6 PUSH2 0x88E SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x898 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x134B JUMP JUMPDEST DUP3 DUP3 TIMESTAMP PUSH32 0x79D4FBA3FC168DBD2A0C2A5235112B3442D90A21282F7B69506D05A46FDBBB7 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x8D6 PUSH2 0x13CA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x910 PUSH2 0x90A PUSH2 0x1039 JUMP JUMPDEST DUP3 PUSH2 0x13D4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0x3E8 PUSH1 0x9 SLOAD PUSH1 0x7 SLOAD PUSH2 0x925 PUSH2 0x73B JUMP JUMPDEST DUP6 PUSH2 0x930 SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x93A SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x944 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x94E SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9A2 PUSH2 0x1052 JUMP JUMPDEST PUSH2 0x9AB PUSH0 PUSH2 0x1453 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x9BF DUP3 PUSH2 0x9B9 PUSH2 0x1039 JUMP JUMPDEST DUP4 PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x9C9 DUP3 DUP3 PUSH2 0x13D4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x9D5 PUSH2 0x1052 JUMP JUMPDEST PUSH2 0x9DE DUP2 PUSH2 0x1516 JUMP JUMPDEST DUP1 PUSH1 0xA PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x446E39BCF1B47CFADFAA23442CB4B34682CFE6BD9220DA084894E3B1F834E4F3 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0xAA7 SWAP1 PUSH2 0x1FEA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAD3 SWAP1 PUSH2 0x1FEA JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB1E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAF5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB1E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB01 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x3E8 PUSH2 0xB34 PUSH2 0x73B JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x9 SLOAD DUP6 PUSH2 0xB45 SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0xB4F SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0xB59 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0xB63 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB72 PUSH2 0x1052 JUMP JUMPDEST PUSH1 0xA PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xB8B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xBB7 PUSH32 0x0 CALLER ADDRESS DUP5 PUSH2 0x12C9 JUMP JUMPDEST PUSH2 0xBC1 CALLER DUP3 PUSH2 0x134B JUMP JUMPDEST PUSH2 0xBCF PUSH2 0xDEAD PUSH2 0x3E8 PUSH2 0xC71 JUMP JUMPDEST POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC29 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC44 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC68 SWAP2 SWAP1 PUSH2 0x202E JUMP JUMPDEST PUSH1 0x9 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xC7B PUSH2 0x1039 JUMP JUMPDEST SWAP1 POP PUSH2 0xC88 DUP2 DUP6 DUP6 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC9B PUSH2 0x1052 JUMP JUMPDEST PUSH1 0x64 DUP2 PUSH2 0xFFFF AND GT DUP1 PUSH2 0xCB2 JUMPI POP PUSH1 0x19 DUP2 PUSH2 0xFFFF AND LT JUMPDEST ISZERO PUSH2 0xCE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7F176CEE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0xFFFF AND PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH32 0x9DE4E85041D310D87DF38A671E7ECF270C37D73EA017960B904AF70512059621 DUP2 PUSH1 0x40 MLOAD PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x21BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xD36 PUSH2 0x125B JUMP JUMPDEST PUSH2 0x3E8 DUP2 LT ISZERO PUSH2 0xD72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B4DB67A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xD7C DUP3 PUSH2 0x1546 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x8 SLOAD DUP4 PUSH2 0xD8D SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x3E8 PUSH1 0x7 SLOAD DUP6 PUSH2 0xDA1 SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0xDAB SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 PUSH2 0xDB9 SWAP2 SWAP1 PUSH2 0x2116 JUMP JUMPDEST PUSH1 0x9 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xDC9 SWAP2 SWAP1 PUSH2 0x20E3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xDDA CALLER DUP5 PUSH2 0x13D4 JUMP JUMPDEST PUSH2 0xE27 PUSH32 0x0 ADDRESS PUSH1 0xA PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x12C9 JUMP JUMPDEST PUSH2 0xE53 PUSH32 0x0 ADDRESS CALLER DUP5 PUSH2 0x12C9 JUMP JUMPDEST DUP4 DUP4 TIMESTAMP PUSH32 0x1BE07AD598D802B0A04E208E5F3DFE7EAF27339C0F0E4A75DDBA517BBE5C8F36 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP PUSH2 0xE8D PUSH2 0x13CA JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xF20 PUSH2 0x1052 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF90 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF87 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF99 DUP2 PUSH2 0x1453 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xFA4 PUSH2 0x1052 JUMP JUMPDEST PUSH2 0x3D4 DUP2 PUSH2 0xFFFF AND GT DUP1 PUSH2 0xFBD JUMPI POP PUSH2 0x3B6 DUP2 PUSH2 0xFFFF AND LT JUMPDEST ISZERO PUSH2 0xFF4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x48565AD500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0xFFFF AND PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH32 0xA7AAF5668E7D5E60BFA38B5D07A3178204A2D8CB16F5A03678C20F42C7954295 DUP2 PUSH1 0x40 MLOAD PUSH2 0x102E SWAP2 SWAP1 PUSH2 0x21BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x104D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x156E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x105A PUSH2 0x1039 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1078 PUSH2 0xA6A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x10D7 JUMPI PUSH2 0x109B PUSH2 0x1039 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10CE SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH2 0x10E4 DUP5 DUP5 PUSH2 0xE90 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x1165 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x1156 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x114D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1164 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x156E JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11DB JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11D2 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x124B JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1242 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1256 DUP4 DUP4 DUP4 PUSH2 0x173D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x6 SLOAD SUB PUSH2 0x1297 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 PUSH1 0x9 SLOAD PUSH2 0x12AD PUSH2 0x73B JUMP JUMPDEST DUP4 PUSH2 0x12B8 SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x12C2 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1345 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x12FE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2208 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1956 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13BB JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B2 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13C6 PUSH0 DUP4 DUP4 PUSH2 0x173D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1444 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x143B SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x144F DUP3 PUSH0 DUP4 PUSH2 0x173D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 PUSH2 0x1543 JUMPI PUSH32 0x5A65726F20616464726573730000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x20 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0x154F PUSH2 0x73B JUMP JUMPDEST PUSH1 0x9 SLOAD DUP4 PUSH2 0x155D SWAP2 SWAP1 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x1567 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15DE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D5 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x164E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1645 SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1737 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x172E SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x178D JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1781 SWAP2 SWAP1 PUSH2 0x2116 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x185B JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x1816 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x180D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x18A2 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x18EC JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1949 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1980 DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x19EB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD EQ ISZERO DUP1 ISZERO PUSH2 0x19A4 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x19A2 SWAP2 SWAP1 PUSH2 0x2267 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x19E6 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19DD SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19F8 DUP4 DUP4 PUSH0 PUSH2 0x1A00 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x1A47 JUMPI ADDRESS PUSH1 0x40 MLOAD PUSH32 0xCD78605900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3E SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1A6F SWAP2 SWAP1 PUSH2 0x22D6 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1AA9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AAE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1ABE DUP7 DUP4 DUP4 PUSH2 0x1AC9 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x1ADE JUMPI PUSH2 0x1AD9 DUP3 PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1B4E JUMP JUMPDEST PUSH0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x1B04 JUMPI POP PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x1B46 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3D SWAP2 SWAP1 PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x1B4F JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1B68 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BDC PUSH2 0x1BD7 PUSH2 0x1BD2 DUP5 PUSH2 0x1B9A JUMP JUMPDEST PUSH2 0x1BB9 JUMP JUMPDEST PUSH2 0x1B9A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BED DUP3 PUSH2 0x1BC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BFE DUP3 PUSH2 0x1BE3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C0E DUP2 PUSH2 0x1BF4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C27 PUSH0 DUP4 ADD DUP5 PUSH2 0x1C05 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C64 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1C49 JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1C89 DUP3 PUSH2 0x1C2D JUMP JUMPDEST PUSH2 0x1C93 DUP2 DUP6 PUSH2 0x1C37 JUMP JUMPDEST SWAP4 POP PUSH2 0x1CA3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1C47 JUMP JUMPDEST PUSH2 0x1CAC DUP2 PUSH2 0x1C6F JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1CCF DUP2 DUP5 PUSH2 0x1C7F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH2 0x1CE5 DUP3 PUSH2 0x1B9A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CF5 DUP2 PUSH2 0x1CDB JUMP JUMPDEST DUP2 EQ PUSH2 0x1CFF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D10 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D28 DUP2 PUSH2 0x1D16 JUMP JUMPDEST DUP2 EQ PUSH2 0x1D32 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D43 DUP2 PUSH2 0x1D1F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D5F JUMPI PUSH2 0x1D5E PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1D6C DUP6 DUP3 DUP7 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D7D DUP6 DUP3 DUP7 ADD PUSH2 0x1D35 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D9B DUP2 PUSH2 0x1D87 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DB4 PUSH0 DUP4 ADD DUP5 PUSH2 0x1D92 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DC3 DUP2 PUSH2 0x1D16 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DDC PUSH0 DUP4 ADD DUP5 PUSH2 0x1DBA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DF9 JUMPI PUSH2 0x1DF8 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E06 DUP7 DUP3 DUP8 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1E17 DUP7 DUP3 DUP8 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1E28 DUP7 DUP3 DUP8 ADD PUSH2 0x1D35 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E47 DUP2 PUSH2 0x1E32 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1E60 PUSH0 DUP4 ADD DUP5 PUSH2 0x1E3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1E70 DUP3 PUSH2 0x1B9A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E80 DUP2 PUSH2 0x1E66 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1E99 PUSH0 DUP4 ADD DUP5 PUSH2 0x1E77 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EB4 JUMPI PUSH2 0x1EB3 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EC1 DUP5 DUP3 DUP6 ADD PUSH2 0x1D35 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EDF JUMPI PUSH2 0x1EDE PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EEC DUP5 DUP3 DUP6 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1EFE DUP2 PUSH2 0x1CDB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F17 PUSH0 DUP4 ADD DUP5 PUSH2 0x1EF5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F33 DUP2 PUSH2 0x1F1D JUMP JUMPDEST DUP2 EQ PUSH2 0x1F3D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1F4E DUP2 PUSH2 0x1F2A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F69 JUMPI PUSH2 0x1F68 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F76 DUP5 DUP3 DUP6 ADD PUSH2 0x1F40 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F95 JUMPI PUSH2 0x1F94 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FA2 DUP6 DUP3 DUP7 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1FB3 DUP6 DUP3 DUP7 ADD PUSH2 0x1D02 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2001 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2014 JUMPI PUSH2 0x2013 PUSH2 0x1FBD JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2028 DUP2 PUSH2 0x1D1F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2043 JUMPI PUSH2 0x2042 PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2050 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x20BD DUP3 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP PUSH2 0x20C8 DUP4 PUSH2 0x1D16 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x20D8 JUMPI PUSH2 0x20D7 PUSH2 0x2059 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x20ED DUP3 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP PUSH2 0x20F8 DUP4 PUSH2 0x1D16 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2110 JUMPI PUSH2 0x210F PUSH2 0x2086 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2120 DUP3 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP PUSH2 0x212B DUP4 PUSH2 0x1D16 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2143 JUMPI PUSH2 0x2142 PUSH2 0x2086 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2153 DUP3 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP PUSH2 0x215E DUP4 PUSH2 0x1D16 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x216C DUP2 PUSH2 0x1D16 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2183 JUMPI PUSH2 0x2182 PUSH2 0x2086 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x21A4 PUSH2 0x219F PUSH2 0x219A DUP5 PUSH2 0x1F1D JUMP JUMPDEST PUSH2 0x1BB9 JUMP JUMPDEST PUSH2 0x1D16 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21B4 DUP2 PUSH2 0x218A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21CD PUSH0 DUP4 ADD DUP5 PUSH2 0x21AB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x21E6 PUSH0 DUP4 ADD DUP7 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x21F3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1DBA JUMP JUMPDEST PUSH2 0x2200 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1DBA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x221B PUSH0 DUP4 ADD DUP7 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x2228 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x2235 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1DBA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2246 DUP2 PUSH2 0x1D87 JUMP JUMPDEST DUP2 EQ PUSH2 0x2250 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2261 DUP2 PUSH2 0x223D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x227C JUMPI PUSH2 0x227B PUSH2 0x1CD7 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2289 DUP5 DUP3 DUP6 ADD PUSH2 0x2253 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x22B0 DUP3 PUSH2 0x2292 JUMP JUMPDEST PUSH2 0x22BA DUP2 DUP6 PUSH2 0x229C JUMP JUMPDEST SWAP4 POP PUSH2 0x22CA DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1C47 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x22E1 DUP3 DUP5 PUSH2 0x22A6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 CALLCODE SWAP4 0xDD DUP13 SWAP5 SWAP11 0x1E PUSH22 0xCEA771275A9FDF34EB94DB78F4C7618C2A6E239766A1 ADD PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "775:8904:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1171:32;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2074:89:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7023:176:11;;;:::i;:::-;;3144:97:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9582:95:11;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5039:244:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3002:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3743:72:11;;;:::i;:::-;;4122:529;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1990:33;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;618:87:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8831:218:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3299:116:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;:::i;:::-;;1021:158:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5886:191:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1689:24;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1638:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1474:40:11;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2276:93:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9230:220:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3405:332;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3610:178:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6689:195:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5044:662;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3846:140:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1957:27:11;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6256:237:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1171:32;;;:::o;2074:89:2:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;4382:13;4398:12;:10;:12::i;:::-;4382:28;;4420:31;4429:5;4436:7;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;:::o;7023:176:11:-;1531:13:0;:11;:13::i;:::-;7103:8:11::1;:18;;;7130:4;7103:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7088:12;:48;;;;7170:21;7152:40;;;;;;;;;;7023:176::o:0;3144:97:2:-;3196:7;3222:12;;3215:19;;3144:97;:::o;9582:95:11:-;9632:7;9658:12;;9651:19;;9582:95;:::o;5039:244:2:-;5126:4;5142:15;5160:12;:10;:12::i;:::-;5142:30;;5182:37;5198:4;5204:7;5213:5;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;5272:4;5265:11;;;5039:244;;;;;:::o;3002:82::-;3051:5;3075:2;3068:9;;3002:82;:::o;3743:72:11:-;1531:13:0;:11;:13::i;:::-;3804:4:11::1;3796:5;;:12;;;;;;;;;;;;;;;;;;3743:72::o:0;4122:529::-;2356:21:10;:19;:21::i;:::-;1323:4:11::1;4207:7;:14;4203:45;;;4230:18;;;;;;;;;;;;;;4203:45;4259:14;4276:25;4293:7;4276:16;:25::i;:::-;4259:42;;4312:27;4352:4;;4342:7;:14;;;;:::i;:::-;4312:44;;4393:19;4383:7;:29;;;;:::i;:::-;4366:12;;:47;;;;;;;:::i;:::-;;;;;;;;4424:81;4451:8;4461:10;4473;;;;;;;;;;;4485:19;4424:26;:81::i;:::-;4516:64;4522:8;1375:4;4542:19;;4533:6;:28;;;;:::i;:::-;4532:47;;;;:::i;:::-;4516:5;:64::i;:::-;4636:7;4628:6;4611:15;4596:48;;;;;;;;;;4193:458;;2398:20:10::0;:18;:20::i;:::-;4122:529:11;;:::o;1990:33::-;;;;;;;;;;;;;:::o;618:87:4:-;672:26;678:12;:10;:12::i;:::-;692:5;672;:26::i;:::-;618:87;:::o;8831:218:11:-;8893:7;1375:4;8998:12;;8961:19;;8943:13;:11;:13::i;:::-;8932:7;:25;;;;:::i;:::-;:49;;;;:::i;:::-;8931:80;;;;:::i;:::-;:111;;;;:::i;:::-;8912:130;;8831:218;;;:::o;3299:116:2:-;3364:7;3390:9;:18;3400:7;3390:18;;;;;;;;;;;;;;;;3383:25;;3299:116;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1021:158:4:-;1096:45;1112:7;1121:12;:10;:12::i;:::-;1135:5;1096:15;:45::i;:::-;1151:21;1157:7;1166:5;1151;:21::i;:::-;1021:158;;:::o;5886:191:11:-;1531:13:0;:11;:13::i;:::-;5956:31:11::1;5978:8;5956:21;:31::i;:::-;6018:8;5997:10;;:30;;;;;;;;;;;;;;;;;;6061:8;6043:27;;;;;;;;;;;;5886:191:::0;:::o;1689:24::-;;;;:::o;1638:85:0:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;1474:40:11:-;;;;:::o;2276:93:2:-;2323:13;2355:7;2348:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2276:93;:::o;9230:220:11:-;9294:7;1375:4;9398:13;:11;:13::i;:::-;9361:19;;9344:12;;9334:7;:22;;;;:::i;:::-;9333:48;;;;:::i;:::-;9332:80;;;;:::i;:::-;:111;;;;:::i;:::-;9313:130;;9230:220;;;:::o;3405:332::-;1531:13:0;:11;:13::i;:::-;3481:5:11::1;;;;;;;;;;;3480:6;3472:15;;;::::0;::::1;;3497:71;3524:8;3534:10;3554:4;3561:6;3497:26;:71::i;:::-;3578:25;3584:10;3596:6;3578:5;:25::i;:::-;3613:58;3622:42;3666:4;3613:8;:58::i;:::-;;3697:8;:18;;;3724:4;3697:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3682:12;:48;;;;3405:332:::0;:::o;3610:178:2:-;3679:4;3695:13;3711:12;:10;:12::i;:::-;3695:28;;3733:27;3743:5;3750:2;3754:5;3733:9;:27::i;:::-;3777:4;3770:11;;;3610:178;;;;:::o;6689:195:11:-;1531:13:0;:11;:13::i;:::-;6767:3:11::1;6757:7;:13;;;:29;;;;6784:2;6774:7;:12;;;6757:29;6754:60;;;6795:19;;;;;;;;;;;;;;6754:60;6832:7;6825:14;;:4;:14;;;;6854:23;6869:7;6854:23;;;;;;:::i;:::-;;;;;;;;6689:195:::0;:::o;5044:662::-;2356:21:10;:19;:21::i;:::-;1323:4:11::1;5113:7;:14;5109:45;;;5136:18;;;;;;;;;;;;;;5109:45;5165:14;5182:25;5199:7;5182:16;:25::i;:::-;5165:42;;5218:27;5258:4;;5248:7;:14;;;;:::i;:::-;5218:44;;5272:23;1375:4;5309:19;;5299:7;:29;;;;:::i;:::-;5298:48;;;;:::i;:::-;5272:74;;5391:19;5373:15;:37;;;;:::i;:::-;5356:12;;:55;;;;;;;:::i;:::-;;;;;;;;5422:25;5428:10;5440:6;5422:5;:25::i;:::-;5458:84;5485:8;5503:4;5510:10;;;;;;;;;;;5522:19;5458:26;:84::i;:::-;5553:80;5580:8;5598:4;5605:10;5617:15;5553:26;:80::i;:::-;5691:7;5683:6;5666:15;5649:50;;;;;;;;;;5099:607;;;2398:20:10::0;:18;:20::i;:::-;5044:662:11;:::o;3846:140:2:-;3926:7;3952:11;:18;3964:5;3952:18;;;;;;;;;;;;;;;:27;3971:7;3952:27;;;;;;;;;;;;;;;;3945:34;;3846:140;;;;:::o;1957:27:11:-;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;6256:237:11:-;1531:13:0;:11;:13::i;:::-;6343:3:11::1;6333:7;:13;;;:30;;;;6360:3;6350:7;:13;;;6333:30;6330:70;;;6372:28;;;;;;;;;;;;;;6330:70;6432:7;6410:29;;:19;:29;;;;6454:32;6478:7;6454:32;;;;;;:::i;:::-;;;;;;;;6256:237:::0;:::o;656:96:9:-;709:7;735:10;728:17;;656:96;:::o;8989:128:2:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;10663:477:2:-;10762:24;10789:25;10799:5;10806:7;10789:9;:25::i;:::-;10762:52;;10848:17;10828:16;:37;10824:310;;10904:5;10885:16;:24;10881:130;;;10963:7;10972:16;10990:5;10936:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10881:130;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10824:310;10752:388;10663:477;;;:::o;5656:300::-;5755:1;5739:18;;:4;:18;;;5735:86;;5807:1;5780:30;;;;;;;;;;;:::i;:::-;;;;;;;;5735:86;5848:1;5834:16;;:2;:16;;;5830:86;;5902:1;5873:32;;;;;;;;;;;:::i;:::-;;;;;;;;5830:86;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;:::-;5656:300;;;:::o;2431:307:10:-;1755:1;2558:7;;:18;2554:86;;2599:30;;;;;;;;;;;;;;2554:86;1755:1;2714:7;:17;;;;2431:307::o;7855:138:11:-;7919:7;7973:12;;7955:13;:11;:13::i;:::-;7946:6;:22;;;;:::i;:::-;7945:41;;;;:::i;:::-;7938:48;;7855:138;;;:::o;1702:188:7:-;1802:81;1822:5;1844;:18;;;1865:4;1871:2;1875:5;1829:53;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1802:19;:81::i;:::-;1702:188;;;;:::o;7721:208:2:-;7810:1;7791:21;;:7;:21;;;7787:91;;7864:1;7835:32;;;;;;;;;;;:::i;:::-;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;2744::10:-;1713:1;2924:7;:21;;;;2744:208::o;8247:206:2:-;8336:1;8317:21;;:7;:21;;;8313:89;;8388:1;8361:30;;;;;;;;;;;:::i;:::-;;;;;;;;8313:89;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;:::-;8247:206;;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;8327:220:11:-;8429:5;8419:112;;8467:14;8461:4;8454:28;8512:4;8506;8499:18;8419:112;8327:220;:::o;7550:136::-;7614:7;7666:13;:11;:13::i;:::-;7650:12;;7641:6;:21;;;;:::i;:::-;7640:39;;;;:::i;:::-;7633:46;;7550:136;;;:::o;9949:432:2:-;10078:1;10061:19;;:5;:19;;;10057:89;;10132:1;10103:32;;;;;;;;;;;:::i;:::-;;;;;;;;10057:89;10178:1;10159:21;;:7;:21;;;10155:90;;10231:1;10203:31;;;;;;;;;;;:::i;:::-;;;;;;;;10155:90;10284:5;10254:11;:18;10266:5;10254:18;;;;;;;;;;;;;;;:27;10273:7;10254:27;;;;;;;;;;;;;;;:35;;;;10303:9;10299:76;;;10349:7;10333:31;;10342:5;10333:31;;;10358:5;10333:31;;;;;;:::i;:::-;;;;;;;;10299:76;9949:432;;;;:::o;6271:1107::-;6376:1;6360:18;;:4;:18;;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;;;;;6356:540;;;6548:19;6570:9;:15;6580:4;6570:15;;;;;;;;;;;;;;;;6548:37;;6617:5;6603:11;:19;6599:115;;;6674:4;6680:11;6693:5;6649:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6599:115;6866:5;6852:11;:19;6834:9;:15;6844:4;6834:15;;;;;;;;;;;;;;;:37;;;;6534:362;6356:540;6924:1;6910:16;;:2;:16;;;6906:425;;7089:5;7073:12;;:21;;;;;;;;;;;6906:425;;;7301:5;7284:9;:13;7294:2;7284:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6906:425;7361:2;7346:25;;7355:4;7346:25;;;7365:5;7346:25;;;;;;:::i;:::-;;;;;;;;6271:1107;;;:::o;4059:629:7:-;4478:23;4504:33;4532:4;4512:5;4504:27;;;;:33;;;;:::i;:::-;4478:59;;4572:1;4551:10;:17;:22;;:57;;;;;4589:10;4578:30;;;;;;;;;;;;:::i;:::-;4577:31;4551:57;4547:135;;;4664:5;4631:40;;;;;;;;;;;:::i;:::-;;;;;;;;4547:135;4129:559;4059:629;;:::o;2705:151:8:-;2780:12;2811:38;2833:6;2841:4;2847:1;2811:21;:38::i;:::-;2804:45;;2705:151;;;;:::o;3180:392::-;3279:12;3331:5;3307:21;:29;3303:108;;;3394:4;3359:41;;;;;;;;;;;:::i;:::-;;;;;;;;3303:108;3421:12;3435:23;3462:6;:11;;3481:5;3488:4;3462:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3420:73;;;;3510:55;3537:6;3545:7;3554:10;3510:26;:55::i;:::-;3503:62;;;;3180:392;;;;;:::o;4625:582::-;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5066:1;5045:10;:17;:22;:49;;;;;5093:1;5071:6;:18;;;:23;5045:49;5041:119;;;5138:6;5121:24;;;;;;;;;;;:::i;:::-;;;;;;;;5041:119;5180:10;5173:17;;;;4793:408;4625:582;;;;;;:::o;5743:516::-;5894:1;5874:10;:17;:21;5870:383;;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;;;;;;;;;;;;;7:126:12;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:60::-;167:3;188:5;181:12;;139:60;;;:::o;205:142::-;255:9;288:53;306:34;315:24;333:5;315:24;:::i;:::-;306:34;:::i;:::-;288:53;:::i;:::-;275:66;;205:142;;;:::o;353:126::-;403:9;436:37;467:5;436:37;:::i;:::-;423:50;;353:126;;;:::o;485:140::-;549:9;582:37;613:5;582:37;:::i;:::-;569:50;;485:140;;;:::o;631:159::-;732:51;777:5;732:51;:::i;:::-;727:3;720:64;631:159;;:::o;796:250::-;903:4;941:2;930:9;926:18;918:26;;954:85;1036:1;1025:9;1021:17;1012:6;954:85;:::i;:::-;796:250;;;;:::o;1052:99::-;1104:6;1138:5;1132:12;1122:22;;1052:99;;;:::o;1157:169::-;1241:11;1275:6;1270:3;1263:19;1315:4;1310:3;1306:14;1291:29;;1157:169;;;;:::o;1332:246::-;1413:1;1423:113;1437:6;1434:1;1431:13;1423:113;;;1522:1;1517:3;1513:11;1507:18;1503:1;1498:3;1494:11;1487:39;1459:2;1456:1;1452:10;1447:15;;1423:113;;;1570:1;1561:6;1556:3;1552:16;1545:27;1394:184;1332:246;;;:::o;1584:102::-;1625:6;1676:2;1672:7;1667:2;1660:5;1656:14;1652:28;1642:38;;1584:102;;;:::o;1692:377::-;1780:3;1808:39;1841:5;1808:39;:::i;:::-;1863:71;1927:6;1922:3;1863:71;:::i;:::-;1856:78;;1943:65;2001:6;1996:3;1989:4;1982:5;1978:16;1943:65;:::i;:::-;2033:29;2055:6;2033:29;:::i;:::-;2028:3;2024:39;2017:46;;1784:285;1692:377;;;;:::o;2075:313::-;2188:4;2226:2;2215:9;2211:18;2203:26;;2275:9;2269:4;2265:20;2261:1;2250:9;2246:17;2239:47;2303:78;2376:4;2367:6;2303:78;:::i;:::-;2295:86;;2075:313;;;;:::o;2475:117::-;2584:1;2581;2574:12;2721:96;2758:7;2787:24;2805:5;2787:24;:::i;:::-;2776:35;;2721:96;;;:::o;2823:122::-;2896:24;2914:5;2896:24;:::i;:::-;2889:5;2886:35;2876:63;;2935:1;2932;2925:12;2876:63;2823:122;:::o;2951:139::-;2997:5;3035:6;3022:20;3013:29;;3051:33;3078:5;3051:33;:::i;:::-;2951:139;;;;:::o;3096:77::-;3133:7;3162:5;3151:16;;3096:77;;;:::o;3179:122::-;3252:24;3270:5;3252:24;:::i;:::-;3245:5;3242:35;3232:63;;3291:1;3288;3281:12;3232:63;3179:122;:::o;3307:139::-;3353:5;3391:6;3378:20;3369:29;;3407:33;3434:5;3407:33;:::i;:::-;3307:139;;;;:::o;3452:474::-;3520:6;3528;3577:2;3565:9;3556:7;3552:23;3548:32;3545:119;;;3583:79;;:::i;:::-;3545:119;3703:1;3728:53;3773:7;3764:6;3753:9;3749:22;3728:53;:::i;:::-;3718:63;;3674:117;3830:2;3856:53;3901:7;3892:6;3881:9;3877:22;3856:53;:::i;:::-;3846:63;;3801:118;3452:474;;;;;:::o;3932:90::-;3966:7;4009:5;4002:13;3995:21;3984:32;;3932:90;;;:::o;4028:109::-;4109:21;4124:5;4109:21;:::i;:::-;4104:3;4097:34;4028:109;;:::o;4143:210::-;4230:4;4268:2;4257:9;4253:18;4245:26;;4281:65;4343:1;4332:9;4328:17;4319:6;4281:65;:::i;:::-;4143:210;;;;:::o;4359:118::-;4446:24;4464:5;4446:24;:::i;:::-;4441:3;4434:37;4359:118;;:::o;4483:222::-;4576:4;4614:2;4603:9;4599:18;4591:26;;4627:71;4695:1;4684:9;4680:17;4671:6;4627:71;:::i;:::-;4483:222;;;;:::o;4711:619::-;4788:6;4796;4804;4853:2;4841:9;4832:7;4828:23;4824:32;4821:119;;;4859:79;;:::i;:::-;4821:119;4979:1;5004:53;5049:7;5040:6;5029:9;5025:22;5004:53;:::i;:::-;4994:63;;4950:117;5106:2;5132:53;5177:7;5168:6;5157:9;5153:22;5132:53;:::i;:::-;5122:63;;5077:118;5234:2;5260:53;5305:7;5296:6;5285:9;5281:22;5260:53;:::i;:::-;5250:63;;5205:118;4711:619;;;;;:::o;5336:86::-;5371:7;5411:4;5404:5;5400:16;5389:27;;5336:86;;;:::o;5428:112::-;5511:22;5527:5;5511:22;:::i;:::-;5506:3;5499:35;5428:112;;:::o;5546:214::-;5635:4;5673:2;5662:9;5658:18;5650:26;;5686:67;5750:1;5739:9;5735:17;5726:6;5686:67;:::i;:::-;5546:214;;;;:::o;5766:104::-;5811:7;5840:24;5858:5;5840:24;:::i;:::-;5829:35;;5766:104;;;:::o;5876:142::-;5979:32;6005:5;5979:32;:::i;:::-;5974:3;5967:45;5876:142;;:::o;6024:254::-;6133:4;6171:2;6160:9;6156:18;6148:26;;6184:87;6268:1;6257:9;6253:17;6244:6;6184:87;:::i;:::-;6024:254;;;;:::o;6284:329::-;6343:6;6392:2;6380:9;6371:7;6367:23;6363:32;6360:119;;;6398:79;;:::i;:::-;6360:119;6518:1;6543:53;6588:7;6579:6;6568:9;6564:22;6543:53;:::i;:::-;6533:63;;6489:117;6284:329;;;;:::o;6619:::-;6678:6;6727:2;6715:9;6706:7;6702:23;6698:32;6695:119;;;6733:79;;:::i;:::-;6695:119;6853:1;6878:53;6923:7;6914:6;6903:9;6899:22;6878:53;:::i;:::-;6868:63;;6824:117;6619:329;;;;:::o;6954:118::-;7041:24;7059:5;7041:24;:::i;:::-;7036:3;7029:37;6954:118;;:::o;7078:222::-;7171:4;7209:2;7198:9;7194:18;7186:26;;7222:71;7290:1;7279:9;7275:17;7266:6;7222:71;:::i;:::-;7078:222;;;;:::o;7306:89::-;7342:7;7382:6;7375:5;7371:18;7360:29;;7306:89;;;:::o;7401:120::-;7473:23;7490:5;7473:23;:::i;:::-;7466:5;7463:34;7453:62;;7511:1;7508;7501:12;7453:62;7401:120;:::o;7527:137::-;7572:5;7610:6;7597:20;7588:29;;7626:32;7652:5;7626:32;:::i;:::-;7527:137;;;;:::o;7670:327::-;7728:6;7777:2;7765:9;7756:7;7752:23;7748:32;7745:119;;;7783:79;;:::i;:::-;7745:119;7903:1;7928:52;7972:7;7963:6;7952:9;7948:22;7928:52;:::i;:::-;7918:62;;7874:116;7670:327;;;;:::o;8003:474::-;8071:6;8079;8128:2;8116:9;8107:7;8103:23;8099:32;8096:119;;;8134:79;;:::i;:::-;8096:119;8254:1;8279:53;8324:7;8315:6;8304:9;8300:22;8279:53;:::i;:::-;8269:63;;8225:117;8381:2;8407:53;8452:7;8443:6;8432:9;8428:22;8407:53;:::i;:::-;8397:63;;8352:118;8003:474;;;;;:::o;8483:180::-;8531:77;8528:1;8521:88;8628:4;8625:1;8618:15;8652:4;8649:1;8642:15;8669:320;8713:6;8750:1;8744:4;8740:12;8730:22;;8797:1;8791:4;8787:12;8818:18;8808:81;;8874:4;8866:6;8862:17;8852:27;;8808:81;8936:2;8928:6;8925:14;8905:18;8902:38;8899:84;;8955:18;;:::i;:::-;8899:84;8720:269;8669:320;;;:::o;8995:143::-;9052:5;9083:6;9077:13;9068:22;;9099:33;9126:5;9099:33;:::i;:::-;8995:143;;;;:::o;9144:351::-;9214:6;9263:2;9251:9;9242:7;9238:23;9234:32;9231:119;;;9269:79;;:::i;:::-;9231:119;9389:1;9414:64;9470:7;9461:6;9450:9;9446:22;9414:64;:::i;:::-;9404:74;;9360:128;9144:351;;;;:::o;9501:180::-;9549:77;9546:1;9539:88;9646:4;9643:1;9636:15;9670:4;9667:1;9660:15;9687:180;9735:77;9732:1;9725:88;9832:4;9829:1;9822:15;9856:4;9853:1;9846:15;9873:185;9913:1;9930:20;9948:1;9930:20;:::i;:::-;9925:25;;9964:20;9982:1;9964:20;:::i;:::-;9959:25;;10003:1;9993:35;;10008:18;;:::i;:::-;9993:35;10050:1;10047;10043:9;10038:14;;9873:185;;;;:::o;10064:194::-;10104:4;10124:20;10142:1;10124:20;:::i;:::-;10119:25;;10158:20;10176:1;10158:20;:::i;:::-;10153:25;;10202:1;10199;10195:9;10187:17;;10226:1;10220:4;10217:11;10214:37;;;10231:18;;:::i;:::-;10214:37;10064:194;;;;:::o;10264:191::-;10304:3;10323:20;10341:1;10323:20;:::i;:::-;10318:25;;10357:20;10375:1;10357:20;:::i;:::-;10352:25;;10400:1;10397;10393:9;10386:16;;10421:3;10418:1;10415:10;10412:36;;;10428:18;;:::i;:::-;10412:36;10264:191;;;;:::o;10461:410::-;10501:7;10524:20;10542:1;10524:20;:::i;:::-;10519:25;;10558:20;10576:1;10558:20;:::i;:::-;10553:25;;10613:1;10610;10606:9;10635:30;10653:11;10635:30;:::i;:::-;10624:41;;10814:1;10805:7;10801:15;10798:1;10795:22;10775:1;10768:9;10748:83;10725:139;;10844:18;;:::i;:::-;10725:139;10509:362;10461:410;;;;:::o;10877:140::-;10926:9;10959:52;10977:33;10986:23;11003:5;10986:23;:::i;:::-;10977:33;:::i;:::-;10959:52;:::i;:::-;10946:65;;10877:140;;;:::o;11023:129::-;11109:36;11139:5;11109:36;:::i;:::-;11104:3;11097:49;11023:129;;:::o;11158:220::-;11250:4;11288:2;11277:9;11273:18;11265:26;;11301:70;11368:1;11357:9;11353:17;11344:6;11301:70;:::i;:::-;11158:220;;;;:::o;11384:442::-;11533:4;11571:2;11560:9;11556:18;11548:26;;11584:71;11652:1;11641:9;11637:17;11628:6;11584:71;:::i;:::-;11665:72;11733:2;11722:9;11718:18;11709:6;11665:72;:::i;:::-;11747;11815:2;11804:9;11800:18;11791:6;11747:72;:::i;:::-;11384:442;;;;;;:::o;11832:::-;11981:4;12019:2;12008:9;12004:18;11996:26;;12032:71;12100:1;12089:9;12085:17;12076:6;12032:71;:::i;:::-;12113:72;12181:2;12170:9;12166:18;12157:6;12113:72;:::i;:::-;12195;12263:2;12252:9;12248:18;12239:6;12195:72;:::i;:::-;11832:442;;;;;;:::o;12280:116::-;12350:21;12365:5;12350:21;:::i;:::-;12343:5;12340:32;12330:60;;12386:1;12383;12376:12;12330:60;12280:116;:::o;12402:137::-;12456:5;12487:6;12481:13;12472:22;;12503:30;12527:5;12503:30;:::i;:::-;12402:137;;;;:::o;12545:345::-;12612:6;12661:2;12649:9;12640:7;12636:23;12632:32;12629:119;;;12667:79;;:::i;:::-;12629:119;12787:1;12812:61;12865:7;12856:6;12845:9;12841:22;12812:61;:::i;:::-;12802:71;;12758:125;12545:345;;;;:::o;12896:98::-;12947:6;12981:5;12975:12;12965:22;;12896:98;;;:::o;13000:147::-;13101:11;13138:3;13123:18;;13000:147;;;;:::o;13153:386::-;13257:3;13285:38;13317:5;13285:38;:::i;:::-;13339:88;13420:6;13415:3;13339:88;:::i;:::-;13332:95;;13436:65;13494:6;13489:3;13482:4;13475:5;13471:16;13436:65;:::i;:::-;13526:6;13521:3;13517:16;13510:23;;13261:278;13153:386;;;;:::o;13545:271::-;13675:3;13697:93;13786:3;13777:6;13697:93;:::i;:::-;13690:100;;13807:3;13800:10;;13545:271;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1798800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"FEES()": "2515",
								"MINT_AND_REDEEM_FEE()": "2492",
								"_BACKING()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2918",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "384",
								"emergencyFixTotalBacking()": "infinite",
								"feeAddress()": "2620",
								"fillContract(uint256)": "infinite",
								"getMintPrice(uint256)": "infinite",
								"getRedeemPrice(uint256)": "infinite",
								"getTotalBacking()": "2522",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"owner()": "2560",
								"redeem(uint256)": "infinite",
								"renounceOwnership()": "infinite",
								"setFeeAddress(address)": "infinite",
								"setMintAndRedeemFee(uint16)": "infinite",
								"setStart()": "infinite",
								"setTeamFee(uint16)": "infinite",
								"symbol()": "infinite",
								"totalBacking()": "2491",
								"totalSupply()": "2500",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite"
							},
							"internal": {
								"_BACKINGtoPTOKEN(uint256)": "infinite",
								"_PTOKENtoBACKING(uint256)": "infinite",
								"_assemblyOwnerNotZero(address)": "33"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH",
									"source": 11,
									"value": "A0"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1511,
									"end": 1514,
									"name": "PUSH",
									"source": 11,
									"value": "3C7"
								},
								{
									"begin": 1474,
									"end": 1514,
									"name": "PUSH",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 1474,
									"end": 1514,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 1711,
									"end": 1713,
									"name": "PUSH",
									"source": 11,
									"value": "23"
								},
								{
									"begin": 1689,
									"end": 1713,
									"name": "PUSH",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 1689,
									"end": 1713,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 2093,
									"end": 2094,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "PUSH",
									"source": 11,
									"value": "100"
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "EXP",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 2054,
									"end": 2095,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "CODESIZE",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 2755,
									"end": 3088,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "tag",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "PUSH",
									"source": 11,
									"value": "100"
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "EXP",
									"source": 11
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "DIV",
									"source": 11
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2848,
									"end": 2860,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "E"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "70616E7468656F6E20544F4B454E000000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "70544F4B454E0000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1970,
									"end": 1975,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1297,
									"end": 1298,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1285,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1322,
									"end": 1353,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1225,
									"end": 1412,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1713,
									"end": 1714,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1917,
									"end": 1924,
									"name": "PUSH",
									"source": 10,
									"value": "6"
								},
								{
									"begin": 1917,
									"end": 1938,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1917,
									"end": 1938,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1917,
									"end": 1938,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1917,
									"end": 1938,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2898,
									"end": 2899,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2875,
									"end": 2900,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2875,
									"end": 2900,
									"modifierDepth": 2,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 2875,
									"end": 2886,
									"modifierDepth": 2,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 2875,
									"end": 2900,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2875,
									"end": 2900,
									"modifierDepth": 2,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 2875,
									"end": 2900,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 2871,
									"end": 2932,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 2871,
									"end": 2932,
									"modifierDepth": 2,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "8579BEFE00000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2909,
									"end": 2932,
									"modifierDepth": 2,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 2871,
									"end": 2932,
									"modifierDepth": 2,
									"name": "tag",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 2871,
									"end": 2932,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2966,
									"end": 2967,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2946,
									"end": 2968,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2946,
									"end": 2968,
									"modifierDepth": 2,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 2946,
									"end": 2954,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2946,
									"end": 2968,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2946,
									"end": 2968,
									"modifierDepth": 2,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 2946,
									"end": 2968,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 2942,
									"end": 3000,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 2942,
									"end": 3000,
									"modifierDepth": 2,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "8579BEFE00000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2977,
									"end": 3000,
									"modifierDepth": 2,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 2942,
									"end": 3000,
									"modifierDepth": 2,
									"name": "tag",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 2942,
									"end": 3000,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3032,
									"end": 3043,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3021,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "A"
								},
								{
									"begin": 3011,
									"end": 3021,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "100"
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "EXP",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 3011,
									"end": 3044,
									"modifierDepth": 2,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3072,
									"end": 3080,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3054,
									"end": 3081,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3054,
									"end": 3081,
									"modifierDepth": 2,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2755,
									"end": 3088,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3010,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3029,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3026,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 3020,
									"end": 3026,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3083,
									"end": 3091,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3073,
									"end": 3081,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "58"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 12,
									"value": "58"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "63"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 12,
									"value": "63"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 924,
									"end": 930,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 932,
									"end": 938,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 981,
									"end": 983,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 969,
									"end": 978,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 960,
									"end": 967,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 956,
									"end": 979,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 952,
									"end": 984,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "65"
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "66"
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 987,
									"end": 1066,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "tag",
									"source": 12,
									"value": "66"
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "tag",
									"source": 12,
									"value": "65"
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1107,
									"end": 1108,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "67"
								},
								{
									"begin": 1188,
									"end": 1195,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1179,
									"end": 1185,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1168,
									"end": 1177,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 1164,
									"end": 1186,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 1132,
									"end": 1196,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "tag",
									"source": 12,
									"value": "67"
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1122,
									"end": 1196,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1122,
									"end": 1196,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1078,
									"end": 1206,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 1247,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "68"
								},
								{
									"begin": 1327,
									"end": 1334,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1318,
									"end": 1324,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1307,
									"end": 1316,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 1303,
									"end": 1325,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 1271,
									"end": 1335,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "tag",
									"source": 12,
									"value": "68"
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1261,
									"end": 1335,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1261,
									"end": 1335,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1216,
									"end": 1345,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1352,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1358,
									"end": 1457,
									"name": "tag",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 1358,
									"end": 1457,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1410,
									"end": 1416,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1444,
									"end": 1449,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1438,
									"end": 1450,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1428,
									"end": 1450,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1428,
									"end": 1450,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1358,
									"end": 1457,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1358,
									"end": 1457,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1358,
									"end": 1457,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1358,
									"end": 1457,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1463,
									"end": 1643,
									"name": "tag",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 1463,
									"end": 1643,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1511,
									"end": 1588,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1508,
									"end": 1509,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1501,
									"end": 1589,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1608,
									"end": 1612,
									"name": "PUSH",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 1605,
									"end": 1606,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1598,
									"end": 1613,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1632,
									"end": 1636,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1629,
									"end": 1630,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1622,
									"end": 1637,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1649,
									"end": 1829,
									"name": "tag",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 1649,
									"end": 1829,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1697,
									"end": 1774,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1694,
									"end": 1695,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1687,
									"end": 1775,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1794,
									"end": 1798,
									"name": "PUSH",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 1791,
									"end": 1792,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1784,
									"end": 1799,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1818,
									"end": 1822,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1815,
									"end": 1816,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1808,
									"end": 1823,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1835,
									"end": 2155,
									"name": "tag",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 1835,
									"end": 2155,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1879,
									"end": 1885,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1916,
									"end": 1917,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 1910,
									"end": 1914,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1906,
									"end": 1918,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 1896,
									"end": 1918,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1896,
									"end": 1918,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1963,
									"end": 1964,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1957,
									"end": 1961,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1953,
									"end": 1965,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1984,
									"end": 2002,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1974,
									"end": 2055,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 1974,
									"end": 2055,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2040,
									"end": 2044,
									"name": "PUSH",
									"source": 12,
									"value": "7F"
								},
								{
									"begin": 2032,
									"end": 2038,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2028,
									"end": 2045,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 2018,
									"end": 2045,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2018,
									"end": 2045,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1974,
									"end": 2055,
									"name": "tag",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 1974,
									"end": 2055,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2102,
									"end": 2104,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2094,
									"end": 2100,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2091,
									"end": 2105,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 2071,
									"end": 2089,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2068,
									"end": 2106,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 2065,
									"end": 2149,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "74"
								},
								{
									"begin": 2065,
									"end": 2149,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2121,
									"end": 2139,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "75"
								},
								{
									"begin": 2121,
									"end": 2139,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 2121,
									"end": 2139,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2121,
									"end": 2139,
									"name": "tag",
									"source": 12,
									"value": "75"
								},
								{
									"begin": 2121,
									"end": 2139,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2065,
									"end": 2149,
									"name": "tag",
									"source": 12,
									"value": "74"
								},
								{
									"begin": 2065,
									"end": 2149,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1886,
									"end": 2155,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1835,
									"end": 2155,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1835,
									"end": 2155,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1835,
									"end": 2155,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1835,
									"end": 2155,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2161,
									"end": 2302,
									"name": "tag",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 2161,
									"end": 2302,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2210,
									"end": 2214,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2233,
									"end": 2236,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2225,
									"end": 2236,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2225,
									"end": 2236,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2256,
									"end": 2259,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2253,
									"end": 2254,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2246,
									"end": 2260,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2290,
									"end": 2294,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2287,
									"end": 2288,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2277,
									"end": 2295,
									"name": "KECCAK256",
									"source": 12
								},
								{
									"begin": 2269,
									"end": 2295,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2269,
									"end": 2295,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2161,
									"end": 2302,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2161,
									"end": 2302,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2161,
									"end": 2302,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2161,
									"end": 2302,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2308,
									"end": 2401,
									"name": "tag",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 2308,
									"end": 2401,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2345,
									"end": 2351,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2392,
									"end": 2394,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2387,
									"end": 2389,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 2380,
									"end": 2385,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2376,
									"end": 2390,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2372,
									"end": 2395,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 2362,
									"end": 2395,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2362,
									"end": 2395,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2308,
									"end": 2401,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2308,
									"end": 2401,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2308,
									"end": 2401,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2308,
									"end": 2401,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2407,
									"end": 2514,
									"name": "tag",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 2407,
									"end": 2514,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2451,
									"end": 2459,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2501,
									"end": 2506,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2495,
									"end": 2499,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2491,
									"end": 2507,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 2470,
									"end": 2507,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2470,
									"end": 2507,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2407,
									"end": 2514,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2407,
									"end": 2514,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2407,
									"end": 2514,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2407,
									"end": 2514,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2407,
									"end": 2514,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2520,
									"end": 2913,
									"name": "tag",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 2520,
									"end": 2913,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2589,
									"end": 2595,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2639,
									"end": 2640,
									"name": "PUSH",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 2627,
									"end": 2637,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2623,
									"end": 2641,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 2662,
									"end": 2759,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 2692,
									"end": 2758,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2681,
									"end": 2690,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2662,
									"end": 2759,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 2662,
									"end": 2759,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2662,
									"end": 2759,
									"name": "tag",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 2662,
									"end": 2759,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2780,
									"end": 2819,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "81"
								},
								{
									"begin": 2810,
									"end": 2818,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 2799,
									"end": 2808,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2780,
									"end": 2819,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 2780,
									"end": 2819,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2780,
									"end": 2819,
									"name": "tag",
									"source": 12,
									"value": "81"
								},
								{
									"begin": 2780,
									"end": 2819,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2768,
									"end": 2819,
									"name": "SWAP6",
									"source": 12
								},
								{
									"begin": 2768,
									"end": 2819,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2852,
									"end": 2856,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2848,
									"end": 2857,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 2841,
									"end": 2846,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2837,
									"end": 2858,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 2828,
									"end": 2858,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 2828,
									"end": 2858,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2901,
									"end": 2905,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2891,
									"end": 2899,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 2887,
									"end": 2906,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 2880,
									"end": 2885,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2877,
									"end": 2907,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 2867,
									"end": 2907,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2867,
									"end": 2907,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2596,
									"end": 2913,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2596,
									"end": 2913,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2520,
									"end": 2913,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 2520,
									"end": 2913,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2520,
									"end": 2913,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2520,
									"end": 2913,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2520,
									"end": 2913,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2520,
									"end": 2913,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2919,
									"end": 2996,
									"name": "tag",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 2919,
									"end": 2996,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2956,
									"end": 2963,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2985,
									"end": 2990,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2974,
									"end": 2990,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2974,
									"end": 2990,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2919,
									"end": 2996,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2919,
									"end": 2996,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2919,
									"end": 2996,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2919,
									"end": 2996,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3002,
									"end": 3062,
									"name": "tag",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3002,
									"end": 3062,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3030,
									"end": 3033,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3051,
									"end": 3056,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3044,
									"end": 3056,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3044,
									"end": 3056,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3002,
									"end": 3062,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3002,
									"end": 3062,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3002,
									"end": 3062,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3002,
									"end": 3062,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3068,
									"end": 3210,
									"name": "tag",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 3068,
									"end": 3210,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3118,
									"end": 3127,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3151,
									"end": 3204,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "85"
								},
								{
									"begin": 3169,
									"end": 3203,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "86"
								},
								{
									"begin": 3178,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "87"
								},
								{
									"begin": 3196,
									"end": 3201,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3178,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 3178,
									"end": 3202,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3178,
									"end": 3202,
									"name": "tag",
									"source": 12,
									"value": "87"
								},
								{
									"begin": 3178,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3169,
									"end": 3203,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3169,
									"end": 3203,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3169,
									"end": 3203,
									"name": "tag",
									"source": 12,
									"value": "86"
								},
								{
									"begin": 3169,
									"end": 3203,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3151,
									"end": 3204,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 3151,
									"end": 3204,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3151,
									"end": 3204,
									"name": "tag",
									"source": 12,
									"value": "85"
								},
								{
									"begin": 3151,
									"end": 3204,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3138,
									"end": 3204,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3138,
									"end": 3204,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3068,
									"end": 3210,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3068,
									"end": 3210,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3068,
									"end": 3210,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3068,
									"end": 3210,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3216,
									"end": 3291,
									"name": "tag",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 3216,
									"end": 3291,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3259,
									"end": 3262,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3280,
									"end": 3285,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3273,
									"end": 3285,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3273,
									"end": 3285,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3216,
									"end": 3291,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3216,
									"end": 3291,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3216,
									"end": 3291,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3216,
									"end": 3291,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3297,
									"end": 3566,
									"name": "tag",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 3297,
									"end": 3566,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3407,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "90"
								},
								{
									"begin": 3438,
									"end": 3445,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3407,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 3407,
									"end": 3446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3407,
									"end": 3446,
									"name": "tag",
									"source": 12,
									"value": "90"
								},
								{
									"begin": 3407,
									"end": 3446,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3468,
									"end": 3559,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "91"
								},
								{
									"begin": 3517,
									"end": 3558,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "92"
								},
								{
									"begin": 3541,
									"end": 3557,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3517,
									"end": 3558,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 3517,
									"end": 3558,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3517,
									"end": 3558,
									"name": "tag",
									"source": 12,
									"value": "92"
								},
								{
									"begin": 3517,
									"end": 3558,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3509,
									"end": 3515,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3502,
									"end": 3506,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3496,
									"end": 3507,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 3468,
									"end": 3559,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 3468,
									"end": 3559,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3468,
									"end": 3559,
									"name": "tag",
									"source": 12,
									"value": "91"
								},
								{
									"begin": 3468,
									"end": 3559,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3462,
									"end": 3466,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3455,
									"end": 3560,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 3373,
									"end": 3566,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3297,
									"end": 3566,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3297,
									"end": 3566,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3297,
									"end": 3566,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3297,
									"end": 3566,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3572,
									"end": 3645,
									"name": "tag",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 3572,
									"end": 3645,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3617,
									"end": 3620,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3572,
									"end": 3645,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3572,
									"end": 3645,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3651,
									"end": 3840,
									"name": "tag",
									"source": 12,
									"value": "45"
								},
								{
									"begin": 3651,
									"end": 3840,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3728,
									"end": 3760,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "95"
								},
								{
									"begin": 3728,
									"end": 3760,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 3728,
									"end": 3760,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3728,
									"end": 3760,
									"name": "tag",
									"source": 12,
									"value": "95"
								},
								{
									"begin": 3728,
									"end": 3760,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3769,
									"end": 3834,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "96"
								},
								{
									"begin": 3827,
									"end": 3833,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3819,
									"end": 3825,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3813,
									"end": 3817,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3769,
									"end": 3834,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 3769,
									"end": 3834,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3769,
									"end": 3834,
									"name": "tag",
									"source": 12,
									"value": "96"
								},
								{
									"begin": 3769,
									"end": 3834,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3704,
									"end": 3840,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3651,
									"end": 3840,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3651,
									"end": 3840,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3651,
									"end": 3840,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3846,
									"end": 4032,
									"name": "tag",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 3846,
									"end": 4032,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "tag",
									"source": 12,
									"value": "98"
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3923,
									"end": 3926,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3916,
									"end": 3921,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3913,
									"end": 3927,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3977,
									"end": 4016,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "101"
								},
								{
									"begin": 4014,
									"end": 4015,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 4007,
									"end": 4012,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3977,
									"end": 4016,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "45"
								},
								{
									"begin": 3977,
									"end": 4016,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3977,
									"end": 4016,
									"name": "tag",
									"source": 12,
									"value": "101"
								},
								{
									"begin": 3977,
									"end": 4016,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3950,
									"end": 3951,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 3943,
									"end": 3948,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3939,
									"end": 3952,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3930,
									"end": 3952,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3930,
									"end": 3952,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "98"
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "tag",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 3906,
									"end": 4026,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3846,
									"end": 4032,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3846,
									"end": 4032,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3846,
									"end": 4032,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4038,
									"end": 4581,
									"name": "tag",
									"source": 12,
									"value": "47"
								},
								{
									"begin": 4038,
									"end": 4581,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4139,
									"end": 4141,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 4134,
									"end": 4137,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4131,
									"end": 4142,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 4128,
									"end": 4574,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 4128,
									"end": 4574,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "103"
								},
								{
									"begin": 4128,
									"end": 4574,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 4173,
									"end": 4211,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "104"
								},
								{
									"begin": 4205,
									"end": 4210,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 4173,
									"end": 4211,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 4173,
									"end": 4211,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4173,
									"end": 4211,
									"name": "tag",
									"source": 12,
									"value": "104"
								},
								{
									"begin": 4173,
									"end": 4211,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4257,
									"end": 4286,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "105"
								},
								{
									"begin": 4275,
									"end": 4285,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 4257,
									"end": 4286,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 4257,
									"end": 4286,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4257,
									"end": 4286,
									"name": "tag",
									"source": 12,
									"value": "105"
								},
								{
									"begin": 4257,
									"end": 4286,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4247,
									"end": 4255,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 4243,
									"end": 4287,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 4440,
									"end": 4442,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 4428,
									"end": 4438,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 4425,
									"end": 4443,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 4422,
									"end": 4471,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 4422,
									"end": 4471,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "106"
								},
								{
									"begin": 4422,
									"end": 4471,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 4461,
									"end": 4469,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 4446,
									"end": 4469,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 4446,
									"end": 4469,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4422,
									"end": 4471,
									"name": "tag",
									"source": 12,
									"value": "106"
								},
								{
									"begin": 4422,
									"end": 4471,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4484,
									"end": 4564,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "107"
								},
								{
									"begin": 4540,
									"end": 4562,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "108"
								},
								{
									"begin": 4558,
									"end": 4561,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 4540,
									"end": 4562,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 4540,
									"end": 4562,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4540,
									"end": 4562,
									"name": "tag",
									"source": 12,
									"value": "108"
								},
								{
									"begin": 4540,
									"end": 4562,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4530,
									"end": 4538,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 4526,
									"end": 4563,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 4513,
									"end": 4524,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4484,
									"end": 4564,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 4484,
									"end": 4564,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4484,
									"end": 4564,
									"name": "tag",
									"source": 12,
									"value": "107"
								},
								{
									"begin": 4484,
									"end": 4564,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4143,
									"end": 4574,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4143,
									"end": 4574,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4128,
									"end": 4574,
									"name": "tag",
									"source": 12,
									"value": "103"
								},
								{
									"begin": 4128,
									"end": 4574,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4038,
									"end": 4581,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4038,
									"end": 4581,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4038,
									"end": 4581,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4038,
									"end": 4581,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4587,
									"end": 4704,
									"name": "tag",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 4587,
									"end": 4704,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4641,
									"end": 4649,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 4691,
									"end": 4696,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4685,
									"end": 4689,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4681,
									"end": 4697,
									"name": "SHR",
									"source": 12
								},
								{
									"begin": 4660,
									"end": 4697,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 4660,
									"end": 4697,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4587,
									"end": 4704,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 4587,
									"end": 4704,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4587,
									"end": 4704,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4587,
									"end": 4704,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4587,
									"end": 4704,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4710,
									"end": 4879,
									"name": "tag",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 4710,
									"end": 4879,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4754,
									"end": 4760,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 4787,
									"end": 4838,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "111"
								},
								{
									"begin": 4835,
									"end": 4836,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 4831,
									"end": 4837,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 4823,
									"end": 4828,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 4820,
									"end": 4821,
									"name": "PUSH",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 4816,
									"end": 4829,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 4787,
									"end": 4838,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 4787,
									"end": 4838,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4787,
									"end": 4838,
									"name": "tag",
									"source": 12,
									"value": "111"
								},
								{
									"begin": 4787,
									"end": 4838,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4783,
									"end": 4839,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 4868,
									"end": 4872,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 4862,
									"end": 4866,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 4858,
									"end": 4873,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 4848,
									"end": 4873,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4848,
									"end": 4873,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4761,
									"end": 4879,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4710,
									"end": 4879,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 4710,
									"end": 4879,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4710,
									"end": 4879,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4710,
									"end": 4879,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4710,
									"end": 4879,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4884,
									"end": 5179,
									"name": "tag",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 4884,
									"end": 5179,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4960,
									"end": 4964,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 5106,
									"end": 5135,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "113"
								},
								{
									"begin": 5131,
									"end": 5134,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 5125,
									"end": 5129,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 5106,
									"end": 5135,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 5106,
									"end": 5135,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5106,
									"end": 5135,
									"name": "tag",
									"source": 12,
									"value": "113"
								},
								{
									"begin": 5106,
									"end": 5135,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5098,
									"end": 5135,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 5098,
									"end": 5135,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5168,
									"end": 5171,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5165,
									"end": 5166,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 5161,
									"end": 5172,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 5155,
									"end": 5159,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5152,
									"end": 5173,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 5144,
									"end": 5173,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 5144,
									"end": 5173,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4884,
									"end": 5179,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 4884,
									"end": 5179,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4884,
									"end": 5179,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4884,
									"end": 5179,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4884,
									"end": 5179,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5184,
									"end": 6579,
									"name": "tag",
									"source": 12,
									"value": "10"
								},
								{
									"begin": 5184,
									"end": 6579,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5301,
									"end": 5338,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "115"
								},
								{
									"begin": 5334,
									"end": 5337,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5301,
									"end": 5338,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 5301,
									"end": 5338,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5301,
									"end": 5338,
									"name": "tag",
									"source": 12,
									"value": "115"
								},
								{
									"begin": 5301,
									"end": 5338,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5403,
									"end": 5421,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 5395,
									"end": 5401,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 5392,
									"end": 5422,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 5389,
									"end": 5445,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 5389,
									"end": 5445,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "116"
								},
								{
									"begin": 5389,
									"end": 5445,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 5425,
									"end": 5443,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "117"
								},
								{
									"begin": 5425,
									"end": 5443,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 5425,
									"end": 5443,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5425,
									"end": 5443,
									"name": "tag",
									"source": 12,
									"value": "117"
								},
								{
									"begin": 5425,
									"end": 5443,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5389,
									"end": 5445,
									"name": "tag",
									"source": 12,
									"value": "116"
								},
								{
									"begin": 5389,
									"end": 5445,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5469,
									"end": 5507,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "118"
								},
								{
									"begin": 5501,
									"end": 5505,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5495,
									"end": 5506,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 5469,
									"end": 5507,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 5469,
									"end": 5507,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5469,
									"end": 5507,
									"name": "tag",
									"source": 12,
									"value": "118"
								},
								{
									"begin": 5469,
									"end": 5507,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5554,
									"end": 5621,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "119"
								},
								{
									"begin": 5614,
									"end": 5620,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5606,
									"end": 5612,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5600,
									"end": 5604,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 5554,
									"end": 5621,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "47"
								},
								{
									"begin": 5554,
									"end": 5621,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5554,
									"end": 5621,
									"name": "tag",
									"source": 12,
									"value": "119"
								},
								{
									"begin": 5554,
									"end": 5621,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5648,
									"end": 5649,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 5672,
									"end": 5676,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 5659,
									"end": 5676,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 5659,
									"end": 5676,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5704,
									"end": 5706,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 5696,
									"end": 5702,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 5693,
									"end": 5707,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 5721,
									"end": 5722,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 5716,
									"end": 6334,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 5716,
									"end": 6334,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 5716,
									"end": 6334,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "121"
								},
								{
									"begin": 5716,
									"end": 6334,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 6378,
									"end": 6379,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 6395,
									"end": 6401,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 6392,
									"end": 6469,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 6392,
									"end": 6469,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "122"
								},
								{
									"begin": 6392,
									"end": 6469,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 6444,
									"end": 6453,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6439,
									"end": 6442,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 6435,
									"end": 6454,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6429,
									"end": 6455,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 6420,
									"end": 6455,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 6420,
									"end": 6455,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6392,
									"end": 6469,
									"name": "tag",
									"source": 12,
									"value": "122"
								},
								{
									"begin": 6392,
									"end": 6469,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6495,
									"end": 6562,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "123"
								},
								{
									"begin": 6555,
									"end": 6561,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 6548,
									"end": 6553,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6495,
									"end": 6562,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 6495,
									"end": 6562,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6495,
									"end": 6562,
									"name": "tag",
									"source": 12,
									"value": "123"
								},
								{
									"begin": 6495,
									"end": 6562,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6489,
									"end": 6493,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 6482,
									"end": 6563,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 6351,
									"end": 6573,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5686,
									"end": 6573,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "120"
								},
								{
									"begin": 5686,
									"end": 6573,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5716,
									"end": 6334,
									"name": "tag",
									"source": 12,
									"value": "121"
								},
								{
									"begin": 5716,
									"end": 6334,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5768,
									"end": 5772,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 5764,
									"end": 5773,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 5756,
									"end": 5762,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 5752,
									"end": 5774,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 5802,
									"end": 5839,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "124"
								},
								{
									"begin": 5834,
									"end": 5838,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 5802,
									"end": 5839,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 5802,
									"end": 5839,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5802,
									"end": 5839,
									"name": "tag",
									"source": 12,
									"value": "124"
								},
								{
									"begin": 5802,
									"end": 5839,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5861,
									"end": 5862,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "tag",
									"source": 12,
									"value": "125"
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5889,
									"end": 5896,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5886,
									"end": 5887,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 5883,
									"end": 5897,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "127"
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 5968,
									"end": 5977,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 5963,
									"end": 5966,
									"name": "DUP10",
									"source": 12
								},
								{
									"begin": 5959,
									"end": 5978,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 5953,
									"end": 5979,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 5945,
									"end": 5951,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5938,
									"end": 5980,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 6019,
									"end": 6020,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 6011,
									"end": 6017,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6007,
									"end": 6021,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 5997,
									"end": 6021,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 5997,
									"end": 6021,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6066,
									"end": 6068,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 6055,
									"end": 6064,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 6051,
									"end": 6069,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6038,
									"end": 6069,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 6038,
									"end": 6069,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5912,
									"end": 5916,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 5909,
									"end": 5910,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 5905,
									"end": 5917,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 5900,
									"end": 5917,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 5900,
									"end": 5917,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "125"
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "tag",
									"source": 12,
									"value": "127"
								},
								{
									"begin": 5875,
									"end": 6083,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6111,
									"end": 6117,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 6102,
									"end": 6109,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 6099,
									"end": 6118,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 6096,
									"end": 6275,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 6096,
									"end": 6275,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "128"
								},
								{
									"begin": 6096,
									"end": 6275,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 6169,
									"end": 6178,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 6164,
									"end": 6167,
									"name": "DUP10",
									"source": 12
								},
								{
									"begin": 6160,
									"end": 6179,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6154,
									"end": 6180,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 6212,
									"end": 6260,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "129"
								},
								{
									"begin": 6254,
									"end": 6258,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 6246,
									"end": 6252,
									"name": "DUP10",
									"source": 12
								},
								{
									"begin": 6242,
									"end": 6259,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 6231,
									"end": 6240,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6212,
									"end": 6260,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 6212,
									"end": 6260,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6212,
									"end": 6260,
									"name": "tag",
									"source": 12,
									"value": "129"
								},
								{
									"begin": 6212,
									"end": 6260,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6204,
									"end": 6210,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 6197,
									"end": 6261,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 6119,
									"end": 6275,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6096,
									"end": 6275,
									"name": "tag",
									"source": 12,
									"value": "128"
								},
								{
									"begin": 6096,
									"end": 6275,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6321,
									"end": 6322,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 6317,
									"end": 6318,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 6309,
									"end": 6315,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 6305,
									"end": 6319,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 6301,
									"end": 6323,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6295,
									"end": 6299,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 6288,
									"end": 6324,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 5723,
									"end": 6334,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5723,
									"end": 6334,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5723,
									"end": 6334,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5686,
									"end": 6573,
									"name": "tag",
									"source": 12,
									"value": "120"
								},
								{
									"begin": 5686,
									"end": 6573,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5686,
									"end": 6573,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5276,
									"end": 6579,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5276,
									"end": 6579,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5276,
									"end": 6579,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5184,
									"end": 6579,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5184,
									"end": 6579,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5184,
									"end": 6579,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6585,
									"end": 6703,
									"name": "tag",
									"source": 12,
									"value": "51"
								},
								{
									"begin": 6585,
									"end": 6703,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6672,
									"end": 6696,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "131"
								},
								{
									"begin": 6690,
									"end": 6695,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 6672,
									"end": 6696,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 6672,
									"end": 6696,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6672,
									"end": 6696,
									"name": "tag",
									"source": 12,
									"value": "131"
								},
								{
									"begin": 6672,
									"end": 6696,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6667,
									"end": 6670,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6660,
									"end": 6697,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 6585,
									"end": 6703,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6585,
									"end": 6703,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6585,
									"end": 6703,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6709,
									"end": 6931,
									"name": "tag",
									"source": 12,
									"value": "15"
								},
								{
									"begin": 6709,
									"end": 6931,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6802,
									"end": 6806,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 6840,
									"end": 6842,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 6829,
									"end": 6838,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6825,
									"end": 6843,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6817,
									"end": 6843,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 6817,
									"end": 6843,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6853,
									"end": 6924,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "133"
								},
								{
									"begin": 6921,
									"end": 6922,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 6910,
									"end": 6919,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 6906,
									"end": 6923,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6897,
									"end": 6903,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 6853,
									"end": 6924,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "51"
								},
								{
									"begin": 6853,
									"end": 6924,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6853,
									"end": 6924,
									"name": "tag",
									"source": 12,
									"value": "133"
								},
								{
									"begin": 6853,
									"end": 6924,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6709,
									"end": 6931,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 6709,
									"end": 6931,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 6709,
									"end": 6931,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6709,
									"end": 6931,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6709,
									"end": 6931,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "tag",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "1654"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 775,
									"end": 9679,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122021f293dd8c949a1e75cea771275a9fdf34eb94db78f4c7618c2a6e239766a10164736f6c63430008140033",
									".code": [
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "79CC6790"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "A88DF21A"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "DD62ED3E"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "DD62ED3E"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "EB2CD258"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "F2FDE38B"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "F40FA4BC"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "A88DF21A"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "A9059CBB"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "C38F2BFE"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "DB006A75"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "8DA5CB5B"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "8DA5CB5B"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "92054FE7"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "95D89B41"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "A492FBC6"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "79CC6790"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "8705FCD4"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "8B7B23EE"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "313CE567"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "42966C68"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "38"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "42966C68"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "559E775B"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "715018A6"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "38"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "313CE567"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "35975A37"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "40C10F19"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "41275358"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "16F9B467"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "16F9B467"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "18160DDD"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "19F04174"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "23B872DD"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "29CD242"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "6FDDE03"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "95EA7B3"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "tag",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 775,
											"end": 9679,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 1171,
											"end": 1203,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "tag",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 1171,
											"end": 1203,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "tag",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 7023,
											"end": 7199,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "tag",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "tag",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 9582,
											"end": 9677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "tag",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 9582,
											"end": 9677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "tag",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 3002,
											"end": 3084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 3002,
											"end": 3084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "tag",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 3743,
											"end": 3815,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "tag",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "tag",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 4122,
											"end": 4651,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "tag",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "76"
										},
										{
											"begin": 4122,
											"end": 4651,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "tag",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "tag",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "77"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 1990,
											"end": 2023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "tag",
											"source": 11,
											"value": "77"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "79"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 1990,
											"end": 2023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "tag",
											"source": 11,
											"value": "79"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "tag",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 8831,
											"end": 9049,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "tag",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 8831,
											"end": 9049,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "tag",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 8831,
											"end": 9049,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 5886,
											"end": 6077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "tag",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 5886,
											"end": 6077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "tag",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "tag",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 1689,
											"end": 1713,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "tag",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 1689,
											"end": 1713,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "tag",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "tag",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 1474,
											"end": 1514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "tag",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 1474,
											"end": 1514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "tag",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 9230,
											"end": 9450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "tag",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "117"
										},
										{
											"begin": 9230,
											"end": 9450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "tag",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "118"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 9230,
											"end": 9450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "tag",
											"source": 11,
											"value": "118"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "tag",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "119"
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 3405,
											"end": 3737,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "tag",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "121"
										},
										{
											"begin": 3405,
											"end": 3737,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "tag",
											"source": 11,
											"value": "119"
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "tag",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "127"
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 6689,
											"end": 6884,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "tag",
											"source": 11,
											"value": "127"
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "129"
										},
										{
											"begin": 6689,
											"end": 6884,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "tag",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 5044,
											"end": 5706,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "tag",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 5044,
											"end": 5706,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "tag",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "tag",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "139"
										},
										{
											"begin": 1957,
											"end": 1984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "tag",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 1957,
											"end": 1984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "tag",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "145"
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 6256,
											"end": 6493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "tag",
											"source": 11,
											"value": "145"
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 6256,
											"end": 6493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "tag",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "tag",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1654"
										},
										{
											"begin": 1171,
											"end": 1203,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1171,
											"end": 1203,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4382,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 4398,
											"end": 4408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 4398,
											"end": 4410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "tag",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 4429,
											"end": 4434,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "tag",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 7023,
											"end": 7199,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7103,
											"end": 7111,
											"modifierDepth": 1,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1654"
										},
										{
											"begin": 7103,
											"end": 7121,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7103,
											"end": 7121,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7121,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 7130,
											"end": 7134,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 7103,
											"end": 7136,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "165"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7103,
											"end": 7136,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "165"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 7103,
											"end": 7136,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 7103,
											"end": 7136,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7088,
											"end": 7100,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 7088,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7088,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7088,
											"end": 7136,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 7088,
											"end": 7136,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7191,
											"modifierDepth": 1,
											"name": "SELFBALANCE",
											"source": 11
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "A3FAF2F1EB729D9E646E40F512A8458C02057EE480D3B576A37E8A8AB30F0555"
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7152,
											"end": 7192,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 11
										},
										{
											"begin": 7023,
											"end": 7199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3196,
											"end": 3203,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "tag",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9632,
											"end": 9639,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9658,
											"end": 9670,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 9658,
											"end": 9670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 9651,
											"end": 9670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9651,
											"end": 9670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9677,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5142,
											"end": 5157,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 5160,
											"end": 5170,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 5160,
											"end": 5172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5204,
											"end": 5211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3051,
											"end": 3056,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3075,
											"end": 3077,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3068,
											"end": 3077,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3068,
											"end": 3077,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3002,
											"end": 3084,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "tag",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 3743,
											"end": 3815,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3804,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3796,
											"end": 3801,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 3796,
											"end": 3801,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 3796,
											"end": 3808,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3743,
											"end": 3815,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "tag",
											"source": 11,
											"value": "76"
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2356,
											"end": 2377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 2356,
											"end": 2375,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 2356,
											"end": 2377,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2356,
											"end": 2377,
											"name": "tag",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 2356,
											"end": 2377,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1323,
											"end": 1327,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "3E8"
										},
										{
											"begin": 4207,
											"end": 4214,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4207,
											"end": 4221,
											"modifierDepth": 1,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 4203,
											"end": 4248,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4203,
											"end": 4248,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 4203,
											"end": 4248,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "2B4DB67A00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4248,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4203,
											"end": 4248,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 4203,
											"end": 4248,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4259,
											"end": 4273,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4276,
											"end": 4301,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 4293,
											"end": 4300,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4276,
											"end": 4292,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "186"
										},
										{
											"begin": 4276,
											"end": 4301,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4276,
											"end": 4301,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 4276,
											"end": 4301,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4259,
											"end": 4301,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4259,
											"end": 4301,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4312,
											"end": 4339,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4352,
											"end": 4356,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 4352,
											"end": 4356,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4342,
											"end": 4349,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4342,
											"end": 4356,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 4342,
											"end": 4356,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4342,
											"end": 4356,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4342,
											"end": 4356,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 4342,
											"end": 4356,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4342,
											"end": 4356,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 4342,
											"end": 4356,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4312,
											"end": 4356,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4312,
											"end": 4356,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4393,
											"end": 4412,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4390,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4412,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 4383,
											"end": 4412,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4412,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4412,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "190"
										},
										{
											"begin": 4383,
											"end": 4412,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4412,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 4383,
											"end": 4412,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4378,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 4366,
											"end": 4378,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 4366,
											"end": 4413,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 4366,
											"end": 4413,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4424,
											"end": 4505,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 4451,
											"end": 4459,
											"modifierDepth": 1,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1654"
										},
										{
											"begin": 4461,
											"end": 4471,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4473,
											"end": 4483,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4485,
											"end": 4504,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4424,
											"end": 4450,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 4424,
											"end": 4505,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4424,
											"end": 4505,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 4424,
											"end": 4505,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4516,
											"end": 4580,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 4522,
											"end": 4530,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1375,
											"end": 1379,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "3E8"
										},
										{
											"begin": 4542,
											"end": 4561,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 4542,
											"end": 4561,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4533,
											"end": 4539,
											"modifierDepth": 1,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4533,
											"end": 4561,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 4533,
											"end": 4561,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4533,
											"end": 4561,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4533,
											"end": 4561,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 4533,
											"end": 4561,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4533,
											"end": 4561,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 4533,
											"end": 4561,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4532,
											"end": 4579,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 4532,
											"end": 4579,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4532,
											"end": 4579,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4532,
											"end": 4579,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 4532,
											"end": 4579,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4532,
											"end": 4579,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 4532,
											"end": 4579,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4516,
											"end": 4521,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "199"
										},
										{
											"begin": 4516,
											"end": 4580,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4516,
											"end": 4580,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 4516,
											"end": 4580,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4636,
											"end": 4643,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4628,
											"end": 4634,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4611,
											"end": 4626,
											"modifierDepth": 1,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "79D4FBA3FC168DBD2A0C2A5235112B3442D90A21282F7B69506D05A46FDBBB7"
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4596,
											"end": 4644,
											"modifierDepth": 1,
											"name": "LOG4",
											"source": 11
										},
										{
											"begin": 4193,
											"end": 4651,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4193,
											"end": 4651,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "200"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 2398,
											"end": 2418,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "tag",
											"source": 10,
											"value": "200"
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4122,
											"end": 4651,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "tag",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 2023,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 672,
											"end": 698,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 678,
											"end": 690,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "204"
										},
										{
											"begin": 678,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 678,
											"end": 690,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 678,
											"end": 690,
											"name": "tag",
											"source": 4,
											"value": "204"
										},
										{
											"begin": 678,
											"end": 690,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 692,
											"end": 697,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 672,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 672,
											"end": 698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 672,
											"end": 698,
											"name": "tag",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 672,
											"end": 698,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "tag",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8893,
											"end": 8900,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1375,
											"end": 1379,
											"name": "PUSH",
											"source": 11,
											"value": "3E8"
										},
										{
											"begin": 8998,
											"end": 9010,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 8998,
											"end": 9010,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 8961,
											"end": 8980,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 8961,
											"end": 8980,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 8943,
											"end": 8956,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 8943,
											"end": 8954,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 8943,
											"end": 8956,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8943,
											"end": 8956,
											"name": "tag",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 8943,
											"end": 8956,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8939,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8957,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "208"
										},
										{
											"begin": 8932,
											"end": 8957,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8957,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8957,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 8932,
											"end": 8957,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8957,
											"name": "tag",
											"source": 11,
											"value": "208"
										},
										{
											"begin": 8932,
											"end": 8957,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8981,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "209"
										},
										{
											"begin": 8932,
											"end": 8981,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8981,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8981,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 8932,
											"end": 8981,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8932,
											"end": 8981,
											"name": "tag",
											"source": 11,
											"value": "209"
										},
										{
											"begin": 8932,
											"end": 8981,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 9011,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 8931,
											"end": 9011,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 9011,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 9011,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 8931,
											"end": 9011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 9011,
											"name": "tag",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 8931,
											"end": 9011,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 9042,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 8931,
											"end": 9042,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 9042,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 9042,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 8931,
											"end": 9042,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 9042,
											"name": "tag",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 8931,
											"end": 9042,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8912,
											"end": 9042,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8912,
											"end": 9042,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8831,
											"end": 9049,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3400,
											"end": 3407,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "219"
										},
										{
											"begin": 1112,
											"end": 1119,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1121,
											"end": 1133,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "220"
										},
										{
											"begin": 1121,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 1121,
											"end": 1133,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1121,
											"end": 1133,
											"name": "tag",
											"source": 4,
											"value": "220"
										},
										{
											"begin": 1121,
											"end": 1133,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1135,
											"end": 1140,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "173"
										},
										{
											"begin": 1096,
											"end": 1141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "tag",
											"source": 4,
											"value": "219"
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "221"
										},
										{
											"begin": 1157,
											"end": 1164,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1166,
											"end": 1171,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 1151,
											"end": 1172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "tag",
											"source": 4,
											"value": "221"
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "tag",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5956,
											"end": 5987,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 5978,
											"end": 5986,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5956,
											"end": 5977,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 5956,
											"end": 5987,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5956,
											"end": 5987,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 5956,
											"end": 5987,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6018,
											"end": 6026,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6007,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 5997,
											"end": 6007,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 5997,
											"end": 6027,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6061,
											"end": 6069,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "446E39BCF1B47CFADFAA23442CB4B34682CFE6BD9220DA084894E3B1F834E4F3"
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6043,
											"end": 6070,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 6077,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "tag",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1689,
											"end": 1713,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1716,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "tag",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1474,
											"end": 1514,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "230"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "230"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "tag",
											"source": 11,
											"value": "117"
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9294,
											"end": 9301,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1375,
											"end": 1379,
											"name": "PUSH",
											"source": 11,
											"value": "3E8"
										},
										{
											"begin": 9398,
											"end": 9411,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 9398,
											"end": 9409,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 9398,
											"end": 9411,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9398,
											"end": 9411,
											"name": "tag",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 9398,
											"end": 9411,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9361,
											"end": 9380,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 9361,
											"end": 9380,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 9344,
											"end": 9356,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 9344,
											"end": 9356,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 9334,
											"end": 9341,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 9334,
											"end": 9356,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 9334,
											"end": 9356,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9334,
											"end": 9356,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9334,
											"end": 9356,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 9334,
											"end": 9356,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9334,
											"end": 9356,
											"name": "tag",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 9334,
											"end": 9356,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9333,
											"end": 9381,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 9333,
											"end": 9381,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9333,
											"end": 9381,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9333,
											"end": 9381,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 9333,
											"end": 9381,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9333,
											"end": 9381,
											"name": "tag",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 9333,
											"end": 9381,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9412,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 9332,
											"end": 9412,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9412,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9412,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 9332,
											"end": 9412,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9412,
											"name": "tag",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 9332,
											"end": 9412,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9443,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "239"
										},
										{
											"begin": 9332,
											"end": 9443,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9443,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9443,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 9332,
											"end": 9443,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9443,
											"name": "tag",
											"source": 11,
											"value": "239"
										},
										{
											"begin": 9332,
											"end": 9443,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9313,
											"end": 9443,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9313,
											"end": 9443,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9230,
											"end": 9450,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "tag",
											"source": 11,
											"value": "121"
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 3481,
											"end": 3486,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3480,
											"end": 3486,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3472,
											"end": 3487,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 3472,
											"end": 3487,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3472,
											"end": 3487,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3472,
											"end": 3487,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3472,
											"end": 3487,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3472,
											"end": 3487,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 3472,
											"end": 3487,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3497,
											"end": 3568,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 3524,
											"end": 3532,
											"modifierDepth": 1,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1654"
										},
										{
											"begin": 3534,
											"end": 3544,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3554,
											"end": 3558,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 3561,
											"end": 3567,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3497,
											"end": 3523,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 3497,
											"end": 3568,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3497,
											"end": 3568,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 3497,
											"end": 3568,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3578,
											"end": 3603,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 3584,
											"end": 3594,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3602,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3578,
											"end": 3583,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "199"
										},
										{
											"begin": 3578,
											"end": 3603,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3578,
											"end": 3603,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 3578,
											"end": 3603,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3613,
											"end": 3671,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 3622,
											"end": 3664,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "DEAD"
										},
										{
											"begin": 3666,
											"end": 3670,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "3E8"
										},
										{
											"begin": 3613,
											"end": 3621,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 3613,
											"end": 3671,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3613,
											"end": 3671,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 3613,
											"end": 3671,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3613,
											"end": 3671,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3705,
											"modifierDepth": 1,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1654"
										},
										{
											"begin": 3697,
											"end": 3715,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3697,
											"end": 3715,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3715,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 3724,
											"end": 3728,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 3697,
											"end": 3730,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3697,
											"end": 3730,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 3697,
											"end": 3730,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 3697,
											"end": 3730,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3682,
											"end": 3694,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 3682,
											"end": 3730,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3682,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3682,
											"end": 3730,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 3682,
											"end": 3730,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3737,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3695,
											"end": 3708,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 3711,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 3711,
											"end": 3723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "tag",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 3743,
											"end": 3748,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "tag",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3777,
											"end": 3781,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "tag",
											"source": 11,
											"value": "129"
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6767,
											"end": 6770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 6757,
											"end": 6764,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6757,
											"end": 6770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFF"
										},
										{
											"begin": 6757,
											"end": 6770,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6757,
											"end": 6770,
											"modifierDepth": 1,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 6757,
											"end": 6786,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6757,
											"end": 6786,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 6757,
											"end": 6786,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6757,
											"end": 6786,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6784,
											"end": 6786,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 6774,
											"end": 6781,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6774,
											"end": 6786,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFF"
										},
										{
											"begin": 6774,
											"end": 6786,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6774,
											"end": 6786,
											"modifierDepth": 1,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 6757,
											"end": 6786,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 6757,
											"end": 6786,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6754,
											"end": 6814,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6754,
											"end": 6814,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 6754,
											"end": 6814,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "7F176CEE00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6795,
											"end": 6814,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 6754,
											"end": 6814,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 6754,
											"end": 6814,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6832,
											"end": 6839,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6825,
											"end": 6839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFF"
										},
										{
											"begin": 6825,
											"end": 6839,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6825,
											"end": 6829,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 6825,
											"end": 6839,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6825,
											"end": 6839,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6825,
											"end": 6839,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 6825,
											"end": 6839,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "9DE4E85041D310D87DF38A671E7ECF270C37D73EA017960B904AF70512059621"
										},
										{
											"begin": 6869,
											"end": 6876,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 6854,
											"end": 6877,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6854,
											"end": 6877,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6884,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "tag",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2356,
											"end": 2377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 2356,
											"end": 2375,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 2356,
											"end": 2377,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2356,
											"end": 2377,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 2356,
											"end": 2377,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1323,
											"end": 1327,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "3E8"
										},
										{
											"begin": 5113,
											"end": 5120,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5113,
											"end": 5127,
											"modifierDepth": 1,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 5109,
											"end": 5154,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5109,
											"end": 5154,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "264"
										},
										{
											"begin": 5109,
											"end": 5154,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "2B4DB67A00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5136,
											"end": 5154,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5109,
											"end": 5154,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "264"
										},
										{
											"begin": 5109,
											"end": 5154,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5165,
											"end": 5179,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5182,
											"end": 5207,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 5199,
											"end": 5206,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5182,
											"end": 5198,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "266"
										},
										{
											"begin": 5182,
											"end": 5207,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5182,
											"end": 5207,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 5182,
											"end": 5207,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5165,
											"end": 5207,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5165,
											"end": 5207,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5218,
											"end": 5245,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5258,
											"end": 5262,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 5258,
											"end": 5262,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 5248,
											"end": 5255,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5248,
											"end": 5262,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "267"
										},
										{
											"begin": 5248,
											"end": 5262,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5248,
											"end": 5262,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5248,
											"end": 5262,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 5248,
											"end": 5262,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5248,
											"end": 5262,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "267"
										},
										{
											"begin": 5248,
											"end": 5262,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5218,
											"end": 5262,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5218,
											"end": 5262,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5272,
											"end": 5295,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1375,
											"end": 1379,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "3E8"
										},
										{
											"begin": 5309,
											"end": 5328,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 5309,
											"end": 5328,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 5299,
											"end": 5306,
											"modifierDepth": 1,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5299,
											"end": 5328,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "268"
										},
										{
											"begin": 5299,
											"end": 5328,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5299,
											"end": 5328,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5299,
											"end": 5328,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 5299,
											"end": 5328,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5299,
											"end": 5328,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "268"
										},
										{
											"begin": 5299,
											"end": 5328,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5298,
											"end": 5346,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 5298,
											"end": 5346,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5298,
											"end": 5346,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5298,
											"end": 5346,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 5298,
											"end": 5346,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5298,
											"end": 5346,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 5298,
											"end": 5346,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5272,
											"end": 5346,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5272,
											"end": 5346,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5391,
											"end": 5410,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5373,
											"end": 5388,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5373,
											"end": 5410,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "270"
										},
										{
											"begin": 5373,
											"end": 5410,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5373,
											"end": 5410,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5373,
											"end": 5410,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 5373,
											"end": 5410,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5373,
											"end": 5410,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "270"
										},
										{
											"begin": 5373,
											"end": 5410,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5368,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 5356,
											"end": 5368,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "190"
										},
										{
											"begin": 5356,
											"end": 5411,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 5356,
											"end": 5411,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5422,
											"end": 5447,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "272"
										},
										{
											"begin": 5428,
											"end": 5438,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5440,
											"end": 5446,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5422,
											"end": 5427,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 5422,
											"end": 5447,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5422,
											"end": 5447,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "272"
										},
										{
											"begin": 5422,
											"end": 5447,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5458,
											"end": 5542,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 5485,
											"end": 5493,
											"modifierDepth": 1,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1654"
										},
										{
											"begin": 5503,
											"end": 5507,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5510,
											"end": 5520,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5522,
											"end": 5541,
											"modifierDepth": 1,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5458,
											"end": 5484,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 5458,
											"end": 5542,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5458,
											"end": 5542,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 5458,
											"end": 5542,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5553,
											"end": 5633,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 5580,
											"end": 5588,
											"modifierDepth": 1,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1654"
										},
										{
											"begin": 5598,
											"end": 5602,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 5605,
											"end": 5615,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5617,
											"end": 5632,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5553,
											"end": 5579,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 5553,
											"end": 5633,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5553,
											"end": 5633,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 5553,
											"end": 5633,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5691,
											"end": 5698,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5683,
											"end": 5689,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5666,
											"end": 5681,
											"modifierDepth": 1,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "1BE07AD598D802B0A04E208E5F3DFE7EAF27339C0F0E4A75DDBA517BBE5C8F36"
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5699,
											"modifierDepth": 1,
											"name": "LOG4",
											"source": 11
										},
										{
											"begin": 5099,
											"end": 5706,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5099,
											"end": 5706,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5099,
											"end": 5706,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 2398,
											"end": 2418,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "tag",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5044,
											"end": 5706,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5044,
											"end": 5706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3964,
											"end": 3969,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3971,
											"end": 3978,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "tag",
											"source": 11,
											"value": "139"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1957,
											"end": 1984,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "278"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "278"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2647,
											"end": 2648,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2635,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "280"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "281"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 2672,
											"end": 2703,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "281"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "280"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "282"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "282"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "tag",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "284"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "284"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6343,
											"end": 6346,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "3D4"
										},
										{
											"begin": 6333,
											"end": 6340,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6333,
											"end": 6346,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFF"
										},
										{
											"begin": 6333,
											"end": 6346,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6333,
											"end": 6346,
											"modifierDepth": 1,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 6333,
											"end": 6363,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6333,
											"end": 6363,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "286"
										},
										{
											"begin": 6333,
											"end": 6363,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6333,
											"end": 6363,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6360,
											"end": 6363,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "3B6"
										},
										{
											"begin": 6350,
											"end": 6357,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6350,
											"end": 6363,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFF"
										},
										{
											"begin": 6350,
											"end": 6363,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6350,
											"end": 6363,
											"modifierDepth": 1,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 6333,
											"end": 6363,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "286"
										},
										{
											"begin": 6333,
											"end": 6363,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6330,
											"end": 6400,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6330,
											"end": 6400,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "287"
										},
										{
											"begin": 6330,
											"end": 6400,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "48565AD500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6372,
											"end": 6400,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 6330,
											"end": 6400,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "287"
										},
										{
											"begin": 6330,
											"end": 6400,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6432,
											"end": 6439,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6410,
											"end": 6439,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "FFFF"
										},
										{
											"begin": 6410,
											"end": 6439,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6410,
											"end": 6429,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 6410,
											"end": 6439,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6410,
											"end": 6439,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6410,
											"end": 6439,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 6410,
											"end": 6439,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "A7AAF5668E7D5E60BFA38B5D07A3178204A2D8CB16F5A03678C20F42C7954295"
										},
										{
											"begin": 6478,
											"end": 6485,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 6454,
											"end": 6486,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6454,
											"end": 6486,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6256,
											"end": 6493,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 656,
											"end": 752,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 709,
											"end": 716,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 728,
											"end": 745,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 728,
											"end": 745,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 656,
											"end": 752,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 656,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "291"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "292"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 2,
											"value": "291"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 1866,
											"end": 1876,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1866,
											"end": 1878,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "tag",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 1855,
											"end": 1860,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1855,
											"end": 1862,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "tag",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "296"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "297"
										},
										{
											"begin": 1928,
											"end": 1938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1928,
											"end": 1940,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "tag",
											"source": 0,
											"value": "297"
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "298"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1901,
											"end": 1941,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "tag",
											"source": 0,
											"value": "298"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "tag",
											"source": 0,
											"value": "296"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 10799,
											"end": 10804,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10806,
											"end": 10813,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10789,
											"end": 10798,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 10789,
											"end": 10814,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "tag",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10848,
											"end": 10865,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10828,
											"end": 10844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "301"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "302"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10963,
											"end": 10970,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10972,
											"end": 10988,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10990,
											"end": 10995,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "303"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "304"
										},
										{
											"begin": 10936,
											"end": 10996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "tag",
											"source": 2,
											"value": "303"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 2,
											"value": "302"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "292"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "tag",
											"source": 2,
											"value": "301"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5755,
											"end": 5756,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5739,
											"end": 5743,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "307"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "308"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5780,
											"end": 5810,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "tag",
											"source": 2,
											"value": "308"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 2,
											"value": "307"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5848,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5834,
											"end": 5836,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "309"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "310"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5873,
											"end": 5905,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "tag",
											"source": 2,
											"value": "310"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 2,
											"value": "309"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "311"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "312"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "tag",
											"source": 2,
											"value": "311"
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2431,
											"end": 2738,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 2431,
											"end": 2738,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1756,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2558,
											"end": 2565,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 2558,
											"end": 2565,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2558,
											"end": 2576,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2554,
											"end": 2640,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 2554,
											"end": 2640,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "PUSH",
											"source": 10,
											"value": "3EE5AEB500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2599,
											"end": 2629,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2554,
											"end": 2640,
											"name": "tag",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 2554,
											"end": 2640,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1756,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2714,
											"end": 2721,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 2714,
											"end": 2731,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2714,
											"end": 2731,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2714,
											"end": 2731,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2714,
											"end": 2731,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2431,
											"end": 2738,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7855,
											"end": 7993,
											"name": "tag",
											"source": 11,
											"value": "186"
										},
										{
											"begin": 7855,
											"end": 7993,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7919,
											"end": 7926,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7973,
											"end": 7985,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 7973,
											"end": 7985,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7955,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "316"
										},
										{
											"begin": 7955,
											"end": 7966,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 7955,
											"end": 7968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7955,
											"end": 7968,
											"name": "tag",
											"source": 11,
											"value": "316"
										},
										{
											"begin": 7955,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7946,
											"end": 7952,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7946,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "317"
										},
										{
											"begin": 7946,
											"end": 7968,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7946,
											"end": 7968,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7946,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 7946,
											"end": 7968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7946,
											"end": 7968,
											"name": "tag",
											"source": 11,
											"value": "317"
										},
										{
											"begin": 7946,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7945,
											"end": 7986,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "318"
										},
										{
											"begin": 7945,
											"end": 7986,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7945,
											"end": 7986,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7945,
											"end": 7986,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 7945,
											"end": 7986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7945,
											"end": 7986,
											"name": "tag",
											"source": 11,
											"value": "318"
										},
										{
											"begin": 7945,
											"end": 7986,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7938,
											"end": 7986,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7938,
											"end": 7986,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7855,
											"end": 7993,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7855,
											"end": 7993,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7855,
											"end": 7993,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7855,
											"end": 7993,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "tag",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "320"
										},
										{
											"begin": 1822,
											"end": 1827,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1849,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 1865,
											"end": 1869,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1871,
											"end": 1873,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1875,
											"end": 1880,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "321"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "322"
										},
										{
											"begin": 1829,
											"end": 1882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "tag",
											"source": 7,
											"value": "321"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1802,
											"end": 1821,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "323"
										},
										{
											"begin": 1802,
											"end": 1883,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "tag",
											"source": 7,
											"value": "320"
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "tag",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7810,
											"end": 7811,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7791,
											"end": 7798,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "325"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7864,
											"end": 7865,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "326"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 7835,
											"end": 7867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "tag",
											"source": 2,
											"value": "326"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 2,
											"value": "325"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "327"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7907,
											"end": 7914,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7916,
											"end": 7921,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7887,
											"end": 7894,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "312"
										},
										{
											"begin": 7887,
											"end": 7922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "tag",
											"source": 2,
											"value": "327"
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7721,
											"end": 7929,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2744,
											"end": 2952,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 2744,
											"end": 2952,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1713,
											"end": 1714,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2924,
											"end": 2931,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 2924,
											"end": 2945,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2924,
											"end": 2945,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2924,
											"end": 2945,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2924,
											"end": 2945,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2744,
											"end": 2952,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8336,
											"end": 8337,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8324,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "330"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "331"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 8361,
											"end": 8391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "tag",
											"source": 2,
											"value": "331"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 2,
											"value": "330"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "332"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "312"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "tag",
											"source": 2,
											"value": "332"
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8247,
											"end": 8453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3010,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3026,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3020,
											"end": 3026,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3083,
											"end": 3091,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3073,
											"end": 3081,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8327,
											"end": 8547,
											"name": "tag",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 8327,
											"end": 8547,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8429,
											"end": 8434,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8419,
											"end": 8531,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 8419,
											"end": 8531,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8467,
											"end": 8481,
											"name": "PUSH",
											"source": 11,
											"value": "5A65726F20616464726573730000000000000000000000000000000000000000"
										},
										{
											"begin": 8461,
											"end": 8465,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8454,
											"end": 8482,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8512,
											"end": 8516,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8506,
											"end": 8510,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8499,
											"end": 8517,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 8419,
											"end": 8531,
											"name": "tag",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 8419,
											"end": 8531,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8327,
											"end": 8547,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8327,
											"end": 8547,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7550,
											"end": 7686,
											"name": "tag",
											"source": 11,
											"value": "266"
										},
										{
											"begin": 7550,
											"end": 7686,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7614,
											"end": 7621,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7666,
											"end": 7679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 7666,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 7666,
											"end": 7679,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7666,
											"end": 7679,
											"name": "tag",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 7666,
											"end": 7679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7650,
											"end": 7662,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 7650,
											"end": 7662,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7641,
											"end": 7647,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "338"
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 7641,
											"end": 7662,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "tag",
											"source": 11,
											"value": "338"
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7640,
											"end": 7679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 7640,
											"end": 7679,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7640,
											"end": 7679,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7640,
											"end": 7679,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 7640,
											"end": 7679,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7640,
											"end": 7679,
											"name": "tag",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 7640,
											"end": 7679,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7633,
											"end": 7679,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7633,
											"end": 7679,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7550,
											"end": 7686,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7550,
											"end": 7686,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7550,
											"end": 7686,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7550,
											"end": 7686,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 2,
											"value": "292"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10078,
											"end": 10079,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10061,
											"end": 10066,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "341"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "342"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 10103,
											"end": 10135,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "tag",
											"source": 2,
											"value": "342"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 2,
											"value": "341"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10178,
											"end": 10179,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10159,
											"end": 10166,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "343"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 10203,
											"end": 10234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "tag",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 2,
											"value": "343"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10284,
											"end": 10289,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10266,
											"end": 10271,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10273,
											"end": 10280,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10303,
											"end": 10312,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "346"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 10333,
											"end": 10364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 2,
											"value": "346"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "tag",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "tag",
											"source": 2,
											"value": "312"
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6376,
											"end": 6377,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6360,
											"end": 6364,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "348"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "349"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 2,
											"value": "349"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "350"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 2,
											"value": "348"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6580,
											"end": 6584,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6617,
											"end": 6622,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6603,
											"end": 6614,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "351"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6674,
											"end": 6678,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6680,
											"end": 6691,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6693,
											"end": 6698,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "352"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "304"
										},
										{
											"begin": 6649,
											"end": 6699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "tag",
											"source": 2,
											"value": "352"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 2,
											"value": "351"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6866,
											"end": 6871,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6852,
											"end": 6863,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 6848,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6534,
											"end": 6896,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 2,
											"value": "350"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6924,
											"end": 6925,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6910,
											"end": 6912,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "353"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7089,
											"end": 7094,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "354"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 2,
											"value": "353"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7301,
											"end": 7306,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7294,
											"end": 7296,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 2,
											"value": "354"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "355"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 7346,
											"end": 7371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 2,
											"value": "355"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "tag",
											"source": 7,
											"value": "323"
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4478,
											"end": 4501,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 4532,
											"end": 4536,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4512,
											"end": 4517,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "358"
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "tag",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4478,
											"end": 4537,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4478,
											"end": 4537,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4572,
											"end": 4573,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4551,
											"end": 4561,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4568,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "359"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4589,
											"end": 4599,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "360"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 4578,
											"end": 4608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "tag",
											"source": 7,
											"value": "360"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4577,
											"end": 4608,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "tag",
											"source": 7,
											"value": "359"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "362"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4664,
											"end": 4669,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 7,
											"value": "5274AFE700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "363"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 4631,
											"end": 4671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "tag",
											"source": 7,
											"value": "363"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "tag",
											"source": 7,
											"value": "362"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4129,
											"end": 4688,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4059,
											"end": 4688,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "tag",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2780,
											"end": 2792,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "365"
										},
										{
											"begin": 2833,
											"end": 2839,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2841,
											"end": 2845,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2811,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 2811,
											"end": 2849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "tag",
											"source": 8,
											"value": "365"
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2804,
											"end": 2849,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2804,
											"end": 2849,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "tag",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3291,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3331,
											"end": 3336,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3307,
											"end": 3328,
											"name": "SELFBALANCE",
											"source": 8
										},
										{
											"begin": 3307,
											"end": 3336,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3394,
											"end": 3398,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 8,
											"value": "CD78605900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "369"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "108"
										},
										{
											"begin": 3359,
											"end": 3400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "tag",
											"source": 8,
											"value": "369"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "tag",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3421,
											"end": 3433,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3435,
											"end": 3458,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3468,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3473,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3462,
											"end": 3473,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3481,
											"end": 3486,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3488,
											"end": 3492,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "370"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "371"
										},
										{
											"begin": 3462,
											"end": 3493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 8,
											"value": "370"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "3F"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "373"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 8,
											"value": "373"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "375"
										},
										{
											"begin": 3537,
											"end": 3543,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3545,
											"end": 3552,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3554,
											"end": 3564,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3510,
											"end": 3536,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 3510,
											"end": 3565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "tag",
											"source": 8,
											"value": "375"
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4769,
											"end": 4781,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4798,
											"end": 4805,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "379"
										},
										{
											"begin": 4829,
											"end": 4839,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4821,
											"end": 4828,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "380"
										},
										{
											"begin": 4821,
											"end": 4840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "tag",
											"source": 8,
											"value": "379"
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5066,
											"end": 5067,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5045,
											"end": 5055,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5062,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5067,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5093,
											"end": 5094,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5071,
											"end": 5077,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 5071,
											"end": 5094,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "tag",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5138,
											"end": 5144,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 8,
											"value": "9996B31500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "108"
										},
										{
											"begin": 5121,
											"end": 5145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "tag",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "tag",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5180,
											"end": 5190,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5743,
											"end": 6259,
											"name": "tag",
											"source": 8,
											"value": "380"
										},
										{
											"begin": 5743,
											"end": 6259,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5894,
											"end": 5895,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5874,
											"end": 5884,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5874,
											"end": 5895,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6102,
											"end": 6112,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6096,
											"end": 6113,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6158,
											"end": 6173,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6145,
											"end": 6155,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6141,
											"end": 6143,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6130,
											"end": 6174,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "tag",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 8,
											"value": "1425EA4200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7,
											"end": 133,
											"name": "tag",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 7,
											"end": 133,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 84,
											"end": 126,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 77,
											"end": 82,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 73,
											"end": 127,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 62,
											"end": 127,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 62,
											"end": 127,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7,
											"end": 133,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7,
											"end": 133,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7,
											"end": 133,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7,
											"end": 133,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 139,
											"end": 199,
											"name": "tag",
											"source": 12,
											"value": "389"
										},
										{
											"begin": 139,
											"end": 199,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 167,
											"end": 170,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 188,
											"end": 193,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 181,
											"end": 193,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 181,
											"end": 193,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 139,
											"end": 199,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 139,
											"end": 199,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 139,
											"end": 199,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 139,
											"end": 199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 205,
											"end": 347,
											"name": "tag",
											"source": 12,
											"value": "390"
										},
										{
											"begin": 205,
											"end": 347,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 255,
											"end": 264,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 288,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 306,
											"end": 340,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "435"
										},
										{
											"begin": 315,
											"end": 339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 333,
											"end": 338,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 315,
											"end": 339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 315,
											"end": 339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 315,
											"end": 339,
											"name": "tag",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 315,
											"end": 339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 306,
											"end": 340,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "389"
										},
										{
											"begin": 306,
											"end": 340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 306,
											"end": 340,
											"name": "tag",
											"source": 12,
											"value": "435"
										},
										{
											"begin": 306,
											"end": 340,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 288,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 288,
											"end": 341,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 288,
											"end": 341,
											"name": "tag",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 288,
											"end": 341,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 275,
											"end": 341,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 275,
											"end": 341,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 205,
											"end": 347,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 205,
											"end": 347,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 205,
											"end": 347,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 205,
											"end": 347,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 353,
											"end": 479,
											"name": "tag",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 353,
											"end": 479,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 403,
											"end": 412,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 436,
											"end": 473,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 467,
											"end": 472,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 436,
											"end": 473,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "390"
										},
										{
											"begin": 436,
											"end": 473,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 436,
											"end": 473,
											"name": "tag",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 436,
											"end": 473,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 423,
											"end": 473,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 423,
											"end": 473,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 353,
											"end": 479,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 353,
											"end": 479,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 353,
											"end": 479,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 353,
											"end": 479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 485,
											"end": 625,
											"name": "tag",
											"source": 12,
											"value": "392"
										},
										{
											"begin": 485,
											"end": 625,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 549,
											"end": 558,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 582,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 613,
											"end": 618,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 582,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 582,
											"end": 619,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 582,
											"end": 619,
											"name": "tag",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 582,
											"end": 619,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 569,
											"end": 619,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 569,
											"end": 619,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 485,
											"end": 625,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 485,
											"end": 625,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 485,
											"end": 625,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 485,
											"end": 625,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 631,
											"end": 790,
											"name": "tag",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 631,
											"end": 790,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 732,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 777,
											"end": 782,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 732,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "392"
										},
										{
											"begin": 732,
											"end": 783,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 732,
											"end": 783,
											"name": "tag",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 732,
											"end": 783,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 727,
											"end": 730,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 720,
											"end": 784,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 631,
											"end": 790,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 631,
											"end": 790,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 631,
											"end": 790,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 796,
											"end": 1046,
											"name": "tag",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 796,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 903,
											"end": 907,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 941,
											"end": 943,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 930,
											"end": 939,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 926,
											"end": 944,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 918,
											"end": 944,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 918,
											"end": 944,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 954,
											"end": 1039,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1025,
											"end": 1034,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1021,
											"end": 1038,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1012,
											"end": 1018,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 954,
											"end": 1039,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 954,
											"end": 1039,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 954,
											"end": 1039,
											"name": "tag",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 954,
											"end": 1039,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 796,
											"end": 1046,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 796,
											"end": 1046,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 796,
											"end": 1046,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 796,
											"end": 1046,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 796,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1052,
											"end": 1151,
											"name": "tag",
											"source": 12,
											"value": "394"
										},
										{
											"begin": 1052,
											"end": 1151,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1104,
											"end": 1110,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1138,
											"end": 1143,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1132,
											"end": 1144,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1122,
											"end": 1144,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1122,
											"end": 1144,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1052,
											"end": 1151,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1052,
											"end": 1151,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1052,
											"end": 1151,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1052,
											"end": 1151,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1157,
											"end": 1326,
											"name": "tag",
											"source": 12,
											"value": "395"
										},
										{
											"begin": 1157,
											"end": 1326,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1241,
											"end": 1252,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1275,
											"end": 1281,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1270,
											"end": 1273,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1263,
											"end": 1282,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1315,
											"end": 1319,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1310,
											"end": 1313,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1306,
											"end": 1320,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1291,
											"end": 1320,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1291,
											"end": 1320,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1157,
											"end": 1326,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1157,
											"end": 1326,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1157,
											"end": 1326,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1157,
											"end": 1326,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1157,
											"end": 1326,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1332,
											"end": 1578,
											"name": "tag",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 1332,
											"end": 1578,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1413,
											"end": 1414,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "tag",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1437,
											"end": 1443,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 1435,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1431,
											"end": 1444,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "450"
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1522,
											"end": 1523,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1517,
											"end": 1520,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1513,
											"end": 1524,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1507,
											"end": 1525,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1503,
											"end": 1504,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1498,
											"end": 1501,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1494,
											"end": 1505,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1487,
											"end": 1526,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1459,
											"end": 1461,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1456,
											"end": 1457,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1452,
											"end": 1462,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1447,
											"end": 1462,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1447,
											"end": 1462,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "tag",
											"source": 12,
											"value": "450"
										},
										{
											"begin": 1423,
											"end": 1536,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1570,
											"end": 1571,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1561,
											"end": 1567,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1556,
											"end": 1559,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1552,
											"end": 1568,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1545,
											"end": 1572,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1394,
											"end": 1578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1332,
											"end": 1578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1332,
											"end": 1578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1332,
											"end": 1578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1332,
											"end": 1578,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1584,
											"end": 1686,
											"name": "tag",
											"source": 12,
											"value": "397"
										},
										{
											"begin": 1584,
											"end": 1686,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1625,
											"end": 1631,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1676,
											"end": 1678,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 1672,
											"end": 1679,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 1667,
											"end": 1669,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 1660,
											"end": 1665,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1656,
											"end": 1670,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1652,
											"end": 1680,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1642,
											"end": 1680,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1642,
											"end": 1680,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1584,
											"end": 1686,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1584,
											"end": 1686,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1584,
											"end": 1686,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1584,
											"end": 1686,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 2069,
											"name": "tag",
											"source": 12,
											"value": "398"
										},
										{
											"begin": 1692,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1780,
											"end": 1783,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1808,
											"end": 1847,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "453"
										},
										{
											"begin": 1841,
											"end": 1846,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1808,
											"end": 1847,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "394"
										},
										{
											"begin": 1808,
											"end": 1847,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1808,
											"end": 1847,
											"name": "tag",
											"source": 12,
											"value": "453"
										},
										{
											"begin": 1808,
											"end": 1847,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1863,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 1927,
											"end": 1933,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1922,
											"end": 1925,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1863,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "395"
										},
										{
											"begin": 1863,
											"end": 1934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1863,
											"end": 1934,
											"name": "tag",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 1863,
											"end": 1934,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1856,
											"end": 1934,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1856,
											"end": 1934,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1943,
											"end": 2008,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "455"
										},
										{
											"begin": 2001,
											"end": 2007,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1996,
											"end": 1999,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1989,
											"end": 1993,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1982,
											"end": 1987,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1978,
											"end": 1994,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1943,
											"end": 2008,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 1943,
											"end": 2008,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1943,
											"end": 2008,
											"name": "tag",
											"source": 12,
											"value": "455"
										},
										{
											"begin": 1943,
											"end": 2008,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2033,
											"end": 2062,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 2055,
											"end": 2061,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2033,
											"end": 2062,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "397"
										},
										{
											"begin": 2033,
											"end": 2062,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2033,
											"end": 2062,
											"name": "tag",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 2033,
											"end": 2062,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2028,
											"end": 2031,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2024,
											"end": 2063,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2017,
											"end": 2063,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2017,
											"end": 2063,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1784,
											"end": 2069,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 2069,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 2069,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 2069,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 2069,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 2069,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2075,
											"end": 2388,
											"name": "tag",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 2075,
											"end": 2388,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2188,
											"end": 2192,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2226,
											"end": 2228,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2215,
											"end": 2224,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2211,
											"end": 2229,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2203,
											"end": 2229,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2203,
											"end": 2229,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2275,
											"end": 2284,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2269,
											"end": 2273,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2265,
											"end": 2285,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2261,
											"end": 2262,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2250,
											"end": 2259,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2246,
											"end": 2263,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2239,
											"end": 2286,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2303,
											"end": 2381,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 2376,
											"end": 2380,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2367,
											"end": 2373,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2303,
											"end": 2381,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "398"
										},
										{
											"begin": 2303,
											"end": 2381,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2303,
											"end": 2381,
											"name": "tag",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 2303,
											"end": 2381,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2295,
											"end": 2381,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2295,
											"end": 2381,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2075,
											"end": 2388,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2075,
											"end": 2388,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2075,
											"end": 2388,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2075,
											"end": 2388,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2075,
											"end": 2388,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2475,
											"end": 2592,
											"name": "tag",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 2475,
											"end": 2592,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2584,
											"end": 2585,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2581,
											"end": 2582,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2721,
											"end": 2817,
											"name": "tag",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 2721,
											"end": 2817,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2758,
											"end": 2765,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2787,
											"end": 2811,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "463"
										},
										{
											"begin": 2805,
											"end": 2810,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2787,
											"end": 2811,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 2787,
											"end": 2811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2787,
											"end": 2811,
											"name": "tag",
											"source": 12,
											"value": "463"
										},
										{
											"begin": 2787,
											"end": 2811,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2776,
											"end": 2811,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2776,
											"end": 2811,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2721,
											"end": 2817,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2721,
											"end": 2817,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2721,
											"end": 2817,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2721,
											"end": 2817,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2823,
											"end": 2945,
											"name": "tag",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 2823,
											"end": 2945,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2896,
											"end": 2920,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 2914,
											"end": 2919,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2896,
											"end": 2920,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 2896,
											"end": 2920,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2896,
											"end": 2920,
											"name": "tag",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 2896,
											"end": 2920,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2889,
											"end": 2894,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2886,
											"end": 2921,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 2876,
											"end": 2939,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "466"
										},
										{
											"begin": 2876,
											"end": 2939,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2935,
											"end": 2936,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2932,
											"end": 2933,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2925,
											"end": 2937,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2876,
											"end": 2939,
											"name": "tag",
											"source": 12,
											"value": "466"
										},
										{
											"begin": 2876,
											"end": 2939,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2823,
											"end": 2945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2823,
											"end": 2945,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 3090,
											"name": "tag",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 2951,
											"end": 3090,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2997,
											"end": 3002,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3035,
											"end": 3041,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3022,
											"end": 3042,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3013,
											"end": 3042,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3013,
											"end": 3042,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3051,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 3078,
											"end": 3083,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3051,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 3051,
											"end": 3084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3051,
											"end": 3084,
											"name": "tag",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 3051,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 3090,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 3090,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 3090,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 3090,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 3090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3096,
											"end": 3173,
											"name": "tag",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 3096,
											"end": 3173,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3133,
											"end": 3140,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3162,
											"end": 3167,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3151,
											"end": 3167,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3151,
											"end": 3167,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3096,
											"end": 3173,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3096,
											"end": 3173,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3096,
											"end": 3173,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3096,
											"end": 3173,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3179,
											"end": 3301,
											"name": "tag",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 3179,
											"end": 3301,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3252,
											"end": 3276,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "471"
										},
										{
											"begin": 3270,
											"end": 3275,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3252,
											"end": 3276,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 3252,
											"end": 3276,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3252,
											"end": 3276,
											"name": "tag",
											"source": 12,
											"value": "471"
										},
										{
											"begin": 3252,
											"end": 3276,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3245,
											"end": 3250,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3242,
											"end": 3277,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 3232,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "472"
										},
										{
											"begin": 3232,
											"end": 3295,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3291,
											"end": 3292,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3288,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3281,
											"end": 3293,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3232,
											"end": 3295,
											"name": "tag",
											"source": 12,
											"value": "472"
										},
										{
											"begin": 3232,
											"end": 3295,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3179,
											"end": 3301,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3179,
											"end": 3301,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3307,
											"end": 3446,
											"name": "tag",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 3307,
											"end": 3446,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3353,
											"end": 3358,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3391,
											"end": 3397,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3378,
											"end": 3398,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3369,
											"end": 3398,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3369,
											"end": 3398,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3407,
											"end": 3440,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "474"
										},
										{
											"begin": 3434,
											"end": 3439,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3407,
											"end": 3440,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 3407,
											"end": 3440,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3407,
											"end": 3440,
											"name": "tag",
											"source": 12,
											"value": "474"
										},
										{
											"begin": 3407,
											"end": 3440,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3307,
											"end": 3446,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3307,
											"end": 3446,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3307,
											"end": 3446,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3307,
											"end": 3446,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3307,
											"end": 3446,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3452,
											"end": 3926,
											"name": "tag",
											"source": 12,
											"value": "50"
										},
										{
											"begin": 3452,
											"end": 3926,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3520,
											"end": 3526,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3528,
											"end": 3534,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3577,
											"end": 3579,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3565,
											"end": 3574,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3556,
											"end": 3563,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3552,
											"end": 3575,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3548,
											"end": 3580,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3545,
											"end": 3664,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3545,
											"end": 3664,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "476"
										},
										{
											"begin": 3545,
											"end": 3664,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3583,
											"end": 3662,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "477"
										},
										{
											"begin": 3583,
											"end": 3662,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 3583,
											"end": 3662,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3583,
											"end": 3662,
											"name": "tag",
											"source": 12,
											"value": "477"
										},
										{
											"begin": 3583,
											"end": 3662,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3545,
											"end": 3664,
											"name": "tag",
											"source": 12,
											"value": "476"
										},
										{
											"begin": 3545,
											"end": 3664,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3703,
											"end": 3704,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3728,
											"end": 3781,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "478"
										},
										{
											"begin": 3773,
											"end": 3780,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3764,
											"end": 3770,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3753,
											"end": 3762,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3749,
											"end": 3771,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3728,
											"end": 3781,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 3728,
											"end": 3781,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3728,
											"end": 3781,
											"name": "tag",
											"source": 12,
											"value": "478"
										},
										{
											"begin": 3728,
											"end": 3781,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3718,
											"end": 3781,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3718,
											"end": 3781,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3674,
											"end": 3791,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3830,
											"end": 3832,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3856,
											"end": 3909,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "479"
										},
										{
											"begin": 3901,
											"end": 3908,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3892,
											"end": 3898,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3881,
											"end": 3890,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3877,
											"end": 3899,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3856,
											"end": 3909,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 3856,
											"end": 3909,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3856,
											"end": 3909,
											"name": "tag",
											"source": 12,
											"value": "479"
										},
										{
											"begin": 3856,
											"end": 3909,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3846,
											"end": 3909,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3846,
											"end": 3909,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3801,
											"end": 3919,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3452,
											"end": 3926,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3452,
											"end": 3926,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3452,
											"end": 3926,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3452,
											"end": 3926,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3452,
											"end": 3926,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3452,
											"end": 3926,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3932,
											"end": 4022,
											"name": "tag",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 3932,
											"end": 4022,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3966,
											"end": 3973,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4009,
											"end": 4014,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4002,
											"end": 4015,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3995,
											"end": 4016,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3984,
											"end": 4016,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3984,
											"end": 4016,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3932,
											"end": 4022,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3932,
											"end": 4022,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3932,
											"end": 4022,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3932,
											"end": 4022,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4028,
											"end": 4137,
											"name": "tag",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 4028,
											"end": 4137,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4109,
											"end": 4130,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "482"
										},
										{
											"begin": 4124,
											"end": 4129,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4109,
											"end": 4130,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 4109,
											"end": 4130,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4109,
											"end": 4130,
											"name": "tag",
											"source": 12,
											"value": "482"
										},
										{
											"begin": 4109,
											"end": 4130,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4104,
											"end": 4107,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4097,
											"end": 4131,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4028,
											"end": 4137,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4028,
											"end": 4137,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4028,
											"end": 4137,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4143,
											"end": 4353,
											"name": "tag",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 4143,
											"end": 4353,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4230,
											"end": 4234,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4268,
											"end": 4270,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4257,
											"end": 4266,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4253,
											"end": 4271,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4245,
											"end": 4271,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4245,
											"end": 4271,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4281,
											"end": 4346,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "484"
										},
										{
											"begin": 4343,
											"end": 4344,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4332,
											"end": 4341,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4328,
											"end": 4345,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4319,
											"end": 4325,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4281,
											"end": 4346,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 4281,
											"end": 4346,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4281,
											"end": 4346,
											"name": "tag",
											"source": 12,
											"value": "484"
										},
										{
											"begin": 4281,
											"end": 4346,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4143,
											"end": 4353,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4143,
											"end": 4353,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4143,
											"end": 4353,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4143,
											"end": 4353,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4143,
											"end": 4353,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4359,
											"end": 4477,
											"name": "tag",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 4359,
											"end": 4477,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "486"
										},
										{
											"begin": 4464,
											"end": 4469,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 4446,
											"end": 4470,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "tag",
											"source": 12,
											"value": "486"
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4441,
											"end": 4444,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4434,
											"end": 4471,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4359,
											"end": 4477,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4359,
											"end": 4477,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4359,
											"end": 4477,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4483,
											"end": 4705,
											"name": "tag",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 4483,
											"end": 4705,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4576,
											"end": 4580,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4614,
											"end": 4616,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4603,
											"end": 4612,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4599,
											"end": 4617,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4591,
											"end": 4617,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4591,
											"end": 4617,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4627,
											"end": 4698,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "488"
										},
										{
											"begin": 4695,
											"end": 4696,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4684,
											"end": 4693,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4680,
											"end": 4697,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4671,
											"end": 4677,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4627,
											"end": 4698,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 4627,
											"end": 4698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4627,
											"end": 4698,
											"name": "tag",
											"source": 12,
											"value": "488"
										},
										{
											"begin": 4627,
											"end": 4698,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4483,
											"end": 4705,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4483,
											"end": 4705,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4483,
											"end": 4705,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4483,
											"end": 4705,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4483,
											"end": 4705,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4711,
											"end": 5330,
											"name": "tag",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 4711,
											"end": 5330,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4788,
											"end": 4794,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4796,
											"end": 4802,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4804,
											"end": 4810,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4853,
											"end": 4855,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 4841,
											"end": 4850,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4832,
											"end": 4839,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4828,
											"end": 4851,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4824,
											"end": 4856,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4821,
											"end": 4940,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4821,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "490"
										},
										{
											"begin": 4821,
											"end": 4940,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4859,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "491"
										},
										{
											"begin": 4859,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 4859,
											"end": 4938,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4859,
											"end": 4938,
											"name": "tag",
											"source": 12,
											"value": "491"
										},
										{
											"begin": 4859,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4821,
											"end": 4940,
											"name": "tag",
											"source": 12,
											"value": "490"
										},
										{
											"begin": 4821,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4979,
											"end": 4980,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5004,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "492"
										},
										{
											"begin": 5049,
											"end": 5056,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5040,
											"end": 5046,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5029,
											"end": 5038,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 5025,
											"end": 5047,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5004,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 5004,
											"end": 5057,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5004,
											"end": 5057,
											"name": "tag",
											"source": 12,
											"value": "492"
										},
										{
											"begin": 5004,
											"end": 5057,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4994,
											"end": 5057,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4994,
											"end": 5057,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4950,
											"end": 5067,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5106,
											"end": 5108,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5132,
											"end": 5185,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "493"
										},
										{
											"begin": 5177,
											"end": 5184,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5168,
											"end": 5174,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5157,
											"end": 5166,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 5153,
											"end": 5175,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5132,
											"end": 5185,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 5132,
											"end": 5185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5132,
											"end": 5185,
											"name": "tag",
											"source": 12,
											"value": "493"
										},
										{
											"begin": 5132,
											"end": 5185,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5122,
											"end": 5185,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5122,
											"end": 5185,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5077,
											"end": 5195,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5234,
											"end": 5236,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5260,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "494"
										},
										{
											"begin": 5305,
											"end": 5312,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5296,
											"end": 5302,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5285,
											"end": 5294,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 5281,
											"end": 5303,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5260,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 5260,
											"end": 5313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5260,
											"end": 5313,
											"name": "tag",
											"source": 12,
											"value": "494"
										},
										{
											"begin": 5260,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5250,
											"end": 5313,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5250,
											"end": 5313,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5205,
											"end": 5323,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4711,
											"end": 5330,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4711,
											"end": 5330,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4711,
											"end": 5330,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4711,
											"end": 5330,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4711,
											"end": 5330,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4711,
											"end": 5330,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5336,
											"end": 5422,
											"name": "tag",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 5336,
											"end": 5422,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5371,
											"end": 5378,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5411,
											"end": 5415,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 5404,
											"end": 5409,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5400,
											"end": 5416,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5336,
											"end": 5422,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5336,
											"end": 5422,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5336,
											"end": 5422,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5336,
											"end": 5422,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5428,
											"end": 5540,
											"name": "tag",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 5428,
											"end": 5540,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5511,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "497"
										},
										{
											"begin": 5527,
											"end": 5532,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5511,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 5511,
											"end": 5533,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5511,
											"end": 5533,
											"name": "tag",
											"source": 12,
											"value": "497"
										},
										{
											"begin": 5511,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5506,
											"end": 5509,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5499,
											"end": 5534,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5428,
											"end": 5540,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5428,
											"end": 5540,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5428,
											"end": 5540,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5546,
											"end": 5760,
											"name": "tag",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 5546,
											"end": 5760,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5635,
											"end": 5639,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5673,
											"end": 5675,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5662,
											"end": 5671,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5658,
											"end": 5676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5650,
											"end": 5676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5650,
											"end": 5676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5686,
											"end": 5753,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "499"
										},
										{
											"begin": 5750,
											"end": 5751,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5739,
											"end": 5748,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5735,
											"end": 5752,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5726,
											"end": 5732,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5686,
											"end": 5753,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 5686,
											"end": 5753,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5686,
											"end": 5753,
											"name": "tag",
											"source": 12,
											"value": "499"
										},
										{
											"begin": 5686,
											"end": 5753,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5546,
											"end": 5760,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5546,
											"end": 5760,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5546,
											"end": 5760,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5546,
											"end": 5760,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5546,
											"end": 5760,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5766,
											"end": 5870,
											"name": "tag",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 5766,
											"end": 5870,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5811,
											"end": 5818,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5840,
											"end": 5864,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "501"
										},
										{
											"begin": 5858,
											"end": 5863,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5840,
											"end": 5864,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 5840,
											"end": 5864,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5840,
											"end": 5864,
											"name": "tag",
											"source": 12,
											"value": "501"
										},
										{
											"begin": 5840,
											"end": 5864,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5829,
											"end": 5864,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5829,
											"end": 5864,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5766,
											"end": 5870,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5766,
											"end": 5870,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5766,
											"end": 5870,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5766,
											"end": 5870,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5876,
											"end": 6018,
											"name": "tag",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 5876,
											"end": 6018,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5979,
											"end": 6011,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "503"
										},
										{
											"begin": 6005,
											"end": 6010,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5979,
											"end": 6011,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 5979,
											"end": 6011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5979,
											"end": 6011,
											"name": "tag",
											"source": 12,
											"value": "503"
										},
										{
											"begin": 5979,
											"end": 6011,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5974,
											"end": 5977,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5967,
											"end": 6012,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5876,
											"end": 6018,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5876,
											"end": 6018,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5876,
											"end": 6018,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6024,
											"end": 6278,
											"name": "tag",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 6024,
											"end": 6278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6133,
											"end": 6137,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6171,
											"end": 6173,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6160,
											"end": 6169,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6156,
											"end": 6174,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6148,
											"end": 6174,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6148,
											"end": 6174,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6184,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "505"
										},
										{
											"begin": 6268,
											"end": 6269,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6257,
											"end": 6266,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6253,
											"end": 6270,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6244,
											"end": 6250,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6184,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 6184,
											"end": 6271,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6184,
											"end": 6271,
											"name": "tag",
											"source": 12,
											"value": "505"
										},
										{
											"begin": 6184,
											"end": 6271,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6024,
											"end": 6278,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6024,
											"end": 6278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6024,
											"end": 6278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6024,
											"end": 6278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6024,
											"end": 6278,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6284,
											"end": 6613,
											"name": "tag",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 6284,
											"end": 6613,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6343,
											"end": 6349,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6392,
											"end": 6394,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6380,
											"end": 6389,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6371,
											"end": 6378,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6367,
											"end": 6390,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6363,
											"end": 6395,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 6360,
											"end": 6479,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6360,
											"end": 6479,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "507"
										},
										{
											"begin": 6360,
											"end": 6479,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6398,
											"end": 6477,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "508"
										},
										{
											"begin": 6398,
											"end": 6477,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 6398,
											"end": 6477,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6398,
											"end": 6477,
											"name": "tag",
											"source": 12,
											"value": "508"
										},
										{
											"begin": 6398,
											"end": 6477,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6360,
											"end": 6479,
											"name": "tag",
											"source": 12,
											"value": "507"
										},
										{
											"begin": 6360,
											"end": 6479,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6518,
											"end": 6519,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6543,
											"end": 6596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "509"
										},
										{
											"begin": 6588,
											"end": 6595,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6579,
											"end": 6585,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6568,
											"end": 6577,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6564,
											"end": 6586,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6543,
											"end": 6596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 6543,
											"end": 6596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6543,
											"end": 6596,
											"name": "tag",
											"source": 12,
											"value": "509"
										},
										{
											"begin": 6543,
											"end": 6596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6533,
											"end": 6596,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6533,
											"end": 6596,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6489,
											"end": 6606,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6284,
											"end": 6613,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6284,
											"end": 6613,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6284,
											"end": 6613,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6284,
											"end": 6613,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6284,
											"end": 6613,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6619,
											"end": 6948,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 6619,
											"end": 6948,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6678,
											"end": 6684,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6727,
											"end": 6729,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6715,
											"end": 6724,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6706,
											"end": 6713,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6702,
											"end": 6725,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6698,
											"end": 6730,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 6695,
											"end": 6814,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6695,
											"end": 6814,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "511"
										},
										{
											"begin": 6695,
											"end": 6814,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6733,
											"end": 6812,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "512"
										},
										{
											"begin": 6733,
											"end": 6812,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 6733,
											"end": 6812,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6733,
											"end": 6812,
											"name": "tag",
											"source": 12,
											"value": "512"
										},
										{
											"begin": 6733,
											"end": 6812,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6695,
											"end": 6814,
											"name": "tag",
											"source": 12,
											"value": "511"
										},
										{
											"begin": 6695,
											"end": 6814,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6853,
											"end": 6854,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6878,
											"end": 6931,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "513"
										},
										{
											"begin": 6923,
											"end": 6930,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6920,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6903,
											"end": 6912,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6899,
											"end": 6921,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6878,
											"end": 6931,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 6878,
											"end": 6931,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6878,
											"end": 6931,
											"name": "tag",
											"source": 12,
											"value": "513"
										},
										{
											"begin": 6878,
											"end": 6931,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6868,
											"end": 6931,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6868,
											"end": 6931,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6824,
											"end": 6941,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6619,
											"end": 6948,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6619,
											"end": 6948,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6619,
											"end": 6948,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6619,
											"end": 6948,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6619,
											"end": 6948,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6954,
											"end": 7072,
											"name": "tag",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 6954,
											"end": 7072,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7041,
											"end": 7065,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "515"
										},
										{
											"begin": 7059,
											"end": 7064,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7041,
											"end": 7065,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 7041,
											"end": 7065,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7041,
											"end": 7065,
											"name": "tag",
											"source": 12,
											"value": "515"
										},
										{
											"begin": 7041,
											"end": 7065,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7036,
											"end": 7039,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7029,
											"end": 7066,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6954,
											"end": 7072,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6954,
											"end": 7072,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6954,
											"end": 7072,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7078,
											"end": 7300,
											"name": "tag",
											"source": 12,
											"value": "108"
										},
										{
											"begin": 7078,
											"end": 7300,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7171,
											"end": 7175,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7209,
											"end": 7211,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7198,
											"end": 7207,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7194,
											"end": 7212,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7186,
											"end": 7212,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7186,
											"end": 7212,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7222,
											"end": 7293,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "517"
										},
										{
											"begin": 7290,
											"end": 7291,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7279,
											"end": 7288,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7275,
											"end": 7292,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7266,
											"end": 7272,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7222,
											"end": 7293,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 7222,
											"end": 7293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7222,
											"end": 7293,
											"name": "tag",
											"source": 12,
											"value": "517"
										},
										{
											"begin": 7222,
											"end": 7293,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7078,
											"end": 7300,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7078,
											"end": 7300,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7078,
											"end": 7300,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7078,
											"end": 7300,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7078,
											"end": 7300,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7306,
											"end": 7395,
											"name": "tag",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 7306,
											"end": 7395,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7342,
											"end": 7349,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7382,
											"end": 7388,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 7375,
											"end": 7380,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7371,
											"end": 7389,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7360,
											"end": 7389,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7360,
											"end": 7389,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7306,
											"end": 7395,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7306,
											"end": 7395,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7306,
											"end": 7395,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7306,
											"end": 7395,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7401,
											"end": 7521,
											"name": "tag",
											"source": 12,
											"value": "417"
										},
										{
											"begin": 7401,
											"end": 7521,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7473,
											"end": 7496,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "520"
										},
										{
											"begin": 7490,
											"end": 7495,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7473,
											"end": 7496,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 7473,
											"end": 7496,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7473,
											"end": 7496,
											"name": "tag",
											"source": 12,
											"value": "520"
										},
										{
											"begin": 7473,
											"end": 7496,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7466,
											"end": 7471,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7463,
											"end": 7497,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 7453,
											"end": 7515,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "521"
										},
										{
											"begin": 7453,
											"end": 7515,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7511,
											"end": 7512,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7508,
											"end": 7509,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7501,
											"end": 7513,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7453,
											"end": 7515,
											"name": "tag",
											"source": 12,
											"value": "521"
										},
										{
											"begin": 7453,
											"end": 7515,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7401,
											"end": 7521,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7401,
											"end": 7521,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7527,
											"end": 7664,
											"name": "tag",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 7527,
											"end": 7664,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7572,
											"end": 7577,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7610,
											"end": 7616,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7617,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 7588,
											"end": 7617,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7588,
											"end": 7617,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7626,
											"end": 7658,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "523"
										},
										{
											"begin": 7652,
											"end": 7657,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7626,
											"end": 7658,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "417"
										},
										{
											"begin": 7626,
											"end": 7658,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7626,
											"end": 7658,
											"name": "tag",
											"source": 12,
											"value": "523"
										},
										{
											"begin": 7626,
											"end": 7658,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7527,
											"end": 7664,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7527,
											"end": 7664,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7527,
											"end": 7664,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7527,
											"end": 7664,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7527,
											"end": 7664,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7670,
											"end": 7997,
											"name": "tag",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 7670,
											"end": 7997,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7728,
											"end": 7734,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7777,
											"end": 7779,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7765,
											"end": 7774,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7756,
											"end": 7763,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7752,
											"end": 7775,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7748,
											"end": 7780,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 7745,
											"end": 7864,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7745,
											"end": 7864,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "525"
										},
										{
											"begin": 7745,
											"end": 7864,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7783,
											"end": 7862,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "526"
										},
										{
											"begin": 7783,
											"end": 7862,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 7783,
											"end": 7862,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7783,
											"end": 7862,
											"name": "tag",
											"source": 12,
											"value": "526"
										},
										{
											"begin": 7783,
											"end": 7862,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7745,
											"end": 7864,
											"name": "tag",
											"source": 12,
											"value": "525"
										},
										{
											"begin": 7745,
											"end": 7864,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7928,
											"end": 7980,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "527"
										},
										{
											"begin": 7972,
											"end": 7979,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7963,
											"end": 7969,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7952,
											"end": 7961,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7948,
											"end": 7970,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7928,
											"end": 7980,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 7928,
											"end": 7980,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7928,
											"end": 7980,
											"name": "tag",
											"source": 12,
											"value": "527"
										},
										{
											"begin": 7928,
											"end": 7980,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7918,
											"end": 7980,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7918,
											"end": 7980,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7874,
											"end": 7990,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7670,
											"end": 7997,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7670,
											"end": 7997,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7670,
											"end": 7997,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7670,
											"end": 7997,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7670,
											"end": 7997,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8003,
											"end": 8477,
											"name": "tag",
											"source": 12,
											"value": "135"
										},
										{
											"begin": 8003,
											"end": 8477,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8071,
											"end": 8077,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8079,
											"end": 8085,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8128,
											"end": 8130,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8116,
											"end": 8125,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8107,
											"end": 8114,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8103,
											"end": 8126,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8099,
											"end": 8131,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 8096,
											"end": 8215,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8096,
											"end": 8215,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "529"
										},
										{
											"begin": 8096,
											"end": 8215,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8134,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "530"
										},
										{
											"begin": 8134,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 8134,
											"end": 8213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8134,
											"end": 8213,
											"name": "tag",
											"source": 12,
											"value": "530"
										},
										{
											"begin": 8134,
											"end": 8213,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8096,
											"end": 8215,
											"name": "tag",
											"source": 12,
											"value": "529"
										},
										{
											"begin": 8096,
											"end": 8215,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8254,
											"end": 8255,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8279,
											"end": 8332,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "531"
										},
										{
											"begin": 8324,
											"end": 8331,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8315,
											"end": 8321,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8304,
											"end": 8313,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 8300,
											"end": 8322,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8279,
											"end": 8332,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 8279,
											"end": 8332,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8279,
											"end": 8332,
											"name": "tag",
											"source": 12,
											"value": "531"
										},
										{
											"begin": 8279,
											"end": 8332,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8269,
											"end": 8332,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8269,
											"end": 8332,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8225,
											"end": 8342,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8381,
											"end": 8383,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8407,
											"end": 8460,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "532"
										},
										{
											"begin": 8452,
											"end": 8459,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8443,
											"end": 8449,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8432,
											"end": 8441,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 8428,
											"end": 8450,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8407,
											"end": 8460,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 8407,
											"end": 8460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8407,
											"end": 8460,
											"name": "tag",
											"source": 12,
											"value": "532"
										},
										{
											"begin": 8407,
											"end": 8460,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8397,
											"end": 8460,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8397,
											"end": 8460,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8352,
											"end": 8470,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8003,
											"end": 8477,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8003,
											"end": 8477,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8003,
											"end": 8477,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8003,
											"end": 8477,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8003,
											"end": 8477,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8003,
											"end": 8477,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8483,
											"end": 8663,
											"name": "tag",
											"source": 12,
											"value": "419"
										},
										{
											"begin": 8483,
											"end": 8663,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8531,
											"end": 8608,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8528,
											"end": 8529,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8521,
											"end": 8609,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8628,
											"end": 8632,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 8625,
											"end": 8626,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8618,
											"end": 8633,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8652,
											"end": 8656,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8649,
											"end": 8650,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8642,
											"end": 8657,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8669,
											"end": 8989,
											"name": "tag",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 8669,
											"end": 8989,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8713,
											"end": 8719,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8750,
											"end": 8751,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 8744,
											"end": 8748,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8740,
											"end": 8752,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 8730,
											"end": 8752,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8730,
											"end": 8752,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8797,
											"end": 8798,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 8791,
											"end": 8795,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8787,
											"end": 8799,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8818,
											"end": 8836,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8808,
											"end": 8889,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "535"
										},
										{
											"begin": 8808,
											"end": 8889,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8874,
											"end": 8878,
											"name": "PUSH",
											"source": 12,
											"value": "7F"
										},
										{
											"begin": 8866,
											"end": 8872,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8862,
											"end": 8879,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8852,
											"end": 8879,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8852,
											"end": 8879,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8808,
											"end": 8889,
											"name": "tag",
											"source": 12,
											"value": "535"
										},
										{
											"begin": 8808,
											"end": 8889,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8936,
											"end": 8938,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8928,
											"end": 8934,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8925,
											"end": 8939,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 8905,
											"end": 8923,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8902,
											"end": 8940,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8899,
											"end": 8983,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "536"
										},
										{
											"begin": 8899,
											"end": 8983,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8955,
											"end": 8973,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "537"
										},
										{
											"begin": 8955,
											"end": 8973,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "419"
										},
										{
											"begin": 8955,
											"end": 8973,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8955,
											"end": 8973,
											"name": "tag",
											"source": 12,
											"value": "537"
										},
										{
											"begin": 8955,
											"end": 8973,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8899,
											"end": 8983,
											"name": "tag",
											"source": 12,
											"value": "536"
										},
										{
											"begin": 8899,
											"end": 8983,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8720,
											"end": 8989,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8669,
											"end": 8989,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8669,
											"end": 8989,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8669,
											"end": 8989,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8669,
											"end": 8989,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9138,
											"name": "tag",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 8995,
											"end": 9138,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9052,
											"end": 9057,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9083,
											"end": 9089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9077,
											"end": 9090,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9132,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "539"
										},
										{
											"begin": 9126,
											"end": 9131,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9132,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 9099,
											"end": 9132,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9132,
											"name": "tag",
											"source": 12,
											"value": "539"
										},
										{
											"begin": 9099,
											"end": 9132,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9138,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9138,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9138,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9138,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9138,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9144,
											"end": 9495,
											"name": "tag",
											"source": 12,
											"value": "167"
										},
										{
											"begin": 9144,
											"end": 9495,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9214,
											"end": 9220,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9263,
											"end": 9265,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9251,
											"end": 9260,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9242,
											"end": 9249,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9238,
											"end": 9261,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9234,
											"end": 9266,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 9231,
											"end": 9350,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9231,
											"end": 9350,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "541"
										},
										{
											"begin": 9231,
											"end": 9350,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9269,
											"end": 9348,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "542"
										},
										{
											"begin": 9269,
											"end": 9348,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 9269,
											"end": 9348,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9269,
											"end": 9348,
											"name": "tag",
											"source": 12,
											"value": "542"
										},
										{
											"begin": 9269,
											"end": 9348,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9231,
											"end": 9350,
											"name": "tag",
											"source": 12,
											"value": "541"
										},
										{
											"begin": 9231,
											"end": 9350,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9389,
											"end": 9390,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9414,
											"end": 9478,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "543"
										},
										{
											"begin": 9470,
											"end": 9477,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9461,
											"end": 9467,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9450,
											"end": 9459,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9446,
											"end": 9468,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9414,
											"end": 9478,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 9414,
											"end": 9478,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9414,
											"end": 9478,
											"name": "tag",
											"source": 12,
											"value": "543"
										},
										{
											"begin": 9414,
											"end": 9478,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9404,
											"end": 9478,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9404,
											"end": 9478,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9360,
											"end": 9488,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9144,
											"end": 9495,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9144,
											"end": 9495,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9144,
											"end": 9495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9144,
											"end": 9495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9144,
											"end": 9495,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9501,
											"end": 9681,
											"name": "tag",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 9501,
											"end": 9681,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9549,
											"end": 9626,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9546,
											"end": 9547,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9539,
											"end": 9627,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9646,
											"end": 9650,
											"name": "PUSH",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 9643,
											"end": 9644,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9636,
											"end": 9651,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9670,
											"end": 9674,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 9667,
											"end": 9668,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9660,
											"end": 9675,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9687,
											"end": 9867,
											"name": "tag",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 9687,
											"end": 9867,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9735,
											"end": 9812,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9732,
											"end": 9733,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9725,
											"end": 9813,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9832,
											"end": 9836,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 9829,
											"end": 9830,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9822,
											"end": 9837,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9856,
											"end": 9860,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 9853,
											"end": 9854,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9846,
											"end": 9861,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9873,
											"end": 10058,
											"name": "tag",
											"source": 12,
											"value": "188"
										},
										{
											"begin": 9873,
											"end": 10058,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9913,
											"end": 9914,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9930,
											"end": 9950,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "547"
										},
										{
											"begin": 9948,
											"end": 9949,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 9950,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 9930,
											"end": 9950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 9950,
											"name": "tag",
											"source": 12,
											"value": "547"
										},
										{
											"begin": 9930,
											"end": 9950,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9925,
											"end": 9950,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9925,
											"end": 9950,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9964,
											"end": 9984,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "548"
										},
										{
											"begin": 9982,
											"end": 9983,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9964,
											"end": 9984,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 9964,
											"end": 9984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9964,
											"end": 9984,
											"name": "tag",
											"source": 12,
											"value": "548"
										},
										{
											"begin": 9964,
											"end": 9984,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9959,
											"end": 9984,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9959,
											"end": 9984,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10003,
											"end": 10004,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9993,
											"end": 10028,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "549"
										},
										{
											"begin": 9993,
											"end": 10028,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10008,
											"end": 10026,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "550"
										},
										{
											"begin": 10008,
											"end": 10026,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 10008,
											"end": 10026,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10008,
											"end": 10026,
											"name": "tag",
											"source": 12,
											"value": "550"
										},
										{
											"begin": 10008,
											"end": 10026,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9993,
											"end": 10028,
											"name": "tag",
											"source": 12,
											"value": "549"
										},
										{
											"begin": 9993,
											"end": 10028,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10050,
											"end": 10051,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10047,
											"end": 10048,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10043,
											"end": 10052,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 10038,
											"end": 10052,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10038,
											"end": 10052,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9873,
											"end": 10058,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9873,
											"end": 10058,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9873,
											"end": 10058,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9873,
											"end": 10058,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9873,
											"end": 10058,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10064,
											"end": 10258,
											"name": "tag",
											"source": 12,
											"value": "190"
										},
										{
											"begin": 10064,
											"end": 10258,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10104,
											"end": 10108,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10124,
											"end": 10144,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "552"
										},
										{
											"begin": 10142,
											"end": 10143,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10124,
											"end": 10144,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 10124,
											"end": 10144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10124,
											"end": 10144,
											"name": "tag",
											"source": 12,
											"value": "552"
										},
										{
											"begin": 10124,
											"end": 10144,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10119,
											"end": 10144,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10119,
											"end": 10144,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10158,
											"end": 10178,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "553"
										},
										{
											"begin": 10176,
											"end": 10177,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10158,
											"end": 10178,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 10158,
											"end": 10178,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10158,
											"end": 10178,
											"name": "tag",
											"source": 12,
											"value": "553"
										},
										{
											"begin": 10158,
											"end": 10178,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10153,
											"end": 10178,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10153,
											"end": 10178,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10203,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10199,
											"end": 10200,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10195,
											"end": 10204,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10187,
											"end": 10204,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10187,
											"end": 10204,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10226,
											"end": 10227,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10220,
											"end": 10224,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10217,
											"end": 10228,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 10214,
											"end": 10251,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10214,
											"end": 10251,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "554"
										},
										{
											"begin": 10214,
											"end": 10251,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10231,
											"end": 10249,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "555"
										},
										{
											"begin": 10231,
											"end": 10249,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 10231,
											"end": 10249,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10231,
											"end": 10249,
											"name": "tag",
											"source": 12,
											"value": "555"
										},
										{
											"begin": 10231,
											"end": 10249,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10214,
											"end": 10251,
											"name": "tag",
											"source": 12,
											"value": "554"
										},
										{
											"begin": 10214,
											"end": 10251,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10064,
											"end": 10258,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10064,
											"end": 10258,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10064,
											"end": 10258,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10064,
											"end": 10258,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10064,
											"end": 10258,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10264,
											"end": 10455,
											"name": "tag",
											"source": 12,
											"value": "192"
										},
										{
											"begin": 10264,
											"end": 10455,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10304,
											"end": 10307,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10323,
											"end": 10343,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "557"
										},
										{
											"begin": 10341,
											"end": 10342,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10323,
											"end": 10343,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 10323,
											"end": 10343,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10323,
											"end": 10343,
											"name": "tag",
											"source": 12,
											"value": "557"
										},
										{
											"begin": 10323,
											"end": 10343,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10318,
											"end": 10343,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10318,
											"end": 10343,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10357,
											"end": 10377,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "558"
										},
										{
											"begin": 10375,
											"end": 10376,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10357,
											"end": 10377,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 10357,
											"end": 10377,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10357,
											"end": 10377,
											"name": "tag",
											"source": 12,
											"value": "558"
										},
										{
											"begin": 10357,
											"end": 10377,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10352,
											"end": 10377,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10352,
											"end": 10377,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10400,
											"end": 10401,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10397,
											"end": 10398,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10393,
											"end": 10402,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10386,
											"end": 10402,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10386,
											"end": 10402,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10421,
											"end": 10424,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10418,
											"end": 10419,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10415,
											"end": 10425,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 10412,
											"end": 10448,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10412,
											"end": 10448,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "559"
										},
										{
											"begin": 10412,
											"end": 10448,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10428,
											"end": 10446,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "560"
										},
										{
											"begin": 10428,
											"end": 10446,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 10428,
											"end": 10446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10428,
											"end": 10446,
											"name": "tag",
											"source": 12,
											"value": "560"
										},
										{
											"begin": 10428,
											"end": 10446,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10412,
											"end": 10448,
											"name": "tag",
											"source": 12,
											"value": "559"
										},
										{
											"begin": 10412,
											"end": 10448,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10264,
											"end": 10455,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10264,
											"end": 10455,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10264,
											"end": 10455,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10264,
											"end": 10455,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10264,
											"end": 10455,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10461,
											"end": 10871,
											"name": "tag",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 10461,
											"end": 10871,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10501,
											"end": 10508,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10524,
											"end": 10544,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "562"
										},
										{
											"begin": 10542,
											"end": 10543,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10524,
											"end": 10544,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 10524,
											"end": 10544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10524,
											"end": 10544,
											"name": "tag",
											"source": 12,
											"value": "562"
										},
										{
											"begin": 10524,
											"end": 10544,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10519,
											"end": 10544,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10519,
											"end": 10544,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10558,
											"end": 10578,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "563"
										},
										{
											"begin": 10576,
											"end": 10577,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10558,
											"end": 10578,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 10558,
											"end": 10578,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10558,
											"end": 10578,
											"name": "tag",
											"source": 12,
											"value": "563"
										},
										{
											"begin": 10558,
											"end": 10578,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10553,
											"end": 10578,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10553,
											"end": 10578,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10613,
											"end": 10614,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10610,
											"end": 10611,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10606,
											"end": 10615,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 10635,
											"end": 10665,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "564"
										},
										{
											"begin": 10653,
											"end": 10664,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10635,
											"end": 10665,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 10635,
											"end": 10665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10635,
											"end": 10665,
											"name": "tag",
											"source": 12,
											"value": "564"
										},
										{
											"begin": 10635,
											"end": 10665,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10624,
											"end": 10665,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10624,
											"end": 10665,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10814,
											"end": 10815,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10805,
											"end": 10812,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 10816,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 10798,
											"end": 10799,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10795,
											"end": 10817,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 10775,
											"end": 10776,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10768,
											"end": 10777,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10748,
											"end": 10831,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 10725,
											"end": 10864,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "565"
										},
										{
											"begin": 10725,
											"end": 10864,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10844,
											"end": 10862,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "566"
										},
										{
											"begin": 10844,
											"end": 10862,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 10844,
											"end": 10862,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10844,
											"end": 10862,
											"name": "tag",
											"source": 12,
											"value": "566"
										},
										{
											"begin": 10844,
											"end": 10862,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10725,
											"end": 10864,
											"name": "tag",
											"source": 12,
											"value": "565"
										},
										{
											"begin": 10725,
											"end": 10864,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10509,
											"end": 10871,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10461,
											"end": 10871,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10461,
											"end": 10871,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10461,
											"end": 10871,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10461,
											"end": 10871,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10461,
											"end": 10871,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10877,
											"end": 11017,
											"name": "tag",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 10877,
											"end": 11017,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10926,
											"end": 10935,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10959,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "568"
										},
										{
											"begin": 10977,
											"end": 11010,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "569"
										},
										{
											"begin": 10986,
											"end": 11009,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "570"
										},
										{
											"begin": 11003,
											"end": 11008,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10986,
											"end": 11009,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 10986,
											"end": 11009,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10986,
											"end": 11009,
											"name": "tag",
											"source": 12,
											"value": "570"
										},
										{
											"begin": 10986,
											"end": 11009,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10977,
											"end": 11010,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "389"
										},
										{
											"begin": 10977,
											"end": 11010,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10977,
											"end": 11010,
											"name": "tag",
											"source": 12,
											"value": "569"
										},
										{
											"begin": 10977,
											"end": 11010,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10959,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 10959,
											"end": 11011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10959,
											"end": 11011,
											"name": "tag",
											"source": 12,
											"value": "568"
										},
										{
											"begin": 10959,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10946,
											"end": 11011,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10946,
											"end": 11011,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10877,
											"end": 11017,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10877,
											"end": 11017,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10877,
											"end": 11017,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10877,
											"end": 11017,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11023,
											"end": 11152,
											"name": "tag",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 11023,
											"end": 11152,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11109,
											"end": 11145,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "572"
										},
										{
											"begin": 11139,
											"end": 11144,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11109,
											"end": 11145,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 11109,
											"end": 11145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11109,
											"end": 11145,
											"name": "tag",
											"source": 12,
											"value": "572"
										},
										{
											"begin": 11109,
											"end": 11145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11107,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11097,
											"end": 11146,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11023,
											"end": 11152,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11023,
											"end": 11152,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11023,
											"end": 11152,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11158,
											"end": 11378,
											"name": "tag",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 11158,
											"end": 11378,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11250,
											"end": 11254,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11288,
											"end": 11290,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11277,
											"end": 11286,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11273,
											"end": 11291,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11265,
											"end": 11291,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11265,
											"end": 11291,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11301,
											"end": 11371,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "574"
										},
										{
											"begin": 11368,
											"end": 11369,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11357,
											"end": 11366,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11353,
											"end": 11370,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11344,
											"end": 11350,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11301,
											"end": 11371,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 11301,
											"end": 11371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11301,
											"end": 11371,
											"name": "tag",
											"source": 12,
											"value": "574"
										},
										{
											"begin": 11301,
											"end": 11371,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11158,
											"end": 11378,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 11158,
											"end": 11378,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11158,
											"end": 11378,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11158,
											"end": 11378,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11158,
											"end": 11378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11826,
											"name": "tag",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 11384,
											"end": 11826,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11533,
											"end": 11537,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11571,
											"end": 11573,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 11560,
											"end": 11569,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11556,
											"end": 11574,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11548,
											"end": 11574,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11548,
											"end": 11574,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11584,
											"end": 11655,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "576"
										},
										{
											"begin": 11652,
											"end": 11653,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11641,
											"end": 11650,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11637,
											"end": 11654,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11628,
											"end": 11634,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 11584,
											"end": 11655,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 11584,
											"end": 11655,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11584,
											"end": 11655,
											"name": "tag",
											"source": 12,
											"value": "576"
										},
										{
											"begin": 11584,
											"end": 11655,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11665,
											"end": 11737,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "577"
										},
										{
											"begin": 11733,
											"end": 11735,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11722,
											"end": 11731,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11718,
											"end": 11736,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11709,
											"end": 11715,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 11665,
											"end": 11737,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 11665,
											"end": 11737,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11665,
											"end": 11737,
											"name": "tag",
											"source": 12,
											"value": "577"
										},
										{
											"begin": 11665,
											"end": 11737,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11747,
											"end": 11819,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "578"
										},
										{
											"begin": 11815,
											"end": 11817,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11804,
											"end": 11813,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11800,
											"end": 11818,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11791,
											"end": 11797,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11747,
											"end": 11819,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 11747,
											"end": 11819,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11747,
											"end": 11819,
											"name": "tag",
											"source": 12,
											"value": "578"
										},
										{
											"begin": 11747,
											"end": 11819,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11826,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11826,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11826,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11826,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11826,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11826,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11826,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11832,
											"end": 12274,
											"name": "tag",
											"source": 12,
											"value": "322"
										},
										{
											"begin": 11832,
											"end": 12274,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11981,
											"end": 11985,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12019,
											"end": 12021,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 12008,
											"end": 12017,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12004,
											"end": 12022,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11996,
											"end": 12022,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11996,
											"end": 12022,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12032,
											"end": 12103,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "580"
										},
										{
											"begin": 12100,
											"end": 12101,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12089,
											"end": 12098,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12085,
											"end": 12102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12076,
											"end": 12082,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 12032,
											"end": 12103,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 12032,
											"end": 12103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12032,
											"end": 12103,
											"name": "tag",
											"source": 12,
											"value": "580"
										},
										{
											"begin": 12032,
											"end": 12103,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12113,
											"end": 12185,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "581"
										},
										{
											"begin": 12181,
											"end": 12183,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 12170,
											"end": 12179,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12166,
											"end": 12184,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12157,
											"end": 12163,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 12113,
											"end": 12185,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 12113,
											"end": 12185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12113,
											"end": 12185,
											"name": "tag",
											"source": 12,
											"value": "581"
										},
										{
											"begin": 12113,
											"end": 12185,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12195,
											"end": 12267,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "582"
										},
										{
											"begin": 12263,
											"end": 12265,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12252,
											"end": 12261,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12248,
											"end": 12266,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12239,
											"end": 12245,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 12195,
											"end": 12267,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 12195,
											"end": 12267,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12195,
											"end": 12267,
											"name": "tag",
											"source": 12,
											"value": "582"
										},
										{
											"begin": 12195,
											"end": 12267,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11832,
											"end": 12274,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 11832,
											"end": 12274,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 11832,
											"end": 12274,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11832,
											"end": 12274,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11832,
											"end": 12274,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11832,
											"end": 12274,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11832,
											"end": 12274,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12280,
											"end": 12396,
											"name": "tag",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 12280,
											"end": 12396,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12350,
											"end": 12371,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "584"
										},
										{
											"begin": 12365,
											"end": 12370,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12350,
											"end": 12371,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 12350,
											"end": 12371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12350,
											"end": 12371,
											"name": "tag",
											"source": 12,
											"value": "584"
										},
										{
											"begin": 12350,
											"end": 12371,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12343,
											"end": 12348,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12340,
											"end": 12372,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 12330,
											"end": 12390,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "585"
										},
										{
											"begin": 12330,
											"end": 12390,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12386,
											"end": 12387,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12383,
											"end": 12384,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12376,
											"end": 12388,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 12330,
											"end": 12390,
											"name": "tag",
											"source": 12,
											"value": "585"
										},
										{
											"begin": 12330,
											"end": 12390,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12280,
											"end": 12396,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12280,
											"end": 12396,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12402,
											"end": 12539,
											"name": "tag",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 12402,
											"end": 12539,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12456,
											"end": 12461,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12487,
											"end": 12493,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12481,
											"end": 12494,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 12472,
											"end": 12494,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12472,
											"end": 12494,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12503,
											"end": 12533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "587"
										},
										{
											"begin": 12527,
											"end": 12532,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12503,
											"end": 12533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 12503,
											"end": 12533,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12503,
											"end": 12533,
											"name": "tag",
											"source": 12,
											"value": "587"
										},
										{
											"begin": 12503,
											"end": 12533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12402,
											"end": 12539,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12402,
											"end": 12539,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12402,
											"end": 12539,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12402,
											"end": 12539,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12402,
											"end": 12539,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12545,
											"end": 12890,
											"name": "tag",
											"source": 12,
											"value": "361"
										},
										{
											"begin": 12545,
											"end": 12890,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12612,
											"end": 12618,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12661,
											"end": 12663,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 12649,
											"end": 12658,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12640,
											"end": 12647,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 12636,
											"end": 12659,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12632,
											"end": 12664,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 12629,
											"end": 12748,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 12629,
											"end": 12748,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "589"
										},
										{
											"begin": 12629,
											"end": 12748,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12667,
											"end": 12746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "590"
										},
										{
											"begin": 12667,
											"end": 12746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 12667,
											"end": 12746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12667,
											"end": 12746,
											"name": "tag",
											"source": 12,
											"value": "590"
										},
										{
											"begin": 12667,
											"end": 12746,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12629,
											"end": 12748,
											"name": "tag",
											"source": 12,
											"value": "589"
										},
										{
											"begin": 12629,
											"end": 12748,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12787,
											"end": 12788,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12812,
											"end": 12873,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "591"
										},
										{
											"begin": 12865,
											"end": 12872,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 12856,
											"end": 12862,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12845,
											"end": 12854,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 12841,
											"end": 12863,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12812,
											"end": 12873,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 12812,
											"end": 12873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12812,
											"end": 12873,
											"name": "tag",
											"source": 12,
											"value": "591"
										},
										{
											"begin": 12812,
											"end": 12873,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12802,
											"end": 12873,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12802,
											"end": 12873,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12758,
											"end": 12883,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12545,
											"end": 12890,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12545,
											"end": 12890,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12545,
											"end": 12890,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12545,
											"end": 12890,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12545,
											"end": 12890,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12896,
											"end": 12994,
											"name": "tag",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 12896,
											"end": 12994,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12947,
											"end": 12953,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12981,
											"end": 12986,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12975,
											"end": 12987,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 12965,
											"end": 12987,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12965,
											"end": 12987,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12896,
											"end": 12994,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12896,
											"end": 12994,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12896,
											"end": 12994,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12896,
											"end": 12994,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13000,
											"end": 13147,
											"name": "tag",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 13000,
											"end": 13147,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13101,
											"end": 13112,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13138,
											"end": 13141,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13123,
											"end": 13141,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13123,
											"end": 13141,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13000,
											"end": 13147,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13000,
											"end": 13147,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13000,
											"end": 13147,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13000,
											"end": 13147,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13000,
											"end": 13147,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13153,
											"end": 13539,
											"name": "tag",
											"source": 12,
											"value": "429"
										},
										{
											"begin": 13153,
											"end": 13539,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13257,
											"end": 13260,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13285,
											"end": 13323,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "595"
										},
										{
											"begin": 13317,
											"end": 13322,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13285,
											"end": 13323,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 13285,
											"end": 13323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13285,
											"end": 13323,
											"name": "tag",
											"source": 12,
											"value": "595"
										},
										{
											"begin": 13285,
											"end": 13323,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13339,
											"end": 13427,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "596"
										},
										{
											"begin": 13420,
											"end": 13426,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13415,
											"end": 13418,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 13339,
											"end": 13427,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 13339,
											"end": 13427,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13339,
											"end": 13427,
											"name": "tag",
											"source": 12,
											"value": "596"
										},
										{
											"begin": 13339,
											"end": 13427,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13332,
											"end": 13427,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 13332,
											"end": 13427,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13436,
											"end": 13501,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "597"
										},
										{
											"begin": 13494,
											"end": 13500,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13489,
											"end": 13492,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 13482,
											"end": 13486,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 13475,
											"end": 13480,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 13471,
											"end": 13487,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13436,
											"end": 13501,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 13436,
											"end": 13501,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13436,
											"end": 13501,
											"name": "tag",
											"source": 12,
											"value": "597"
										},
										{
											"begin": 13436,
											"end": 13501,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13526,
											"end": 13532,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13521,
											"end": 13524,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13517,
											"end": 13533,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13510,
											"end": 13533,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13510,
											"end": 13533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13261,
											"end": 13539,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13153,
											"end": 13539,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13153,
											"end": 13539,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13153,
											"end": 13539,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13153,
											"end": 13539,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13153,
											"end": 13539,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13545,
											"end": 13816,
											"name": "tag",
											"source": 12,
											"value": "371"
										},
										{
											"begin": 13545,
											"end": 13816,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13675,
											"end": 13678,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13697,
											"end": 13790,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "599"
										},
										{
											"begin": 13786,
											"end": 13789,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13777,
											"end": 13783,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13697,
											"end": 13790,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "429"
										},
										{
											"begin": 13697,
											"end": 13790,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13697,
											"end": 13790,
											"name": "tag",
											"source": 12,
											"value": "599"
										},
										{
											"begin": 13697,
											"end": 13790,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13690,
											"end": 13790,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13690,
											"end": 13790,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13807,
											"end": 13810,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13800,
											"end": 13810,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13800,
											"end": 13810,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13545,
											"end": 13816,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13545,
											"end": 13816,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13545,
											"end": 13816,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13545,
											"end": 13816,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13545,
											"end": 13816,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/ReentrancyGuard.sol",
								"pTOKEN2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"FEES()": "8b7b23ee",
							"MINT_AND_REDEEM_FEE()": "92054fe7",
							"_BACKING()": "029cd242",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"emergencyFixTotalBacking()": "16f9b467",
							"feeAddress()": "41275358",
							"fillContract(uint256)": "a88df21a",
							"getMintPrice(uint256)": "559e775b",
							"getRedeemPrice(uint256)": "a492fbc6",
							"getTotalBacking()": "19f04174",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"redeem(uint256)": "db006a75",
							"renounceOwnership()": "715018a6",
							"setFeeAddress(address)": "8705fcd4",
							"setMintAndRedeemFee(uint16)": "f40fa4bc",
							"setStart()": "35975a37",
							"setTeamFee(uint16)": "c38f2bfe",
							"symbol()": "95d89b41",
							"totalBacking()": "eb2cd258",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_backing\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintAndRedeemFeeNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustTradeOverMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TeamFeeNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MINT_AND_REDEEM_FEE\",\"type\":\"uint256\"}],\"name\":\"MintAndRedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"PriceAfterMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"PriceAfterRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FEES\",\"type\":\"uint256\"}],\"name\":\"TeamFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalBackingEmergencyFixed\",\"type\":\"uint256\"}],\"name\":\"TotalBackingFixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_AND_REDEEM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BACKING\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyFixTotalBacking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"fillContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRedeemPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"setMintAndRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"setTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Damiani\",\"custom:purpose\":\"The main purpose of pTOKENs is to generate revenue and contribute to bribing economy of ve(3;3) Dexes while being backed\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"ZeroAddressNotAllowed()\":[{\"custom:section\":\"** ERRORS **\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"PriceAfterMint(uint256,uint256,uint256)\":{\"custom:section\":\"** EVENTS **\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"constructor\":{\"custom:section\":\"** CONSTRUCTOR **\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"fillContract(uint256)\":{\"params\":{\"_value\":\": Fill the contract with the first amount of _BACKING\"}},\"getMintPrice(uint256)\":{\"params\":{\"_amount\":\": is the amount of backing\"}},\"getRedeemPrice(uint256)\":{\"params\":{\"_amount\":\": is the amount of pTOKEN\"}},\"mint(address,uint256)\":{\"params\":{\"receiver\":\": is the address that will receive the pTOKEN minted\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256)\":{\"params\":{\"_amount\":\": is the amount of pTOKEN that the user want to burn in order to redeem the corrisponding amount of Backing\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeAddress(address)\":{\"params\":{\"_address\":\": The Address that will receive the Liquidty Incentives and Team Fee\"}},\"setMintAndRedeemFee(uint16)\":{\"params\":{\"_amount\":\": total fee amount, 1000 / _amount / 100 = total fee percentage\"}},\"setTeamFee(uint16)\":{\"params\":{\"_amount\":\": \"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"MINT_AND_REDEEM_FEE\":{\"custom:section\":\"**  STATE VARIABLES **\"},\"_BACKING\":{\"custom:section\":\"** IMMUTABLES **\"},\"_MIN\":{\"custom:section\":\"** CONSTANTS **\"}},\"title\":\"pTOKEN, Yield bearing token backed by ERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyFixTotalBacking()\":{\"notice\":\"This function is used to reflect the correct amount of totalBacking in case some unexpected bug occur\"},\"fillContract(uint256)\":{\"notice\":\"need start = falsethis function doesn't have fees, it will mint pTOKEN in a 1:1 ratio with _value\"},\"getMintPrice(uint256)\":{\"notice\":\"This function is used inside other function to get the current Mint price of pTOKEN in Backing\"},\"getRedeemPrice(uint256)\":{\"notice\":\"This function is used inside other function to get the current Redeem price of pTOKEN in Backing\"},\"getTotalBacking()\":{\"notice\":\"This function is used inside other function to get the total amount of Backing in the contract\"},\"mint(address,uint256)\":{\"notice\":\"This function is used by users that want to mint pTOKEN by depositing the corrisponding amount of Backing + a dynamic feeThe Backing / pTOKEN ratio will increase after every mint\"},\"redeem(uint256)\":{\"notice\":\"This function is used by users that want to burn their balance of pTOKEN and redeem the corrisponding amount of Backing - dynamic fees from 2% up to 5%The Backing / pTOKEN ratio will increase after every redeem\"},\"setFeeAddress(address)\":{\"notice\":\"This function will be used to update the feeAddress\"},\"setMintAndRedeemFee(uint16)\":{\"notice\":\"this function is used by Owner to modify the total FEE %\"},\"setTeamFee(uint16)\":{\"notice\":\"Team fee can't be more than 4% and less than 1% Incentives for liquidity providers are included in the Team fee (FEES)\"}},\"notice\":\"The backing / pTOKEN ratio is designed to appreciate for every mints and redeems that occur.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"pTOKEN2.sol\":\"pTOKEN\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]},\"pTOKEN2.sol\":{\"keccak256\":\"0x58ec9375e0b0ac448d5c6b02c6eda61b60639b5fe0786079a7144fa7b8643320\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://66be62498deaa8c4c5f5bd453379fd30d3b936cb517fb32c73124e98e179a8ae\",\"dweb:/ipfs/QmdhgHzqayZJ3fXprPdm7v7M6kf4wgJkS6yUbR2dJUquf3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 8,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "_owner",
								"offset": 0,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 1561,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "_status",
								"offset": 0,
								"slot": "6",
								"type": "t_uint256"
							},
							{
								"astId": 1665,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "MINT_AND_REDEEM_FEE",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 1668,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "FEES",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 1670,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "totalBacking",
								"offset": 0,
								"slot": "9",
								"type": "t_uint256"
							},
							{
								"astId": 1672,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "feeAddress",
								"offset": 0,
								"slot": "10",
								"type": "t_address_payable"
							},
							{
								"astId": 1674,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "start",
								"offset": 20,
								"slot": "10",
								"type": "t_bool"
							},
							{
								"astId": 1680,
								"contract": "pTOKEN2.sol:pTOKEN",
								"label": "initialOwner",
								"offset": 0,
								"slot": "11",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"emergencyFixTotalBacking()": {
								"notice": "This function is used to reflect the correct amount of totalBacking in case some unexpected bug occur"
							},
							"fillContract(uint256)": {
								"notice": "need start = falsethis function doesn't have fees, it will mint pTOKEN in a 1:1 ratio with _value"
							},
							"getMintPrice(uint256)": {
								"notice": "This function is used inside other function to get the current Mint price of pTOKEN in Backing"
							},
							"getRedeemPrice(uint256)": {
								"notice": "This function is used inside other function to get the current Redeem price of pTOKEN in Backing"
							},
							"getTotalBacking()": {
								"notice": "This function is used inside other function to get the total amount of Backing in the contract"
							},
							"mint(address,uint256)": {
								"notice": "This function is used by users that want to mint pTOKEN by depositing the corrisponding amount of Backing + a dynamic feeThe Backing / pTOKEN ratio will increase after every mint"
							},
							"redeem(uint256)": {
								"notice": "This function is used by users that want to burn their balance of pTOKEN and redeem the corrisponding amount of Backing - dynamic fees from 2% up to 5%The Backing / pTOKEN ratio will increase after every redeem"
							},
							"setFeeAddress(address)": {
								"notice": "This function will be used to update the feeAddress"
							},
							"setMintAndRedeemFee(uint16)": {
								"notice": "this function is used by Owner to modify the total FEE %"
							},
							"setTeamFee(uint16)": {
								"notice": "Team fee can't be more than 4% and less than 1% Incentives for liquidity providers are included in the Team fee (FEES)"
							}
						},
						"notice": "The backing / pTOKEN ratio is designed to appreciate for every mints and redeems that occur.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1550
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 1551,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1550,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1550,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								1550
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1540,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1540,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							284
						],
						"IERC20Errors": [
							189
						],
						"IERC721Errors": [
							237
						]
					},
					"id": 285,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 150,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:1",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 189,
							"linearizedBaseContracts": [
								189
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 159,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "652:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "668:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "685:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:1"
									},
									"src": "621:80:1"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 164,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "889:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:1"
									},
									"src": "864:41:1"
								},
								{
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 169,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "1102:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:1"
									},
									"src": "1075:45:1"
								},
								{
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:1",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 178,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1509:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1526:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1545:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:1"
									},
									"src": "1476:85:1"
								},
								{
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 183,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "1773:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:1"
									},
									"src": "1746:45:1"
								},
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:1",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 188,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2023:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:1"
									},
									"src": "1997:43:1"
								}
							],
							"scope": 285,
							"src": "278:1764:1",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 190,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:1",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 237,
							"linearizedBaseContracts": [
								237
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:1",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 195,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "2465:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:1"
									},
									"src": "2440:40:1"
								},
								{
									"documentation": {
										"id": 196,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:1",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 200,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2652:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:1"
									},
									"src": "2623:46:1"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:1",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 209,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "2996:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3012:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3029:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:1"
									},
									"src": "2969:75:1"
								},
								{
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 214,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "3233:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:1"
									},
									"src": "3207:42:1"
								},
								{
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 219,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "3447:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:1"
									},
									"src": "3419:46:1"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 226,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "3756:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "3774:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:1"
									},
									"src": "3723:68:1"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 231,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "4004:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:1"
									},
									"src": "3976:46:1"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 236,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "4258:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:1"
									},
									"src": "4230:46:1"
								}
							],
							"scope": 285,
							"src": "2186:2092:1",
							"usedErrors": [
								195,
								200,
								209,
								214,
								219,
								226,
								231,
								236
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 238,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:1",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 284,
							"linearizedBaseContracts": [
								284
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 249,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4854:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4870:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4887:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4903:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:1"
									},
									"src": "4821:99:1"
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 254,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "5110:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:1"
									},
									"src": "5083:43:1"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 259,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "5325:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:1"
									},
									"src": "5296:47:1"
								},
								{
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 266,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "5645:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "5663:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:1"
									},
									"src": "5610:68:1"
								},
								{
									"documentation": {
										"id": 267,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 271,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "5892:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:1"
									},
									"src": "5863:47:1"
								},
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 276,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6147:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:1"
									},
									"src": "6118:47:1"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:1",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 283,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "6488:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "6507:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:1"
									},
									"src": "6456:73:1"
								}
							],
							"scope": 285,
							"src": "4424:2107:1",
							"usedErrors": [
								249,
								254,
								259,
								266,
								271,
								276,
								283
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1550
						],
						"ERC20": [
							799
						],
						"IERC20": [
							877
						],
						"IERC20Errors": [
							189
						],
						"IERC20Metadata": [
							949
						]
					},
					"id": 800,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 286,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 288,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 878,
							"src": "131:36:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 287,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "139:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 290,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 950,
							"src": "168:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 289,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 949,
										"src": "176:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 292,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 1551,
							"src": "232:48:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 291,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1550,
										"src": "240:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 294,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 285,
							"src": "281:65:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 293,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 189,
										"src": "289:12:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 296,
										"name": "Context",
										"nameLocations": [
											"1428:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1550,
										"src": "1428:7:2"
									},
									"id": 297,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:2"
								},
								{
									"baseName": {
										"id": 298,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 877,
										"src": "1437:6:2"
									},
									"id": 299,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:2"
								},
								{
									"baseName": {
										"id": 300,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 949,
										"src": "1445:14:2"
									},
									"id": 301,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:2"
								},
								{
									"baseName": {
										"id": 302,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 189,
										"src": "1461:12:2"
									},
									"id": 303,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:2"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 295,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 799,
							"linearizedBaseContracts": [
								799,
								189,
								949,
								877,
								1550
							],
							"name": "ERC20",
							"nameLocation": "1419:5:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 307,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1480:53:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 306,
										"keyName": "account",
										"keyNameLocation": "1496:7:2",
										"keyType": {
											"id": 304,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 305,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 313,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1540:83:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 312,
										"keyName": "account",
										"keyNameLocation": "1556:7:2",
										"keyType": {
											"id": 308,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 311,
											"keyName": "spender",
											"keyNameLocation": "1583:7:2",
											"keyType": {
												"id": 309,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 310,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 315,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1630:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 314,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 317,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1665:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 316,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 319,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1691:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 318,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "1952:57:2",
										"statements": [
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 327,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "1962:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 328,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 322,
														"src": "1970:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:2"
											},
											{
												"expression": {
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 331,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "1985:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 332,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 324,
														"src": "1995:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 334,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:2"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 336,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1908:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 321,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1929:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 323,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:2"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:2"
									},
									"scope": 799,
									"src": "1896:113:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										936
									],
									"body": {
										"id": 344,
										"nodeType": "Block",
										"src": "2134:29:2",
										"statements": [
											{
												"expression": {
													"id": 342,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 317,
													"src": "2151:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 341,
												"id": 343,
												"nodeType": "Return",
												"src": "2144:12:2"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:2"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "2119:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 339,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:2"
									},
									"scope": 799,
									"src": "2074:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										942
									],
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "2338:31:2",
										"statements": [
											{
												"expression": {
													"id": 351,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 319,
													"src": "2355:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 350,
												"id": 352,
												"nodeType": "Return",
												"src": "2348:14:2"
											}
										]
									},
									"documentation": {
										"id": 346,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:2"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "2323:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:2"
									},
									"scope": 799,
									"src": "2276:93:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										948
									],
									"body": {
										"id": 362,
										"nodeType": "Block",
										"src": "3058:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 360,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 359,
												"id": 361,
												"nodeType": "Return",
												"src": "3068:9:2"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:2"
									},
									"returnParameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "3051:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 357,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:2"
									},
									"scope": 799,
									"src": "3002:82:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										826
									],
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "3205:36:2",
										"statements": [
											{
												"expression": {
													"id": 369,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 315,
													"src": "3222:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 368,
												"id": 370,
												"nodeType": "Return",
												"src": "3215:19:2"
											}
										]
									},
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:2"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "3196:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:2"
									},
									"scope": 799,
									"src": "3144:97:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										834
									],
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "3373:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 380,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 307,
														"src": "3390:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 382,
													"indexExpression": {
														"id": 381,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 375,
														"src": "3400:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 379,
												"id": 383,
												"nodeType": "Return",
												"src": "3383:25:2"
											}
										]
									},
									"documentation": {
										"id": 373,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3318:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 374,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:2"
									},
									"returnParameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3364:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:2"
									},
									"scope": 799,
									"src": "3299:116:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										844
									],
									"body": {
										"id": 408,
										"nodeType": "Block",
										"src": "3685:103:2",
										"statements": [
											{
												"assignments": [
													396
												],
												"declarations": [
													{
														"constant": false,
														"id": 396,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 408,
														"src": "3695:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 395,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 399,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 397,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1540,
														"src": "3711:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 401,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "3743:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 402,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "3750:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 403,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "3754:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 400,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "3733:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 394,
												"id": 407,
												"nodeType": "Return",
												"src": "3770:11:2"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3628:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3640:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:2"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3679:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 392,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:2"
									},
									"scope": 799,
									"src": "3610:178:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										854
									],
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "3935:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 419,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "3952:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 421,
														"indexExpression": {
															"id": 420,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "3964:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 423,
													"indexExpression": {
														"id": 422,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "3971:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 418,
												"id": 424,
												"nodeType": "Return",
												"src": "3945:34:2"
											}
										]
									},
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3865:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3880:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:2"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3926:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:2"
									},
									"scope": 799,
									"src": "3846:140:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										864
									],
									"body": {
										"id": 449,
										"nodeType": "Block",
										"src": "4372:107:2",
										"statements": [
											{
												"assignments": [
													437
												],
												"declarations": [
													{
														"constant": false,
														"id": 437,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 449,
														"src": "4382:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 436,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 440,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 438,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1540,
														"src": "4398:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "4429:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "4436:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "4445:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 441,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															690,
															750
														],
														"referencedDeclaration": 690,
														"src": "4420:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 435,
												"id": 448,
												"nodeType": "Return",
												"src": "4461:11:2"
											}
										]
									},
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4310:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4327:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:2"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4366:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 433,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:2"
									},
									"scope": 799,
									"src": "4293:186:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										876
									],
									"body": {
										"id": 481,
										"nodeType": "Block",
										"src": "5132:151:2",
										"statements": [
											{
												"assignments": [
													463
												],
												"declarations": [
													{
														"constant": false,
														"id": 463,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 481,
														"src": "5142:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 462,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 466,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 464,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1540,
														"src": "5160:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 468,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "5198:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "5204:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 470,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "5213:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 467,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "5182:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 472,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 474,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "5239:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 475,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 455,
															"src": "5245:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 476,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "5249:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 473,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "5229:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 478,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 461,
												"id": 480,
												"nodeType": "Return",
												"src": "5265:11:2"
											}
										]
									},
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "5061:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "5075:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "5087:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:2"
									},
									"returnParameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "5126:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 459,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:2"
									},
									"scope": 799,
									"src": "5039:244:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 528,
										"nodeType": "Block",
										"src": "5725:231:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 492,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 485,
														"src": "5739:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 493,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 496,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 506,
												"nodeType": "IfStatement",
												"src": "5735:86:2",
												"trueBody": {
													"id": 505,
													"nodeType": "Block",
													"src": "5759:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 501,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 499,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 498,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "5780:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 504,
															"nodeType": "RevertStatement",
															"src": "5773:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 507,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 487,
														"src": "5834:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 508,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 511,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 521,
												"nodeType": "IfStatement",
												"src": "5830:86:2",
												"trueBody": {
													"id": 520,
													"nodeType": "Block",
													"src": "5852:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 516,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 515,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 514,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 517,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 513,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "5873:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 518,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 519,
															"nodeType": "RevertStatement",
															"src": "5866:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 523,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "5933:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 524,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "5939:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 525,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "5943:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 522,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "5925:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:2"
											}
										]
									},
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5675:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5689:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5701:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:2"
									},
									"returnParameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:2"
									},
									"scope": 799,
									"src": "5656:300:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "6346:1032:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 539,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "6360:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 540,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 543,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 576,
													"nodeType": "Block",
													"src": "6534:362:2",
													"statements": [
														{
															"assignments": [
																551
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 551,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 576,
																	"src": "6548:19:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 550,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 555,
															"initialValue": {
																"baseExpression": {
																	"id": 552,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 307,
																	"src": "6570:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 554,
																"indexExpression": {
																	"id": 553,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 532,
																	"src": "6580:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 556,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 551,
																	"src": "6603:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 557,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "6617:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 566,
															"nodeType": "IfStatement",
															"src": "6599:115:2",
															"trueBody": {
																"id": 565,
																"nodeType": "Block",
																"src": "6624:90:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 560,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 532,
																					"src": "6674:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 561,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 551,
																					"src": "6680:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 562,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 536,
																					"src": "6693:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 559,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "6649:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 564,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:2"
																	}
																]
															}
														},
														{
															"id": 575,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:2",
															"statements": [
																{
																	"expression": {
																		"id": 573,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 567,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 307,
																				"src": "6834:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 569,
																			"indexExpression": {
																				"id": 568,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "6844:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 572,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 570,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 551,
																				"src": "6852:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 571,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 536,
																				"src": "6866:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 574,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:2"
																}
															]
														}
													]
												},
												"id": 577,
												"nodeType": "IfStatement",
												"src": "6356:540:2",
												"trueBody": {
													"id": 549,
													"nodeType": "Block",
													"src": "6380:148:2",
													"statements": [
														{
															"expression": {
																"id": 547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 545,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 315,
																	"src": "6496:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 546,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "6512:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 548,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 578,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "6910:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 579,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 582,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 597,
													"nodeType": "Block",
													"src": "7125:206:2",
													"statements": [
														{
															"id": 596,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:2",
															"statements": [
																{
																	"expression": {
																		"id": 594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 590,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 307,
																				"src": "7284:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 592,
																			"indexExpression": {
																				"id": 591,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 534,
																				"src": "7294:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 593,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "7301:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 595,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:2"
																}
															]
														}
													]
												},
												"id": 598,
												"nodeType": "IfStatement",
												"src": "6906:425:2",
												"trueBody": {
													"id": 589,
													"nodeType": "Block",
													"src": "6928:191:2",
													"statements": [
														{
															"id": 588,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:2",
															"statements": [
																{
																	"expression": {
																		"id": 586,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 584,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "7073:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 585,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "7089:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 587,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:2"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 600,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "7355:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 601,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "7361:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 602,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "7365:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 599,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "7346:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 604,
												"nodeType": "EmitStatement",
												"src": "7341:30:2"
											}
										]
									},
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:2",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6288:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6302:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6314:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:2"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:2"
									},
									"scope": 799,
									"src": "6271:1107:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 638,
										"nodeType": "Block",
										"src": "7777:152:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 614,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 609,
														"src": "7791:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 617,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 615,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 628,
												"nodeType": "IfStatement",
												"src": "7787:91:2",
												"trueBody": {
													"id": 627,
													"nodeType": "Block",
													"src": "7814:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 623,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 622,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 621,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 620,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "7835:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 626,
															"nodeType": "RevertStatement",
															"src": "7828:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 631,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 630,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 634,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "7907:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 635,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "7916:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 629,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "7887:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 637,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:2"
											}
										]
									},
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:2",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "7736:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "7753:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:2"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:2"
									},
									"scope": 799,
									"src": "7721:208:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "8303:150:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 647,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 642,
														"src": "8317:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 648,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 651,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 661,
												"nodeType": "IfStatement",
												"src": "8313:89:2",
												"trueBody": {
													"id": 660,
													"nodeType": "Block",
													"src": "8340:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 656,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 655,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 654,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 653,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "8361:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 659,
															"nodeType": "RevertStatement",
															"src": "8354:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 663,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "8419:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 664,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 668,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "8440:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 662,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "8411:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 670,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:2"
											}
										]
									},
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:2",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "8262:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "8279:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:2"
									},
									"returnParameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:2"
									},
									"scope": 799,
									"src": "8247:206:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "9063:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 683,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "9082:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 684,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "9089:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 685,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "9098:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 686,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 682,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															690,
															750
														],
														"referencedDeclaration": 750,
														"src": "9073:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 688,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:2"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:2",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "9007:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "9022:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "9039:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:2"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:2"
									},
									"scope": 799,
									"src": "8989:128:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 749,
										"nodeType": "Block",
										"src": "10047:334:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 702,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "10061:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 705,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 703,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 706,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 716,
												"nodeType": "IfStatement",
												"src": "10057:89:2",
												"trueBody": {
													"id": 715,
													"nodeType": "Block",
													"src": "10082:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 711,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 709,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 712,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 708,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 183,
																	"src": "10103:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 714,
															"nodeType": "RevertStatement",
															"src": "10096:39:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 717,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 695,
														"src": "10159:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 720,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 718,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 721,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 731,
												"nodeType": "IfStatement",
												"src": "10155:90:2",
												"trueBody": {
													"id": 730,
													"nodeType": "Block",
													"src": "10182:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 726,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 724,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 727,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 723,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 188,
																	"src": "10203:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 729,
															"nodeType": "RevertStatement",
															"src": "10196:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 732,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 313,
																"src": "10254:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 735,
															"indexExpression": {
																"id": 733,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "10266:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 736,
														"indexExpression": {
															"id": 734,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "10273:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 737,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "10284:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 739,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:2"
											},
											{
												"condition": {
													"id": 740,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 699,
													"src": "10303:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 748,
												"nodeType": "IfStatement",
												"src": "10299:76:2",
												"trueBody": {
													"id": 747,
													"nodeType": "Block",
													"src": "10314:61:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 742,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 693,
																		"src": "10342:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 743,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 695,
																		"src": "10349:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 744,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "10358:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 741,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 820,
																	"src": "10333:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 746,
															"nodeType": "EmitStatement",
															"src": "10328:36:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:2",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 750,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9967:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9982:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 694,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9999:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 696,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "10014:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 698,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:2"
									},
									"returnParameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:2"
									},
									"scope": 799,
									"src": "9949:432:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 797,
										"nodeType": "Block",
										"src": "10752:388:2",
										"statements": [
											{
												"assignments": [
													761
												],
												"declarations": [
													{
														"constant": false,
														"id": 761,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 797,
														"src": "10762:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 760,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 766,
												"initialValue": {
													"arguments": [
														{
															"id": 763,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 753,
															"src": "10799:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 764,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "10806:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 762,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 426,
														"src": "10789:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 767,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "10828:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 769,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 768,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 771,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 796,
												"nodeType": "IfStatement",
												"src": "10824:310:2",
												"trueBody": {
													"id": 795,
													"nodeType": "Block",
													"src": "10867:267:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 774,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 761,
																	"src": "10885:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 775,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "10904:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 784,
															"nodeType": "IfStatement",
															"src": "10881:130:2",
															"trueBody": {
																"id": 783,
																"nodeType": "Block",
																"src": "10911:100:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 778,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 755,
																					"src": "10963:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 779,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 761,
																					"src": "10972:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 780,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "10990:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 777,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 178,
																				"src": "10936:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 781,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 782,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:2"
																	}
																]
															}
														},
														{
															"id": 794,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 786,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 753,
																				"src": "11061:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 787,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 755,
																				"src": "11068:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 790,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 788,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 761,
																					"src": "11077:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 789,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "11096:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 791,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 785,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				690,
																				750
																			],
																			"referencedDeclaration": 750,
																			"src": "11052:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 793,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 798,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10688:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 752,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10720:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:2"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:2"
									},
									"scope": 799,
									"src": "10663:477:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 800,
							"src": "1401:9741:2",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "105:11038:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							877
						]
					},
					"id": 878,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 801,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 802,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 877,
							"linearizedBaseContracts": [
								877
							],
							"name": "IERC20",
							"nameLocation": "213:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 811,
									"name": "Transfer",
									"nameLocation": "395:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "404:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "426:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 809,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "446:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:3"
									},
									"src": "389:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 812,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 820,
									"name": "Approval",
									"nameLocation": "626:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "635:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 813,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "658:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "683:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 817,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:3"
									},
									"src": "620:78:3"
								},
								{
									"documentation": {
										"id": 821,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 826,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 877,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 834,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "930:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:3"
									},
									"returnParameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "970:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:3"
									},
									"scope": 877,
									"src": "911:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1221:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1233:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:3"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1266:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 841,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:3"
									},
									"scope": 877,
									"src": "1203:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 854,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1566:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1581:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:3"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:3"
									},
									"scope": 877,
									"src": "1547:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 864,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2325:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2342:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:3"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2375:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 861,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:3"
									},
									"scope": 877,
									"src": "2308:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 865,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 876,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2711:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2725:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2737:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:3"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2770:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:3"
									},
									"scope": 877,
									"src": "2689:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 878,
							"src": "203:2575:3",
							"usedErrors": [],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "106:2673:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
					"exportedSymbols": {
						"Context": [
							1550
						],
						"ERC20": [
							799
						],
						"ERC20Burnable": [
							923
						]
					},
					"id": 924,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 879,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 881,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 924,
							"sourceUnit": 800,
							"src": "150:35:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 880,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 799,
										"src": "158:5:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../../utils/Context.sol",
							"id": 883,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 924,
							"sourceUnit": 1551,
							"src": "186:51:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 882,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1550,
										"src": "194:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 885,
										"name": "Context",
										"nameLocations": [
											"483:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1550,
										"src": "483:7:4"
									},
									"id": 886,
									"nodeType": "InheritanceSpecifier",
									"src": "483:7:4"
								},
								{
									"baseName": {
										"id": 887,
										"name": "ERC20",
										"nameLocations": [
											"492:5:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 799,
										"src": "492:5:4"
									},
									"id": 888,
									"nodeType": "InheritanceSpecifier",
									"src": "492:5:4"
								}
							],
							"canonicalName": "ERC20Burnable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 884,
								"nodeType": "StructuredDocumentation",
								"src": "239:208:4",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 923,
							"linearizedBaseContracts": [
								923,
								799,
								189,
								949,
								877,
								1550
							],
							"name": "ERC20Burnable",
							"nameLocation": "466:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 900,
										"nodeType": "Block",
										"src": "662:43:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 895,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1540,
																"src": "678:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "678:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 897,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 891,
															"src": "692:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 894,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "672:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "672:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 899,
												"nodeType": "ExpressionStatement",
												"src": "672:26:4"
											}
										]
									},
									"documentation": {
										"id": 889,
										"nodeType": "StructuredDocumentation",
										"src": "504:109:4",
										"text": " @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "627:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "640:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "632:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "631:15:4"
									},
									"returnParameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "662:0:4"
									},
									"scope": 923,
									"src": "618:87:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "1086:93:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 910,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "1112:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 911,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1540,
																"src": "1121:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 912,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1121:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 913,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 906,
															"src": "1135:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 909,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "1096:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1096:45:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 915,
												"nodeType": "ExpressionStatement",
												"src": "1096:45:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 917,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "1157:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 918,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 906,
															"src": "1166:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 916,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "1151:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1151:21:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 920,
												"nodeType": "ExpressionStatement",
												"src": "1151:21:4"
											}
										]
									},
									"documentation": {
										"id": 902,
										"nodeType": "StructuredDocumentation",
										"src": "711:305:4",
										"text": " @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."
									},
									"functionSelector": "79cc6790",
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "1030:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1047:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "1039:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 903,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1039:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1064:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "1056:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 905,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1056:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1038:32:4"
									},
									"returnParameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1086:0:4"
									},
									"scope": 923,
									"src": "1021:158:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 924,
							"src": "448:733:4",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "124:1058:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							877
						],
						"IERC20Metadata": [
							949
						]
					},
					"id": 950,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 925,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 927,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 950,
							"sourceUnit": 878,
							"src": "151:37:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 926,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "159:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 929,
										"name": "IERC20",
										"nameLocations": [
											"305:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 877,
										"src": "305:6:5"
									},
									"id": 930,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:5"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 928,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:5",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 949,
							"linearizedBaseContracts": [
								949,
								877
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 931,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 936,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:5"
									},
									"returnParameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "416:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 933,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:5"
									},
									"scope": 949,
									"src": "377:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 937,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:5",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 942,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:5"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "539:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 939,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:5"
									},
									"scope": 949,
									"src": "498:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 943,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:5",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 948,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:5"
									},
									"returnParameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "673:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 945,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:5"
									},
									"scope": 949,
									"src": "630:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 950,
							"src": "277:405:5",
							"usedErrors": [],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "125:558:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							985
						]
					},
					"id": 986,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 951,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 952,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:6",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 985,
							"linearizedBaseContracts": [
								985
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 953,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:6",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 970,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "3022:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 954,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "3045:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 956,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "3070:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 958,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "3093:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 960,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "3119:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 962,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "3136:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 964,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "3155:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 966,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:6"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:6"
									},
									"scope": 985,
									"src": "2997:183:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 971,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:6",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 978,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "3501:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:6"
									},
									"returnParameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "3539:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 975,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:6"
									},
									"scope": 985,
									"src": "3485:63:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 979,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:6",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 984,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:6"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "3791:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 981,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:6"
									},
									"scope": 985,
									"src": "3740:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 986,
							"src": "2113:1689:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							1528
						],
						"IERC20": [
							877
						],
						"IERC20Permit": [
							985
						],
						"SafeERC20": [
							1275
						]
					},
					"id": 1276,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 987,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 989,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1276,
							"sourceUnit": 878,
							"src": "141:37:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 988,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "149:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 991,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1276,
							"sourceUnit": 986,
							"src": "179:60:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 990,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 985,
										"src": "187:12:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 993,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1276,
							"sourceUnit": 1529,
							"src": "240:51:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 992,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1528,
										"src": "248:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 994,
								"nodeType": "StructuredDocumentation",
								"src": "293:457:7",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 1275,
							"linearizedBaseContracts": [
								1275
							],
							"name": "SafeERC20",
							"nameLocation": "759:9:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 997,
									"libraryName": {
										"id": 995,
										"name": "Address",
										"nameLocations": [
											"781:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1528,
										"src": "781:7:7"
									},
									"nodeType": "UsingForDirective",
									"src": "775:26:7",
									"typeName": {
										"id": 996,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "793:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"documentation": {
										"id": 998,
										"nodeType": "StructuredDocumentation",
										"src": "807:64:7",
										"text": " @dev An operation with an ERC20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 1002,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "882:24:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "915:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "907:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 999,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "906:15:7"
									},
									"src": "876:46:7"
								},
								{
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "928:71:7",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 1011,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "1010:32:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1051:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "1043:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "1068:16:7",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "1060:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1094:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "1086:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1086:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1042:70:7"
									},
									"src": "1004:109:7"
								},
								{
									"body": {
										"id": 1034,
										"nodeType": "Block",
										"src": "1375:88:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1023,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1015,
															"src": "1405:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1026,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1015,
																		"src": "1427:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$877",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1027,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1433:8:7",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 844,
																	"src": "1427:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1028,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1017,
																			"src": "1444:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1029,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1019,
																			"src": "1448:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1030,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1443:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 1024,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1412:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1025,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1416:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1412:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1031,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1412:43:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1022,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1225,
														"src": "1385:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1385:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1033,
												"nodeType": "ExpressionStatement",
												"src": "1385:71:7"
											}
										]
									},
									"documentation": {
										"id": 1012,
										"nodeType": "StructuredDocumentation",
										"src": "1119:179:7",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1035,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1312:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1332:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "1325:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$877",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1014,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1013,
														"name": "IERC20",
														"nameLocations": [
															"1325:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 877,
														"src": "1325:6:7"
													},
													"referencedDeclaration": 877,
													"src": "1325:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$877",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1347:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "1339:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1016,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1359:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "1351:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1351:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1324:41:7"
									},
									"returnParameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1375:0:7"
									},
									"scope": 1275,
									"src": "1303:160:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1061,
										"nodeType": "Block",
										"src": "1792:98:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1049,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1039,
															"src": "1822:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1052,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1039,
																		"src": "1844:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$877",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1053,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1850:12:7",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 876,
																	"src": "1844:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1054,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1041,
																			"src": "1865:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1055,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1043,
																			"src": "1871:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1056,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1045,
																			"src": "1875:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1057,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1864:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 1050,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1829:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1833:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1829:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1829:53:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1048,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1225,
														"src": "1802:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1802:81:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1060,
												"nodeType": "ExpressionStatement",
												"src": "1802:81:7"
											}
										]
									},
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "1469:228:7",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 1062,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1711:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1735:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "1728:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$877",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1038,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1037,
														"name": "IERC20",
														"nameLocations": [
															"1728:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 877,
														"src": "1728:6:7"
													},
													"referencedDeclaration": 877,
													"src": "1728:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$877",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1750:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "1742:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1040,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1742:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1764:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "1756:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1756:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1776:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "1768:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1044,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1727:55:7"
									},
									"returnParameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:0:7"
									},
									"scope": 1275,
									"src": "1702:188:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "2167:139:7",
										"statements": [
											{
												"assignments": [
													1074
												],
												"declarations": [
													{
														"constant": false,
														"id": 1074,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2185:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1092,
														"src": "2177:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1073,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2177:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1083,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1079,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2224:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$1275",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$1275",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 1078,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2216:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1077,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2216:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1080,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2216:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1081,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1068,
															"src": "2231:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1075,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1066,
															"src": "2200:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															}
														},
														"id": 1076,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2206:9:7",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 854,
														"src": "2200:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 1082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2200:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2177:62:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1085,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1066,
															"src": "2262:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1086,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1068,
															"src": "2269:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1089,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1087,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1074,
																"src": "2278:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1088,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1070,
																"src": "2293:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2278:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1084,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1183,
														"src": "2249:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2249:50:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1091,
												"nodeType": "ExpressionStatement",
												"src": "2249:50:7"
											}
										]
									},
									"documentation": {
										"id": 1063,
										"nodeType": "StructuredDocumentation",
										"src": "1896:180:7",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2090:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1066,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2119:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "2112:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$877",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1065,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1064,
														"name": "IERC20",
														"nameLocations": [
															"2112:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 877,
														"src": "2112:6:7"
													},
													"referencedDeclaration": 877,
													"src": "2112:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$877",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2134:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "2126:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2151:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "2143:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1069,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2111:46:7"
									},
									"returnParameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:0:7"
									},
									"scope": 1275,
									"src": "2081:225:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1135,
										"nodeType": "Block",
										"src": "2607:370:7",
										"statements": [
											{
												"id": 1134,
												"nodeType": "UncheckedBlock",
												"src": "2617:354:7",
												"statements": [
													{
														"assignments": [
															1105
														],
														"declarations": [
															{
																"constant": false,
																"id": 1105,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "2649:16:7",
																"nodeType": "VariableDeclaration",
																"scope": 1134,
																"src": "2641:24:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1104,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2641:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1114,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1110,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2692:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$1275",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$1275",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 1109,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2684:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1108,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2684:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1111,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2684:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1112,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1099,
																	"src": "2699:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1106,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1097,
																	"src": "2668:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$877",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1107,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2674:9:7",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 854,
																"src": "2668:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2668:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2641:66:7"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1115,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1105,
																"src": "2725:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1116,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1101,
																"src": "2744:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2725:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1125,
														"nodeType": "IfStatement",
														"src": "2721:160:7",
														"trueBody": {
															"id": 1124,
															"nodeType": "Block",
															"src": "2763:118:7",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 1119,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1099,
																				"src": "2821:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1120,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1105,
																				"src": "2830:16:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1121,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1101,
																				"src": "2848:17:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1118,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1011,
																			"src": "2788:32:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																				"typeString": "function (address,uint256,uint256) pure"
																			}
																		},
																		"id": 1122,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2788:78:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1123,
																	"nodeType": "RevertStatement",
																	"src": "2781:85:7"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1127,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1097,
																	"src": "2907:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$877",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 1128,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1099,
																	"src": "2914:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1129,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1105,
																		"src": "2923:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1130,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1101,
																		"src": "2942:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2923:36:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$877",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1126,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1183,
																"src": "2894:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 1132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2894:66:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1133,
														"nodeType": "ExpressionStatement",
														"src": "2894:66:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1094,
										"nodeType": "StructuredDocumentation",
										"src": "2312:192:7",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."
									},
									"id": 1136,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2518:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2547:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "2540:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$877",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1096,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1095,
														"name": "IERC20",
														"nameLocations": [
															"2540:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 877,
														"src": "2540:6:7"
													},
													"referencedDeclaration": 877,
													"src": "2540:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$877",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2562:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "2554:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1098,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2554:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "2579:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "2571:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2571:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:58:7"
									},
									"returnParameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2607:0:7"
									},
									"scope": 1275,
									"src": "2509:468:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1182,
										"nodeType": "Block",
										"src": "3373:303:7",
										"statements": [
											{
												"assignments": [
													1148
												],
												"declarations": [
													{
														"constant": false,
														"id": 1148,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3396:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1182,
														"src": "3383:25:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1147,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3383:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1157,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1151,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1140,
																"src": "3426:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$877",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1152,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3432:7:7",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 864,
															"src": "3426:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 1153,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1142,
																	"src": "3442:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1154,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1144,
																	"src": "3451:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1155,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3441:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 1149,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3411:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1150,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3415:10:7",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "3411:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3411:47:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3383:75:7"
											},
											{
												"condition": {
													"id": 1162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3473:45:7",
													"subExpression": {
														"arguments": [
															{
																"id": 1159,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1140,
																"src": "3498:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$877",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 1160,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1148,
																"src": "3505:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$877",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1158,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1274,
															"src": "3474:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 1161,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3474:44:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1181,
												"nodeType": "IfStatement",
												"src": "3469:201:7",
												"trueBody": {
													"id": 1180,
													"nodeType": "Block",
													"src": "3520:150:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1164,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1140,
																		"src": "3554:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$877",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1167,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1140,
																					"src": "3576:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$877",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1168,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3582:7:7",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 864,
																				"src": "3576:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1169,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1142,
																						"src": "3592:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 1170,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3601:1:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 1171,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3591:12:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 1165,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3561:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1166,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "3565:10:7",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "3561:14:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 1172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3561:43:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$877",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1163,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1225,
																	"src": "3534:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1173,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:71:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1174,
															"nodeType": "ExpressionStatement",
															"src": "3534:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1176,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1140,
																		"src": "3639:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$877",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 1177,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1148,
																		"src": "3646:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$877",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1175,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1225,
																	"src": "3619:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3619:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1179,
															"nodeType": "ExpressionStatement",
															"src": "3619:40:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1137,
										"nodeType": "StructuredDocumentation",
										"src": "2983:308:7",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 1183,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3305:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3325:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3318:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$877",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1139,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1138,
														"name": "IERC20",
														"nameLocations": [
															"3318:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 877,
														"src": "3318:6:7"
													},
													"referencedDeclaration": 877,
													"src": "3318:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$877",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3340:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3332:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3332:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3357:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3349:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3349:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:46:7"
									},
									"returnParameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:7"
									},
									"scope": 1275,
									"src": "3296:380:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1224,
										"nodeType": "Block",
										"src": "4129:559:7",
										"statements": [
											{
												"assignments": [
													1193
												],
												"declarations": [
													{
														"constant": false,
														"id": 1193,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4491:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1224,
														"src": "4478:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1192,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4478:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1201,
												"initialValue": {
													"arguments": [
														{
															"id": 1199,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1189,
															"src": "4532:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1196,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1187,
																	"src": "4512:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$877",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$877",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1195,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4504:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1194,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4504:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4504:14:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1198,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4519:12:7",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1349,
														"src": "4504:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory) returns (bytes memory)"
														}
													},
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4504:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4478:59:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1205,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1202,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1193,
																"src": "4551:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4562:6:7",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4551:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1204,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4572:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4551:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1213,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4577:31:7",
														"subExpression": {
															"arguments": [
																{
																	"id": 1208,
																	"name": "returndata",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1193,
																	"src": "4589:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1210,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4602:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bool_$",
																				"typeString": "type(bool)"
																			},
																			"typeName": {
																				"id": 1209,
																				"name": "bool",
																				"nodeType": "ElementaryTypeName",
																				"src": "4602:4:7",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"id": 1211,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4601:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																],
																"expression": {
																	"id": 1206,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4578:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4582:6:7",
																"memberName": "decode",
																"nodeType": "MemberAccess",
																"src": "4578:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4578:30:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4551:57:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1223,
												"nodeType": "IfStatement",
												"src": "4547:135:7",
												"trueBody": {
													"id": 1222,
													"nodeType": "Block",
													"src": "4610:72:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1218,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1187,
																				"src": "4664:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$877",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$877",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 1217,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4656:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1216,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4656:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1219,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4656:14:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1215,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1002,
																	"src": "4631:24:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4631:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1221,
															"nodeType": "RevertStatement",
															"src": "4624:47:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1184,
										"nodeType": "StructuredDocumentation",
										"src": "3682:372:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 1225,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "4068:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1187,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4095:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "4088:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$877",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1186,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1185,
														"name": "IERC20",
														"nameLocations": [
															"4088:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 877,
														"src": "4088:6:7"
													},
													"referencedDeclaration": 877,
													"src": "4088:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$877",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4115:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "4102:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1188,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4102:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4087:33:7"
									},
									"returnParameters": {
										"id": 1191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4129:0:7"
									},
									"scope": 1275,
									"src": "4059:629:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1273,
										"nodeType": "Block",
										"src": "5278:489:7",
										"statements": [
											{
												"assignments": [
													1237,
													1239
												],
												"declarations": [
													{
														"constant": false,
														"id": 1237,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5579:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1273,
														"src": "5574:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1236,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5574:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1239,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5601:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1273,
														"src": "5588:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1238,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5588:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1247,
												"initialValue": {
													"arguments": [
														{
															"id": 1245,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1231,
															"src": "5635:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1242,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1229,
																	"src": "5623:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$877",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$877",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1241,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5615:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1240,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5615:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5615:14:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1244,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5630:4:7",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "5615:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5615:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5573:67:7"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1248,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1237,
															"src": "5657:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 1260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 1249,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1239,
																				"src": "5669:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 1250,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5680:6:7",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "5669:17:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1251,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5690:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "5669:22:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 1255,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1239,
																				"src": "5706:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1257,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5719:4:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 1256,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "5719:4:7",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 1258,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5718:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 1253,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5695:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1254,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5699:6:7",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "5695:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1259,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5695:30:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "5669:56:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 1261,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5668:58:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "5657:69:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1270,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1265,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1229,
																			"src": "5738:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$877",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$877",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 1264,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5730:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1263,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5730:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1266,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5730:14:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5745:4:7",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "5730:19:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5750:6:7",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "5730:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5759:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5730:30:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5657:103:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1235,
												"id": 1272,
												"nodeType": "Return",
												"src": "5650:110:7"
											}
										]
									},
									"documentation": {
										"id": 1226,
										"nodeType": "StructuredDocumentation",
										"src": "4694:490:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 1274,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "5198:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5229:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "5222:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$877",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1228,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1227,
														"name": "IERC20",
														"nameLocations": [
															"5222:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 877,
														"src": "5222:6:7"
													},
													"referencedDeclaration": 877,
													"src": "5222:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$877",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5249:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "5236:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1230,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5236:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5221:33:7"
									},
									"returnParameters": {
										"id": 1235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1234,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "5272:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1233,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5272:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5271:6:7"
									},
									"scope": 1275,
									"src": "5189:578:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1276,
							"src": "751:5018:7",
							"usedErrors": [
								1002,
								1011
							],
							"usedEvents": []
						}
					],
					"src": "115:5655:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							1528
						]
					},
					"id": 1529,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1277,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1278,
								"nodeType": "StructuredDocumentation",
								"src": "127:67:8",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1528,
							"linearizedBaseContracts": [
								1528
							],
							"name": "Address",
							"nameLocation": "203:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1279,
										"nodeType": "StructuredDocumentation",
										"src": "217:94:8",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cd786059",
									"id": 1283,
									"name": "AddressInsufficientBalance",
									"nameLocation": "322:26:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "357:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "349:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "349:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "348:17:8"
									},
									"src": "316:50:8"
								},
								{
									"documentation": {
										"id": 1284,
										"nodeType": "StructuredDocumentation",
										"src": "372:75:8",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 1288,
									"name": "AddressEmptyCode",
									"nameLocation": "458:16:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "483:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "475:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:16:8"
									},
									"src": "452:39:8"
								},
								{
									"documentation": {
										"id": 1289,
										"nodeType": "StructuredDocumentation",
										"src": "497:89:8",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "1425ea42",
									"id": 1291,
									"name": "FailedInnerCall",
									"nameLocation": "597:15:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:8"
									},
									"src": "591:24:8"
								},
								{
									"body": {
										"id": 1331,
										"nodeType": "Block",
										"src": "1602:260:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1301,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1624:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$1528",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$1528",
																		"typeString": "library Address"
																	}
																],
																"id": 1300,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1616:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1299,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1616:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1302,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1616:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1303,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1630:7:8",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1616:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1304,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1296,
														"src": "1640:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1616:30:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1314,
												"nodeType": "IfStatement",
												"src": "1612:109:8",
												"trueBody": {
													"id": 1313,
													"nodeType": "Block",
													"src": "1648:73:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1309,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1704:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$1528",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$1528",
																					"typeString": "library Address"
																				}
																			],
																			"id": 1308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1696:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1307,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1696:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1310,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1696:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1306,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1283,
																	"src": "1669:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1311,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1669:41:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1312,
															"nodeType": "RevertStatement",
															"src": "1662:48:8"
														}
													]
												}
											},
											{
												"assignments": [
													1316,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1316,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1737:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1331,
														"src": "1732:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1315,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1732:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1323,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1321,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1780:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1317,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1294,
																"src": "1750:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1760:4:8",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1750:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1320,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1319,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1296,
																"src": "1772:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1750:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1750:33:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1731:52:8"
											},
											{
												"condition": {
													"id": 1325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1797:8:8",
													"subExpression": {
														"id": 1324,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1316,
														"src": "1798:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1330,
												"nodeType": "IfStatement",
												"src": "1793:63:8",
												"trueBody": {
													"id": 1329,
													"nodeType": "Block",
													"src": "1807:49:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1326,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1291,
																	"src": "1828:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1327,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1828:17:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1328,
															"nodeType": "RevertStatement",
															"src": "1821:24:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1292,
										"nodeType": "StructuredDocumentation",
										"src": "621:905:8",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1332,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1540:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1294,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1566:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1332,
												"src": "1550:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1550:15:8",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1585:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1332,
												"src": "1577:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1577:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1549:43:8"
									},
									"returnParameters": {
										"id": 1298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1602:0:8"
									},
									"scope": 1528,
									"src": "1531:331:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1348,
										"nodeType": "Block",
										"src": "2794:62:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1343,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1335,
															"src": "2833:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1344,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1337,
															"src": "2841:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1345,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2847:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 1342,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1395,
														"src": "2811:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 1346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2811:38:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1341,
												"id": 1347,
												"nodeType": "Return",
												"src": "2804:45:8"
											}
										]
									},
									"documentation": {
										"id": 1333,
										"nodeType": "StructuredDocumentation",
										"src": "1868:832:8",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 1349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2714:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1335,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2735:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "2727:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1337,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2756:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "2743:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1336,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2743:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2726:35:8"
									},
									"returnParameters": {
										"id": 1341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "2780:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1339,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:14:8"
									},
									"scope": 1528,
									"src": "2705:151:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1394,
										"nodeType": "Block",
										"src": "3293:279:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1363,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3315:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$1528",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$1528",
																		"typeString": "library Address"
																	}
																],
																"id": 1362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3307:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1361,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3307:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1364,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3307:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1365,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3321:7:8",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3307:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1366,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1356,
														"src": "3331:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3307:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1376,
												"nodeType": "IfStatement",
												"src": "3303:108:8",
												"trueBody": {
													"id": 1375,
													"nodeType": "Block",
													"src": "3338:73:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1371,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3394:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$1528",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$1528",
																					"typeString": "library Address"
																				}
																			],
																			"id": 1370,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3386:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1369,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3386:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1372,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3386:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1368,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1283,
																	"src": "3359:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1373,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3359:41:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1374,
															"nodeType": "RevertStatement",
															"src": "3352:48:8"
														}
													]
												}
											},
											{
												"assignments": [
													1378,
													1380
												],
												"declarations": [
													{
														"constant": false,
														"id": 1378,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3426:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1394,
														"src": "3421:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1377,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3421:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1380,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3448:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1394,
														"src": "3435:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1379,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3435:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1387,
												"initialValue": {
													"arguments": [
														{
															"id": 1385,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1354,
															"src": "3488:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1381,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1352,
																"src": "3462:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3469:4:8",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3462:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1384,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1383,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1356,
																"src": "3481:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3462:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3462:31:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3420:73:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1389,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1352,
															"src": "3537:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1390,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1378,
															"src": "3545:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1391,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1380,
															"src": "3554:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1388,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1487,
														"src": "3510:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 1392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:55:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1360,
												"id": 1393,
												"nodeType": "Return",
												"src": "3503:62:8"
											}
										]
									},
									"documentation": {
										"id": 1350,
										"nodeType": "StructuredDocumentation",
										"src": "2862:313:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 1395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "3189:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3219:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "3211:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3211:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3240:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "3227:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1353,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3227:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3254:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "3246:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3246:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:50:8"
									},
									"returnParameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "3279:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1358,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3279:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:14:8"
									},
									"scope": 1528,
									"src": "3180:392:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1420,
										"nodeType": "Block",
										"src": "3811:154:8",
										"statements": [
											{
												"assignments": [
													1406,
													1408
												],
												"declarations": [
													{
														"constant": false,
														"id": 1406,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3827:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1420,
														"src": "3822:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1405,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3822:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1408,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3849:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1420,
														"src": "3836:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1407,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3836:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1413,
												"initialValue": {
													"arguments": [
														{
															"id": 1411,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1400,
															"src": "3881:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1409,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1398,
															"src": "3863:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1410,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3870:10:8",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3863:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3863:23:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3821:65:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1415,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1398,
															"src": "3930:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1416,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1406,
															"src": "3938:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1417,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1408,
															"src": "3947:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1414,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1487,
														"src": "3903:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 1418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3903:55:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1404,
												"id": 1419,
												"nodeType": "Return",
												"src": "3896:62:8"
											}
										]
									},
									"documentation": {
										"id": 1396,
										"nodeType": "StructuredDocumentation",
										"src": "3578:128:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 1421,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3720:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3747:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "3739:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3768:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "3755:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1399,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3755:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:35:8"
									},
									"returnParameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "3797:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1402,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3797:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:14:8"
									},
									"scope": 1528,
									"src": "3711:254:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1446,
										"nodeType": "Block",
										"src": "4203:156:8",
										"statements": [
											{
												"assignments": [
													1432,
													1434
												],
												"declarations": [
													{
														"constant": false,
														"id": 1432,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4219:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1446,
														"src": "4214:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1431,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4214:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1434,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4241:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1446,
														"src": "4228:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1433,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4228:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1439,
												"initialValue": {
													"arguments": [
														{
															"id": 1437,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1426,
															"src": "4275:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1435,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1424,
															"src": "4255:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1436,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4262:12:8",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4255:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4255:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4213:67:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1441,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1424,
															"src": "4324:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1442,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1432,
															"src": "4332:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1443,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1434,
															"src": "4341:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1440,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1487,
														"src": "4297:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 1444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4297:55:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1430,
												"id": 1445,
												"nodeType": "Return",
												"src": "4290:62:8"
											}
										]
									},
									"documentation": {
										"id": 1422,
										"nodeType": "StructuredDocumentation",
										"src": "3971:130:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 1447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "4115:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1424,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4144:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "4136:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1423,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1426,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4165:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "4152:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1425,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4152:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:35:8"
									},
									"returnParameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1429,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "4189:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1428,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4189:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:14:8"
									},
									"scope": 1528,
									"src": "4106:253:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1486,
										"nodeType": "Block",
										"src": "4783:424:8",
										"statements": [
											{
												"condition": {
													"id": 1460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4797:8:8",
													"subExpression": {
														"id": 1459,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1452,
														"src": "4798:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1484,
													"nodeType": "Block",
													"src": "4857:344:8",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1475,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1466,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1454,
																			"src": "5045:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5056:6:8",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5045:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1468,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5066:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5045:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1474,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 1470,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1450,
																				"src": "5071:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 1471,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5078:4:8",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "5071:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5083:6:8",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5071:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1473,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5093:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5071:23:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5045:49:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1481,
															"nodeType": "IfStatement",
															"src": "5041:119:8",
															"trueBody": {
																"id": 1480,
																"nodeType": "Block",
																"src": "5096:64:8",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1477,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1450,
																					"src": "5138:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1476,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1288,
																				"src": "5121:16:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 1478,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5121:24:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1479,
																		"nodeType": "RevertStatement",
																		"src": "5114:31:8"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1482,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1454,
																"src": "5180:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1458,
															"id": 1483,
															"nodeType": "Return",
															"src": "5173:17:8"
														}
													]
												},
												"id": 1485,
												"nodeType": "IfStatement",
												"src": "4793:408:8",
												"trueBody": {
													"id": 1465,
													"nodeType": "Block",
													"src": "4807:44:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1462,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1454,
																		"src": "4829:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1461,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1527,
																	"src": "4821:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 1463,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4821:19:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1464,
															"nodeType": "ExpressionStatement",
															"src": "4821:19:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1448,
										"nodeType": "StructuredDocumentation",
										"src": "4365:255:8",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."
									},
									"id": 1487,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4634:26:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1450,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4678:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "4670:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1449,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4670:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4699:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "4694:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1451,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4694:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4729:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "4716:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1453,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4716:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:85:8"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "4769:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1456,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4769:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4768:14:8"
									},
									"scope": 1528,
									"src": "4625:582:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1508,
										"nodeType": "Block",
										"src": "5509:122:8",
										"statements": [
											{
												"condition": {
													"id": 1498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5523:8:8",
													"subExpression": {
														"id": 1497,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1490,
														"src": "5524:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1506,
													"nodeType": "Block",
													"src": "5583:42:8",
													"statements": [
														{
															"expression": {
																"id": 1504,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1492,
																"src": "5604:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1496,
															"id": 1505,
															"nodeType": "Return",
															"src": "5597:17:8"
														}
													]
												},
												"id": 1507,
												"nodeType": "IfStatement",
												"src": "5519:106:8",
												"trueBody": {
													"id": 1503,
													"nodeType": "Block",
													"src": "5533:44:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1500,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1492,
																		"src": "5555:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1499,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1527,
																	"src": "5547:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 1501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5547:19:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1502,
															"nodeType": "ExpressionStatement",
															"src": "5547:19:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1488,
										"nodeType": "StructuredDocumentation",
										"src": "5213:189:8",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."
									},
									"id": 1509,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5416:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1490,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5438:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "5433:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1489,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5433:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5460:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "5447:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1491,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5447:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5432:39:8"
									},
									"returnParameters": {
										"id": 1496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1495,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "5495:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1494,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5495:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:14:8"
									},
									"scope": 1528,
									"src": "5407:224:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1526,
										"nodeType": "Block",
										"src": "5798:461:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1515,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1512,
															"src": "5874:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5885:6:8",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5874:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1517,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5894:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5874:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1524,
													"nodeType": "Block",
													"src": "6204:49:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1521,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1291,
																	"src": "6225:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1522,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6225:17:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1523,
															"nodeType": "RevertStatement",
															"src": "6218:24:8"
														}
													]
												},
												"id": 1525,
												"nodeType": "IfStatement",
												"src": "5870:383:8",
												"trueBody": {
													"id": 1520,
													"nodeType": "Block",
													"src": "5897:301:8",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "6055:133:8",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "6073:40:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "6102:10:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "6096:5:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6096:17:8"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "6077:15:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6141:2:8",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "6145:10:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6137:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6137:19:8"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "6158:15:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6130:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6130:44:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6130:44:8"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 1512,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6102:10:8",
																	"valueSize": 1
																},
																{
																	"declaration": 1512,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6145:10:8",
																	"valueSize": 1
																}
															],
															"id": 1519,
															"nodeType": "InlineAssembly",
															"src": "6046:142:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1510,
										"nodeType": "StructuredDocumentation",
										"src": "5637:101:8",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."
									},
									"id": 1527,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5752:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5773:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1527,
												"src": "5760:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1511,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5760:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5759:25:8"
									},
									"returnParameters": {
										"id": 1514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5798:0:8"
									},
									"scope": 1528,
									"src": "5743:516:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1529,
							"src": "195:6066:8",
							"usedErrors": [
								1283,
								1288,
								1291
							],
							"usedEvents": []
						}
					],
					"src": "101:6161:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1550
						]
					},
					"id": 1551,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1530,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:9"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1531,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:9",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1550,
							"linearizedBaseContracts": [
								1550
							],
							"name": "Context",
							"nameLocation": "642:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1539,
										"nodeType": "Block",
										"src": "718:34:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1536,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:9",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1535,
												"id": 1538,
												"nodeType": "Return",
												"src": "728:17:9"
											}
										]
									},
									"id": 1540,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:9"
									},
									"returnParameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "709:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:9"
									},
									"scope": 1550,
									"src": "656:96:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1548,
										"nodeType": "Block",
										"src": "825:32:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1545,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:9",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1544,
												"id": 1547,
												"nodeType": "Return",
												"src": "835:15:9"
											}
										]
									},
									"id": 1549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:9"
									},
									"returnParameters": {
										"id": 1544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1543,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "809:14:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1542,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:9"
									},
									"scope": 1550,
									"src": "758:99:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1551,
							"src": "624:235:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:759:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							1619
						]
					},
					"id": 1620,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1552,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:10"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1553,
								"nodeType": "StructuredDocumentation",
								"src": "135:750:10",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 1619,
							"linearizedBaseContracts": [
								1619
							],
							"name": "ReentrancyGuard",
							"nameLocation": "904:15:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1556,
									"mutability": "constant",
									"name": "NOT_ENTERED",
									"nameLocation": "1699:11:10",
									"nodeType": "VariableDeclaration",
									"scope": 1619,
									"src": "1674:40:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1554,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1674:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 1555,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1713:1:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1559,
									"mutability": "constant",
									"name": "ENTERED",
									"nameLocation": "1745:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1619,
									"src": "1720:36:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1557,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1720:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 1558,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1755:1:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1561,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1779:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1619,
									"src": "1763:23:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1560,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1763:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1562,
										"nodeType": "StructuredDocumentation",
										"src": "1793:52:10",
										"text": " @dev Unauthorized reentrant call."
									},
									"errorSelector": "3ee5aeb5",
									"id": 1564,
									"name": "ReentrancyGuardReentrantCall",
									"nameLocation": "1856:28:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1884:2:10"
									},
									"src": "1850:37:10"
								},
								{
									"body": {
										"id": 1571,
										"nodeType": "Block",
										"src": "1907:38:10",
										"statements": [
											{
												"expression": {
													"id": 1569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1567,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1561,
														"src": "1917:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1568,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1556,
														"src": "1927:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1917:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1570,
												"nodeType": "ExpressionStatement",
												"src": "1917:21:10"
											}
										]
									},
									"id": 1572,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1565,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1904:2:10"
									},
									"returnParameters": {
										"id": 1566,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1907:0:10"
									},
									"scope": 1619,
									"src": "1893:52:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1582,
										"nodeType": "Block",
										"src": "2346:79:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1575,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1599,
														"src": "2356:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2356:21:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1577,
												"nodeType": "ExpressionStatement",
												"src": "2356:21:10"
											},
											{
												"id": 1578,
												"nodeType": "PlaceholderStatement",
												"src": "2387:1:10"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1579,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1607,
														"src": "2398:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2398:20:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1581,
												"nodeType": "ExpressionStatement",
												"src": "2398:20:10"
											}
										]
									},
									"documentation": {
										"id": 1573,
										"nodeType": "StructuredDocumentation",
										"src": "1951:366:10",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 1583,
									"name": "nonReentrant",
									"nameLocation": "2331:12:10",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1574,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2343:2:10"
									},
									"src": "2322:103:10",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1598,
										"nodeType": "Block",
										"src": "2470:268:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1586,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1561,
														"src": "2558:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1587,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1559,
														"src": "2569:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2558:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1593,
												"nodeType": "IfStatement",
												"src": "2554:86:10",
												"trueBody": {
													"id": 1592,
													"nodeType": "Block",
													"src": "2578:62:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1589,
																	"name": "ReentrancyGuardReentrantCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1564,
																	"src": "2599:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1590,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2599:30:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1591,
															"nodeType": "RevertStatement",
															"src": "2592:37:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1594,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1561,
														"src": "2714:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1595,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1559,
														"src": "2724:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2714:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1597,
												"nodeType": "ExpressionStatement",
												"src": "2714:17:10"
											}
										]
									},
									"id": 1599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2440:19:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1584,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2459:2:10"
									},
									"returnParameters": {
										"id": 1585,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2470:0:10"
									},
									"scope": 1619,
									"src": "2431:307:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1606,
										"nodeType": "Block",
										"src": "2782:170:10",
										"statements": [
											{
												"expression": {
													"id": 1604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1602,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1561,
														"src": "2924:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1603,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1556,
														"src": "2934:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2924:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1605,
												"nodeType": "ExpressionStatement",
												"src": "2924:21:10"
											}
										]
									},
									"id": 1607,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2753:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1600,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2771:2:10"
									},
									"returnParameters": {
										"id": 1601,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2782:0:10"
									},
									"scope": 1619,
									"src": "2744:208:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1617,
										"nodeType": "Block",
										"src": "3195:42:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1613,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1561,
														"src": "3212:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1614,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1559,
														"src": "3223:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3212:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1612,
												"id": 1616,
												"nodeType": "Return",
												"src": "3205:25:10"
											}
										]
									},
									"documentation": {
										"id": 1608,
										"nodeType": "StructuredDocumentation",
										"src": "2958:168:10",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 1618,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3140:23:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3163:2:10"
									},
									"returnParameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1611,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "3189:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1610,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3189:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3188:6:10"
									},
									"scope": 1619,
									"src": "3131:106:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1620,
							"src": "886:2353:10",
							"usedErrors": [
								1564
							],
							"usedEvents": []
						}
					],
					"src": "109:3131:10"
				},
				"id": 10
			},
			"pTOKEN2.sol": {
				"ast": {
					"absolutePath": "pTOKEN2.sol",
					"exportedSymbols": {
						"Context": [
							1550
						],
						"ERC20": [
							799
						],
						"ERC20Burnable": [
							923
						],
						"IERC20": [
							877
						],
						"Ownable": [
							147
						],
						"ReentrancyGuard": [
							1619
						],
						"SafeERC20": [
							1275
						],
						"pTOKEN": [
							2174
						]
					},
					"id": 2175,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1621,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "31:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"id": 1622,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2175,
							"sourceUnit": 924,
							"src": "56:74:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1624,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2175,
							"sourceUnit": 148,
							"src": "131:67:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1623,
										"name": "Ownable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 147,
										"src": "139:7:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"id": 1626,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2175,
							"sourceUnit": 1620,
							"src": "199:82:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1625,
										"name": "ReentrancyGuard",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1619,
										"src": "207:15:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1628,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2175,
							"sourceUnit": 1276,
							"src": "282:82:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1627,
										"name": "SafeERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1275,
										"src": "290:9:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1630,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2175,
							"sourceUnit": 878,
							"src": "365:70:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1629,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "373:6:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1632,
										"name": "ERC20Burnable",
										"nameLocations": [
											"794:13:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 923,
										"src": "794:13:11"
									},
									"id": 1633,
									"nodeType": "InheritanceSpecifier",
									"src": "794:13:11"
								},
								{
									"baseName": {
										"id": 1634,
										"name": "Ownable",
										"nameLocations": [
											"809:7:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "809:7:11"
									},
									"id": 1635,
									"nodeType": "InheritanceSpecifier",
									"src": "809:7:11"
								},
								{
									"baseName": {
										"id": 1636,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"818:15:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1619,
										"src": "818:15:11"
									},
									"id": 1637,
									"nodeType": "InheritanceSpecifier",
									"src": "818:15:11"
								}
							],
							"canonicalName": "pTOKEN",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1631,
								"nodeType": "StructuredDocumentation",
								"src": "436:338:11",
								"text": " @title pTOKEN, Yield bearing token backed by ERC20\n @notice The backing / pTOKEN ratio is designed to appreciate for every mints and redeems that occur.\n @custom:purpose The main purpose of pTOKENs is to generate revenue and contribute to bribing economy of ve(3;3) Dexes while being backed\n @author Michael Damiani"
							},
							"fullyImplemented": true,
							"id": 2174,
							"linearizedBaseContracts": [
								2174,
								1619,
								147,
								923,
								799,
								189,
								949,
								877,
								1550
							],
							"name": "pTOKEN",
							"nameLocation": "784:6:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1641,
									"libraryName": {
										"id": 1638,
										"name": "SafeERC20",
										"nameLocations": [
											"847:9:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1275,
										"src": "847:9:11"
									},
									"nodeType": "UsingForDirective",
									"src": "841:27:11",
									"typeName": {
										"id": 1640,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1639,
											"name": "IERC20",
											"nameLocations": [
												"861:6:11"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 877,
											"src": "861:6:11"
										},
										"referencedDeclaration": 877,
										"src": "861:6:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$877",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"documentation": {
										"id": 1642,
										"nodeType": "StructuredDocumentation",
										"src": "874:73:11",
										"text": " @custom:section                           ** ERRORS **"
									},
									"errorSelector": "8579befe",
									"id": 1644,
									"name": "ZeroAddressNotAllowed",
									"nameLocation": "958:21:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1643,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "979:2:11"
									},
									"src": "952:30:11"
								},
								{
									"errorSelector": "2b4db67a",
									"id": 1646,
									"name": "MustTradeOverMin",
									"nameLocation": "993:16:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1645,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1009:2:11"
									},
									"src": "987:25:11"
								},
								{
									"errorSelector": "48565ad5",
									"id": 1648,
									"name": "MintAndRedeemFeeNotInRange",
									"nameLocation": "1023:26:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1647,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1049:2:11"
									},
									"src": "1017:35:11"
								},
								{
									"errorSelector": "7f176cee",
									"id": 1650,
									"name": "TeamFeeNotInRange",
									"nameLocation": "1063:17:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1080:2:11"
									},
									"src": "1057:26:11"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1651,
										"nodeType": "StructuredDocumentation",
										"src": "1089:77:11",
										"text": " @custom:section                           ** IMMUTABLES **"
									},
									"functionSelector": "029cd242",
									"id": 1654,
									"mutability": "immutable",
									"name": "_BACKING",
									"nameLocation": "1195:8:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "1171:32:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$877",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1653,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1652,
											"name": "IERC20",
											"nameLocations": [
												"1171:6:11"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 877,
											"src": "1171:6:11"
										},
										"referencedDeclaration": 877,
										"src": "1171:6:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$877",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1655,
										"nodeType": "StructuredDocumentation",
										"src": "1210:76:11",
										"text": " @custom:section                           ** CONSTANTS **"
									},
									"id": 1658,
									"mutability": "constant",
									"name": "_MIN",
									"nameLocation": "1316:4:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "1291:36:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1656,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1291:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31303030",
										"id": 1657,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1323:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1000_by_1",
											"typeString": "int_const 1000"
										},
										"value": "1000"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1661,
									"mutability": "constant",
									"name": "_FEE_BASE_1000",
									"nameLocation": "1358:14:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "1333:46:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1659,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1333:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31303030",
										"id": 1660,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1375:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1000_by_1",
											"typeString": "int_const 1000"
										},
										"value": "1000"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1662,
										"nodeType": "StructuredDocumentation",
										"src": "1386:83:11",
										"text": " @custom:section                           **  STATE VARIABLES **"
									},
									"functionSelector": "92054fe7",
									"id": 1665,
									"mutability": "mutable",
									"name": "MINT_AND_REDEEM_FEE",
									"nameLocation": "1489:19:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "1474:40:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1663,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1474:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "393637",
										"id": 1664,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1511:3:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_967_by_1",
											"typeString": "int_const 967"
										},
										"value": "967"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8b7b23ee",
									"id": 1668,
									"mutability": "mutable",
									"name": "FEES",
									"nameLocation": "1704:4:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "1689:24:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1666,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1689:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3335",
										"id": 1667,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1711:2:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_35_by_1",
											"typeString": "int_const 35"
										},
										"value": "35"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "eb2cd258",
									"id": 1670,
									"mutability": "mutable",
									"name": "totalBacking",
									"nameLocation": "1972:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "1957:27:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1669,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1957:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "41275358",
									"id": 1672,
									"mutability": "mutable",
									"name": "feeAddress",
									"nameLocation": "2013:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "1990:33:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 1671,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1990:15:11",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1674,
									"mutability": "mutable",
									"name": "start",
									"nameLocation": "2043:5:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "2030:18:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1673,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2030:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1680,
									"mutability": "mutable",
									"name": "initialOwner",
									"nameLocation": "2070:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 2174,
									"src": "2054:41:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1675,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2054:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "31",
												"id": 1678,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2093:1:11",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_1_by_1",
													"typeString": "int_const 1"
												},
												"value": "1"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_rational_1_by_1",
													"typeString": "int_const 1"
												}
											],
											"id": 1677,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "ElementaryTypeNameExpression",
											"src": "2085:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_address_$",
												"typeString": "type(address)"
											},
											"typeName": {
												"id": 1676,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2085:7:11",
												"typeDescriptions": {}
											}
										},
										"id": 1679,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2085:10:11",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1681,
										"nodeType": "StructuredDocumentation",
										"src": "2102:73:11",
										"text": " @custom:section                           ** EVENTS **"
									},
									"eventSelector": "079d4fba3fc168dbd2a0c2a5235112b3442d90a21282f7b69506d05a46fdbbb7",
									"id": 1689,
									"name": "PriceAfterMint",
									"nameLocation": "2186:14:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1683,
												"indexed": true,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "2226:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "2210:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1682,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1685,
												"indexed": true,
												"mutability": "mutable",
												"name": "recieved",
												"nameLocation": "2256:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "2240:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1687,
												"indexed": true,
												"mutability": "mutable",
												"name": "sent",
												"nameLocation": "2290:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "2274:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1686,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2274:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2200:100:11"
									},
									"src": "2180:121:11"
								},
								{
									"anonymous": false,
									"eventSelector": "1be07ad598d802b0a04e208e5f3dfe7eaf27339c0f0e4a75ddba517bbe5c8f36",
									"id": 1697,
									"name": "PriceAfterRedeem",
									"nameLocation": "2312:16:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1691,
												"indexed": true,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "2354:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "2338:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2338:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1693,
												"indexed": true,
												"mutability": "mutable",
												"name": "recieved",
												"nameLocation": "2384:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "2368:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2368:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1695,
												"indexed": true,
												"mutability": "mutable",
												"name": "sent",
												"nameLocation": "2418:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "2402:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2402:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2328:100:11"
									},
									"src": "2306:123:11"
								},
								{
									"anonymous": false,
									"eventSelector": "446e39bcf1b47cfadfaa23442cb4b34682cfe6bd9220da084894e3b1f834e4f3",
									"id": 1701,
									"name": "FeeAddressUpdated",
									"nameLocation": "2440:17:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1699,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeAddress",
												"nameLocation": "2474:13:11",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "2458:29:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2457:31:11"
									},
									"src": "2434:55:11"
								},
								{
									"anonymous": false,
									"eventSelector": "a3faf2f1eb729d9e646e40f512a8458c02057ee480d3b576a37e8a8ab30f0555",
									"id": 1705,
									"name": "TotalBackingFixed",
									"nameLocation": "2500:17:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1703,
												"indexed": true,
												"mutability": "mutable",
												"name": "totalBackingEmergencyFixed",
												"nameLocation": "2534:26:11",
												"nodeType": "VariableDeclaration",
												"scope": 1705,
												"src": "2518:42:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2518:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2517:44:11"
									},
									"src": "2494:68:11"
								},
								{
									"anonymous": false,
									"eventSelector": "a7aaf5668e7d5e60bfa38b5d07a3178204a2d8cb16f5a03678c20f42c7954295",
									"id": 1709,
									"name": "MintAndRedeemFeeUpdated",
									"nameLocation": "2573:23:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1707,
												"indexed": false,
												"mutability": "mutable",
												"name": "MINT_AND_REDEEM_FEE",
												"nameLocation": "2605:19:11",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "2597:27:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1706,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2597:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2596:29:11"
									},
									"src": "2567:59:11"
								},
								{
									"anonymous": false,
									"eventSelector": "9de4e85041d310d87df38a671e7ecf270c37d73ea017960b904af70512059621",
									"id": 1713,
									"name": "TeamFeeUpdated",
									"nameLocation": "2637:14:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1711,
												"indexed": false,
												"mutability": "mutable",
												"name": "FEES",
												"nameLocation": "2660:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "2652:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:14:11"
									},
									"src": "2631:35:11"
								},
								{
									"body": {
										"id": 1761,
										"nodeType": "Block",
										"src": "2861:227:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1728,
														"name": "_feeAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1716,
														"src": "2875:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1731,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2898:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1730,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2890:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1729,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2890:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1732,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2890:10:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2875:25:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1737,
												"nodeType": "IfStatement",
												"src": "2871:61:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1734,
															"name": "ZeroAddressNotAllowed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1644,
															"src": "2909:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1735,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2909:23:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1736,
													"nodeType": "RevertStatement",
													"src": "2902:30:11"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1738,
														"name": "_backing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1718,
														"src": "2946:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1741,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2966:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1740,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2958:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1739,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2958:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1742,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2958:10:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2946:22:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1747,
												"nodeType": "IfStatement",
												"src": "2942:58:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1744,
															"name": "ZeroAddressNotAllowed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1644,
															"src": "2977:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1745,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2977:23:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1746,
													"nodeType": "RevertStatement",
													"src": "2970:30:11"
												}
											},
											{
												"expression": {
													"id": 1753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1748,
														"name": "feeAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1672,
														"src": "3011:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1751,
																"name": "_feeAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1716,
																"src": "3032:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1750,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3024:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 1749,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3024:8:11",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 1752,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3024:20:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "3011:33:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 1754,
												"nodeType": "ExpressionStatement",
												"src": "3011:33:11"
											},
											{
												"expression": {
													"id": 1759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1755,
														"name": "_BACKING",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1654,
														"src": "3054:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$877",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1757,
																"name": "_backing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1718,
																"src": "3072:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1756,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 877,
															"src": "3065:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$877_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 1758,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3065:16:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$877",
															"typeString": "contract IERC20"
														}
													},
													"src": "3054:27:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$877",
														"typeString": "contract IERC20"
													}
												},
												"id": 1760,
												"nodeType": "ExpressionStatement",
												"src": "3054:27:11"
											}
										]
									},
									"documentation": {
										"id": 1714,
										"nodeType": "StructuredDocumentation",
										"src": "2672:78:11",
										"text": " @custom:section                           ** CONSTRUCTOR **"
									},
									"id": 1762,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "70616e7468656f6e20544f4b454e",
													"id": 1721,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2812:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_906ccb537327fdf258ce917257e88047cba70c38c1e3f274e6eadff7d2ea6223",
														"typeString": "literal_string \"pantheon TOKEN\""
													},
													"value": "pantheon TOKEN"
												},
												{
													"hexValue": "70544f4b454e",
													"id": 1722,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2830:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_f29d69b58788a6a578038d4f356baa3357893c532112ef290fa399db7b71550e",
														"typeString": "literal_string \"pTOKEN\""
													},
													"value": "pTOKEN"
												}
											],
											"id": 1723,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1720,
												"name": "ERC20",
												"nameLocations": [
													"2806:5:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 799,
												"src": "2806:5:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "2806:33:11"
										},
										{
											"arguments": [
												{
													"id": 1725,
													"name": "initialOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1680,
													"src": "2848:12:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1726,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1724,
												"name": "Ownable",
												"nameLocations": [
													"2840:7:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "2840:7:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "2840:21:11"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1716,
												"mutability": "mutable",
												"name": "_feeAddress",
												"nameLocation": "2775:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 1762,
												"src": "2767:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2767:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "_backing",
												"nameLocation": "2796:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1762,
												"src": "2788:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2766:39:11"
									},
									"returnParameters": {
										"id": 1727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2861:0:11"
									},
									"scope": 2174,
									"src": "2755:333:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1809,
										"nodeType": "Block",
										"src": "3462:275:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1772,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "3480:6:11",
															"subExpression": {
																"id": 1771,
																"name": "start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1674,
																"src": "3481:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1770,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3472:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3472:15:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1774,
												"nodeType": "ExpressionStatement",
												"src": "3472:15:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1778,
															"name": "_BACKING",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1654,
															"src": "3524:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1779,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3534:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3538:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3534:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1783,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3554:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_pTOKEN_$2174",
																		"typeString": "contract pTOKEN"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_pTOKEN_$2174",
																		"typeString": "contract pTOKEN"
																	}
																],
																"id": 1782,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3546:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1781,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3546:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3546:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1785,
															"name": "_value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1765,
															"src": "3561:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1775,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "3497:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$1275_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1777,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3507:16:11",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1062,
														"src": "3497:26:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3497:71:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1787,
												"nodeType": "ExpressionStatement",
												"src": "3497:71:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1789,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3584:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1790,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3588:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3584:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1791,
															"name": "_value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1765,
															"src": "3596:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1788,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "3578:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3578:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1793,
												"nodeType": "ExpressionStatement",
												"src": "3578:25:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303064456144",
															"id": 1795,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3622:42:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x000000000000000000000000000000000000dEaD"
														},
														{
															"hexValue": "31303030",
															"id": 1796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3666:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															},
															"value": "1000"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															}
														],
														"id": 1794,
														"name": "transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "3613:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) returns (bool)"
														}
													},
													"id": 1797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3613:58:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1798,
												"nodeType": "ExpressionStatement",
												"src": "3613:58:11"
											},
											{
												"expression": {
													"id": 1807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1799,
														"name": "totalBacking",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1670,
														"src": "3682:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1804,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "3724:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_pTOKEN_$2174",
																			"typeString": "contract pTOKEN"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_pTOKEN_$2174",
																			"typeString": "contract pTOKEN"
																		}
																	],
																	"id": 1803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3716:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1802,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3716:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1805,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3716:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1800,
																"name": "_BACKING",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1654,
																"src": "3697:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$877",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1801,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3706:9:11",
															"memberName": "balanceOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 834,
															"src": "3697:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view external returns (uint256)"
															}
														},
														"id": 1806,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3697:33:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3682:48:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1808,
												"nodeType": "ExpressionStatement",
												"src": "3682:48:11"
											}
										]
									},
									"documentation": {
										"id": 1763,
										"nodeType": "StructuredDocumentation",
										"src": "3185:215:11",
										"text": " @param _value: Fill the contract with the first amount of _BACKING\n @notice need start = false\n @notice  this function doesn't have fees, it will mint pTOKEN in a 1:1 ratio with _value"
									},
									"functionSelector": "a88df21a",
									"id": 1810,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1768,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1767,
												"name": "onlyOwner",
												"nameLocations": [
													"3452:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "3452:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "3452:9:11"
										}
									],
									"name": "fillContract",
									"nameLocation": "3414:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "3435:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1810,
												"src": "3427:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3427:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3426:16:11"
									},
									"returnParameters": {
										"id": 1769,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3462:0:11"
									},
									"scope": 2174,
									"src": "3405:332:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1819,
										"nodeType": "Block",
										"src": "3782:33:11",
										"statements": [
											{
												"expression": {
													"id": 1817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1815,
														"name": "start",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1674,
														"src": "3796:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1816,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3804:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3796:12:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1818,
												"nodeType": "ExpressionStatement",
												"src": "3796:12:11"
											}
										]
									},
									"functionSelector": "35975a37",
									"id": 1820,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1813,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1812,
												"name": "onlyOwner",
												"nameLocations": [
													"3772:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "3772:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "3772:9:11"
										}
									],
									"name": "setStart",
									"nameLocation": "3752:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1811,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3760:2:11"
									},
									"returnParameters": {
										"id": 1814,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3782:0:11"
									},
									"scope": 2174,
									"src": "3743:72:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1883,
										"nodeType": "Block",
										"src": "4193:458:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1830,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1825,
														"src": "4207:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1831,
														"name": "_MIN",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1658,
														"src": "4217:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4207:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1836,
												"nodeType": "IfStatement",
												"src": "4203:45:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1833,
															"name": "MustTradeOverMin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1646,
															"src": "4230:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1834,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4230:18:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1835,
													"nodeType": "RevertStatement",
													"src": "4223:25:11"
												}
											},
											{
												"assignments": [
													1838
												],
												"declarations": [
													{
														"constant": false,
														"id": 1838,
														"mutability": "mutable",
														"name": "pToken",
														"nameLocation": "4267:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1883,
														"src": "4259:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1837,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4259:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1842,
												"initialValue": {
													"arguments": [
														{
															"id": 1840,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1825,
															"src": "4293:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1839,
														"name": "_BACKINGtoPTOKEN",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2106,
														"src": "4276:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4276:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4259:42:11"
											},
											{
												"assignments": [
													1844
												],
												"declarations": [
													{
														"constant": false,
														"id": 1844,
														"mutability": "mutable",
														"name": "backingToFeeAddress",
														"nameLocation": "4320:19:11",
														"nodeType": "VariableDeclaration",
														"scope": 1883,
														"src": "4312:27:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1843,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4312:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1848,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1845,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1825,
														"src": "4342:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1846,
														"name": "FEES",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1668,
														"src": "4352:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4342:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4312:44:11"
											},
											{
												"expression": {
													"id": 1854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1849,
														"name": "totalBacking",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1670,
														"src": "4366:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1852,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1850,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1825,
																	"src": "4383:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1851,
																	"name": "backingToFeeAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1844,
																	"src": "4393:19:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4383:29:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1853,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4382:31:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4366:47:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1855,
												"nodeType": "ExpressionStatement",
												"src": "4366:47:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1859,
															"name": "_BACKING",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1654,
															"src": "4451:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1860,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4461:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4465:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4461:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1862,
															"name": "feeAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1672,
															"src": "4473:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1863,
															"name": "backingToFeeAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1844,
															"src": "4485:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1856,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "4424:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$1275_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1858,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4434:16:11",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1062,
														"src": "4424:26:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4424:81:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1865,
												"nodeType": "ExpressionStatement",
												"src": "4424:81:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1867,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1823,
															"src": "4522:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1873,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1870,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1868,
																			"name": "pToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1838,
																			"src": "4533:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1869,
																			"name": "MINT_AND_REDEEM_FEE",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1665,
																			"src": "4542:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4533:28:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1871,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4532:30:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1872,
																"name": "_FEE_BASE_1000",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1661,
																"src": "4565:14:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4532:47:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1866,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "4516:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4516:64:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1875,
												"nodeType": "ExpressionStatement",
												"src": "4516:64:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1877,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "4611:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4617:9:11",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "4611:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1879,
															"name": "pToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1838,
															"src": "4628:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1880,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1825,
															"src": "4636:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1876,
														"name": "PriceAfterMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1689,
														"src": "4596:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256,uint256)"
														}
													},
													"id": 1881,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4596:48:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1882,
												"nodeType": "EmitStatement",
												"src": "4591:53:11"
											}
										]
									},
									"documentation": {
										"id": 1821,
										"nodeType": "StructuredDocumentation",
										"src": "3821:296:11",
										"text": " @param receiver: is the address that will receive the pTOKEN minted\n @notice This function is used by users that want to mint pTOKEN by depositing the corrisponding amount of Backing + a dynamic fee\n @notice The Backing / pTOKEN ratio will increase after every mint"
									},
									"functionSelector": "40c10f19",
									"id": 1884,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1828,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1827,
												"name": "nonReentrant",
												"nameLocations": [
													"4180:12:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1583,
												"src": "4180:12:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4180:12:11"
										}
									],
									"name": "mint",
									"nameLocation": "4131:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1823,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "4144:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1884,
												"src": "4136:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1822,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1825,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "4162:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1884,
												"src": "4154:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1824,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4154:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:35:11"
									},
									"returnParameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4193:0:11"
									},
									"scope": 2174,
									"src": "4122:529:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1965,
										"nodeType": "Block",
										"src": "5099:607:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1892,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1887,
														"src": "5113:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1893,
														"name": "_MIN",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1658,
														"src": "5123:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5113:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1898,
												"nodeType": "IfStatement",
												"src": "5109:45:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1895,
															"name": "MustTradeOverMin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1646,
															"src": "5136:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1896,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5136:18:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1897,
													"nodeType": "RevertStatement",
													"src": "5129:25:11"
												}
											},
											{
												"assignments": [
													1900
												],
												"declarations": [
													{
														"constant": false,
														"id": 1900,
														"mutability": "mutable",
														"name": "pToken",
														"nameLocation": "5173:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1965,
														"src": "5165:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1899,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5165:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1904,
												"initialValue": {
													"arguments": [
														{
															"id": 1902,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1887,
															"src": "5199:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1901,
														"name": "_PTOKENtoBACKING",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2088,
														"src": "5182:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5165:42:11"
											},
											{
												"assignments": [
													1906
												],
												"declarations": [
													{
														"constant": false,
														"id": 1906,
														"mutability": "mutable",
														"name": "backingToFeeAddress",
														"nameLocation": "5226:19:11",
														"nodeType": "VariableDeclaration",
														"scope": 1965,
														"src": "5218:27:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1905,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5218:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1910,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1907,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1887,
														"src": "5248:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1908,
														"name": "FEES",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1668,
														"src": "5258:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5248:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5218:44:11"
											},
											{
												"assignments": [
													1912
												],
												"declarations": [
													{
														"constant": false,
														"id": 1912,
														"mutability": "mutable",
														"name": "backingToSender",
														"nameLocation": "5280:15:11",
														"nodeType": "VariableDeclaration",
														"scope": 1965,
														"src": "5272:23:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1911,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5272:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1919,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1913,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1887,
																	"src": "5299:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1914,
																	"name": "MINT_AND_REDEEM_FEE",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1665,
																	"src": "5309:19:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5299:29:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1916,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5298:31:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1917,
														"name": "_FEE_BASE_1000",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1661,
														"src": "5332:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5298:48:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5272:74:11"
											},
											{
												"expression": {
													"id": 1925,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1920,
														"name": "totalBacking",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1670,
														"src": "5356:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1923,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1921,
																	"name": "backingToSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1912,
																	"src": "5373:15:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 1922,
																	"name": "backingToFeeAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1906,
																	"src": "5391:19:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5373:37:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1924,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5372:39:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5356:55:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1926,
												"nodeType": "ExpressionStatement",
												"src": "5356:55:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1928,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5428:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1929,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5432:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5428:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1930,
															"name": "pToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1900,
															"src": "5440:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1927,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "5422:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5422:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1932,
												"nodeType": "ExpressionStatement",
												"src": "5422:25:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1936,
															"name": "_BACKING",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1654,
															"src": "5485:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"id": 1939,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5503:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_pTOKEN_$2174",
																		"typeString": "contract pTOKEN"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_pTOKEN_$2174",
																		"typeString": "contract pTOKEN"
																	}
																],
																"id": 1938,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5495:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1937,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5495:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1940,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5495:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1941,
															"name": "feeAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1672,
															"src": "5510:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1942,
															"name": "backingToFeeAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1906,
															"src": "5522:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1933,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "5458:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$1275_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1935,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5468:16:11",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1062,
														"src": "5458:26:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5458:84:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1944,
												"nodeType": "ExpressionStatement",
												"src": "5458:84:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1948,
															"name": "_BACKING",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1654,
															"src": "5580:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"id": 1951,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5598:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_pTOKEN_$2174",
																		"typeString": "contract pTOKEN"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_pTOKEN_$2174",
																		"typeString": "contract pTOKEN"
																	}
																],
																"id": 1950,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5590:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1949,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5590:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1952,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5590:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1953,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5605:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1954,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5609:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5605:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1955,
															"name": "backingToSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1912,
															"src": "5617:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$877",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1945,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "5553:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$1275_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1947,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5563:16:11",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1062,
														"src": "5553:26:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$877_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1956,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5553:80:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1957,
												"nodeType": "ExpressionStatement",
												"src": "5553:80:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1959,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5666:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5672:9:11",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "5666:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1961,
															"name": "pToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1900,
															"src": "5683:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1962,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1887,
															"src": "5691:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1958,
														"name": "PriceAfterRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1697,
														"src": "5649:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256,uint256)"
														}
													},
													"id": 1963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5649:50:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1964,
												"nodeType": "EmitStatement",
												"src": "5644:55:11"
											}
										]
									},
									"documentation": {
										"id": 1885,
										"nodeType": "StructuredDocumentation",
										"src": "4657:382:11",
										"text": " @param _amount: is the amount of pTOKEN that the user want to burn in order to redeem the corrisponding amount of Backing\n @notice This function is used by users that want to burn their balance of pTOKEN and redeem the corrisponding amount of Backing - dynamic fees from 2% up to 5%\n @notice The Backing / pTOKEN ratio will increase after every redeem"
									},
									"functionSelector": "db006a75",
									"id": 1966,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1890,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1889,
												"name": "nonReentrant",
												"nameLocations": [
													"5086:12:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1583,
												"src": "5086:12:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "5086:12:11"
										}
									],
									"name": "redeem",
									"nameLocation": "5053:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1887,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "5068:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "5060:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5060:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5059:17:11"
									},
									"returnParameters": {
										"id": 1891,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5099:0:11"
									},
									"scope": 2174,
									"src": "5044:662:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1989,
										"nodeType": "Block",
										"src": "5946:131:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1975,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1969,
															"src": "5978:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1974,
														"name": "_assemblyOwnerNotZero",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2114,
														"src": "5956:21:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$returns$__$",
															"typeString": "function (address) pure"
														}
													},
													"id": 1976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5956:31:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1977,
												"nodeType": "ExpressionStatement",
												"src": "5956:31:11"
											},
											{
												"expression": {
													"id": 1983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1978,
														"name": "feeAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1672,
														"src": "5997:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1981,
																"name": "_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1969,
																"src": "6018:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1980,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6010:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 1979,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6010:8:11",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 1982,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6010:17:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "5997:30:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 1984,
												"nodeType": "ExpressionStatement",
												"src": "5997:30:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1986,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1969,
															"src": "6061:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1985,
														"name": "FeeAddressUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1701,
														"src": "6043:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1987,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6043:27:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1988,
												"nodeType": "EmitStatement",
												"src": "6038:32:11"
											}
										]
									},
									"documentation": {
										"id": 1967,
										"nodeType": "StructuredDocumentation",
										"src": "5712:169:11",
										"text": " @param _address: The Address that will receive the Liquidty Incentives and Team Fee\n @notice This function will be used to update the feeAddress"
									},
									"functionSelector": "8705fcd4",
									"id": 1990,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1972,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1971,
												"name": "onlyOwner",
												"nameLocations": [
													"5936:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "5936:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "5936:9:11"
										}
									],
									"name": "setFeeAddress",
									"nameLocation": "5895:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1969,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "5917:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1990,
												"src": "5909:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1968,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5909:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5908:18:11"
									},
									"returnParameters": {
										"id": 1973,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5946:0:11"
									},
									"scope": 2174,
									"src": "5886:191:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2017,
										"nodeType": "Block",
										"src": "6320:173:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"id": 2000,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1998,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1993,
															"src": "6333:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "393830",
															"id": 1999,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6343:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_980_by_1",
																"typeString": "int_const 980"
															},
															"value": "980"
														},
														"src": "6333:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"id": 2003,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2001,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1993,
															"src": "6350:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "393530",
															"id": 2002,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6360:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_950_by_1",
																"typeString": "int_const 950"
															},
															"value": "950"
														},
														"src": "6350:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6333:30:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2008,
												"nodeType": "IfStatement",
												"src": "6330:70:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2005,
															"name": "MintAndRedeemFeeNotInRange",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "6372:26:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2006,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6372:28:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2007,
													"nodeType": "RevertStatement",
													"src": "6365:35:11"
												}
											},
											{
												"expression": {
													"id": 2011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2009,
														"name": "MINT_AND_REDEEM_FEE",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1665,
														"src": "6410:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2010,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1993,
														"src": "6432:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "6410:29:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2012,
												"nodeType": "ExpressionStatement",
												"src": "6410:29:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2014,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1993,
															"src": "6478:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"id": 2013,
														"name": "MintAndRedeemFeeUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1709,
														"src": "6454:23:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6454:32:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2016,
												"nodeType": "EmitStatement",
												"src": "6449:37:11"
											}
										]
									},
									"documentation": {
										"id": 1991,
										"nodeType": "StructuredDocumentation",
										"src": "6083:168:11",
										"text": " @param _amount: total fee amount, 1000 / _amount / 100 = total fee percentage\n @notice this function is used by Owner to modify the total FEE %"
									},
									"functionSelector": "f40fa4bc",
									"id": 2018,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1996,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1995,
												"name": "onlyOwner",
												"nameLocations": [
													"6310:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "6310:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "6310:9:11"
										}
									],
									"name": "setMintAndRedeemFee",
									"nameLocation": "6265:19:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1993,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "6292:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2018,
												"src": "6285:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1992,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6285:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6284:16:11"
									},
									"returnParameters": {
										"id": 1997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6320:0:11"
									},
									"scope": 2174,
									"src": "6256:237:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2045,
										"nodeType": "Block",
										"src": "6744:140:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"id": 2028,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2026,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "6757:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "313030",
															"id": 2027,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6767:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														},
														"src": "6757:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"id": 2031,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2029,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "6774:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "3235",
															"id": 2030,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6784:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_25_by_1",
																"typeString": "int_const 25"
															},
															"value": "25"
														},
														"src": "6774:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6757:29:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2036,
												"nodeType": "IfStatement",
												"src": "6754:60:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2033,
															"name": "TeamFeeNotInRange",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1650,
															"src": "6795:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2034,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6795:19:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2035,
													"nodeType": "RevertStatement",
													"src": "6788:26:11"
												}
											},
											{
												"expression": {
													"id": 2039,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2037,
														"name": "FEES",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1668,
														"src": "6825:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2038,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2021,
														"src": "6832:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "6825:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2040,
												"nodeType": "ExpressionStatement",
												"src": "6825:14:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2042,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "6869:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"id": 2041,
														"name": "TeamFeeUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1713,
														"src": "6854:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6854:23:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2044,
												"nodeType": "EmitStatement",
												"src": "6849:28:11"
											}
										]
									},
									"documentation": {
										"id": 2019,
										"nodeType": "StructuredDocumentation",
										"src": "6499:185:11",
										"text": " @param _amount: \n @notice Team fee can't be more than 4% and less than 1% \n @notice Incentives for liquidity providers are included in the Team fee (FEES)"
									},
									"functionSelector": "c38f2bfe",
									"id": 2046,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2024,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2023,
												"name": "onlyOwner",
												"nameLocations": [
													"6734:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "6734:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "6734:9:11"
										}
									],
									"name": "setTeamFee",
									"nameLocation": "6698:10:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2021,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "6716:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "6709:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 2020,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6709:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6708:16:11"
									},
									"returnParameters": {
										"id": 2025,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6744:0:11"
									},
									"scope": 2174,
									"src": "6689:195:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2070,
										"nodeType": "Block",
										"src": "7078:121:11",
										"statements": [
											{
												"expression": {
													"id": 2060,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2052,
														"name": "totalBacking",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1670,
														"src": "7088:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2057,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "7130:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_pTOKEN_$2174",
																			"typeString": "contract pTOKEN"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_pTOKEN_$2174",
																			"typeString": "contract pTOKEN"
																		}
																	],
																	"id": 2056,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7122:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2055,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7122:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2058,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7122:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 2053,
																"name": "_BACKING",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1654,
																"src": "7103:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$877",
																	"typeString": "contract IERC20"
																}
															},
															"id": 2054,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7112:9:11",
															"memberName": "balanceOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 834,
															"src": "7103:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view external returns (uint256)"
															}
														},
														"id": 2059,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7103:33:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7088:48:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2061,
												"nodeType": "ExpressionStatement",
												"src": "7088:48:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2065,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "7178:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_pTOKEN_$2174",
																			"typeString": "contract pTOKEN"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_pTOKEN_$2174",
																			"typeString": "contract pTOKEN"
																		}
																	],
																	"id": 2064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7170:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2063,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7170:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2066,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7170:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2067,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7184:7:11",
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "7170:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2062,
														"name": "TotalBackingFixed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1705,
														"src": "7152:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7152:40:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2069,
												"nodeType": "EmitStatement",
												"src": "7147:45:11"
											}
										]
									},
									"documentation": {
										"id": 2047,
										"nodeType": "StructuredDocumentation",
										"src": "6890:128:11",
										"text": " @notice This function is used to reflect the correct amount of totalBacking in case some unexpected bug occur"
									},
									"functionSelector": "16f9b467",
									"id": 2071,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2050,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2049,
												"name": "onlyOwner",
												"nameLocations": [
													"7068:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "7068:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "7068:9:11"
										}
									],
									"name": "emergencyFixTotalBacking",
									"nameLocation": "7032:24:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7056:2:11"
									},
									"returnParameters": {
										"id": 2051,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7078:0:11"
									},
									"scope": 2174,
									"src": "7023:176:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2087,
										"nodeType": "Block",
										"src": "7623:63:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2081,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2079,
																	"name": "_value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2074,
																	"src": "7641:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2080,
																	"name": "totalBacking",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1670,
																	"src": "7650:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7641:21:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2082,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7640:23:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2083,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 372,
															"src": "7666:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 2084,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7666:13:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7640:39:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2078,
												"id": 2086,
												"nodeType": "Return",
												"src": "7633:46:11"
											}
										]
									},
									"documentation": {
										"id": 2072,
										"nodeType": "StructuredDocumentation",
										"src": "7386:159:11",
										"text": " @param _value: is the amount of backing\n @notice This function is used inside other function to get the current backing / pTOKEN ratio"
									},
									"id": 2088,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_PTOKENtoBACKING",
									"nameLocation": "7559:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2074,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "7584:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "7576:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7576:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7575:16:11"
									},
									"returnParameters": {
										"id": 2078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2077,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "7614:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7614:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7613:9:11"
									},
									"scope": 2174,
									"src": "7550:136:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2105,
										"nodeType": "Block",
										"src": "7928:65:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2099,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2096,
																	"name": "_value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "7946:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2097,
																		"name": "totalSupply",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 372,
																		"src": "7955:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 2098,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7955:13:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7946:22:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2100,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7945:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"components": [
															{
																"id": 2101,
																"name": "totalBacking",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1670,
																"src": "7973:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2102,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7972:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7945:41:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2095,
												"id": 2104,
												"nodeType": "Return",
												"src": "7938:48:11"
											}
										]
									},
									"documentation": {
										"id": 2089,
										"nodeType": "StructuredDocumentation",
										"src": "7692:158:11",
										"text": " @param _value: is the amount of pTOKEN\n @notice This function is used inside other function to get the current pTOKEN / Backing ratio"
									},
									"id": 2106,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_BACKINGtoPTOKEN",
									"nameLocation": "7864:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2091,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "7889:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "7881:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7881:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7880:16:11"
									},
									"returnParameters": {
										"id": 2095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2094,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "7919:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7919:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7918:9:11"
									},
									"scope": 2174,
									"src": "7855:138:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2113,
										"nodeType": "Block",
										"src": "8386:161:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8405:136:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8436:95:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8461:4:11",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"hexValue": "5a65726f2061646472657373",
																					"kind": "string",
																					"nodeType": "YulLiteral",
																					"src": "8467:14:11",
																					"type": "",
																					"value": "Zero address"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8454:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8454:28:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8454:28:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8506:4:11",
																					"type": "",
																					"value": "0x00"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8512:4:11",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8499:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8499:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8499:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_addr",
																		"nodeType": "YulIdentifier",
																		"src": "8429:5:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8422:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8422:13:11"
															},
															"nodeType": "YulIf",
															"src": "8419:112:11"
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2109,
														"isOffset": false,
														"isSlot": false,
														"src": "8429:5:11",
														"valueSize": 1
													}
												],
												"id": 2112,
												"nodeType": "InlineAssembly",
												"src": "8396:145:11"
											}
										]
									},
									"documentation": {
										"id": 2107,
										"nodeType": "StructuredDocumentation",
										"src": "7999:323:11",
										"text": " @param _addr: Is the address used in the functions that call the _assemblyOwnerNotZero function\n @notice This function is used inside other function to check that the address put as parameter is different from the zero address. It saves gas compared to a if statement + a revert with a custom error"
									},
									"id": 2114,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_assemblyOwnerNotZero",
									"nameLocation": "8336:21:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "_addr",
												"nameLocation": "8366:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "8358:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8358:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8357:15:11"
									},
									"returnParameters": {
										"id": 2111,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8386:0:11"
									},
									"scope": 2174,
									"src": "8327:220:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2138,
										"nodeType": "Block",
										"src": "8902:147:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2133,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2126,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2122,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2117,
																			"src": "8932:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"components": [
																				{
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2123,
																						"name": "totalSupply",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 372,
																						"src": "8943:11:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																							"typeString": "function () view returns (uint256)"
																						}
																					},
																					"id": 2124,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8943:13:11",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 2125,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "8942:15:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8932:25:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"components": [
																			{
																				"id": 2127,
																				"name": "MINT_AND_REDEEM_FEE",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1665,
																				"src": "8961:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2128,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8960:21:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8932:49:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2130,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8931:51:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"components": [
																{
																	"id": 2131,
																	"name": "totalBacking",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1670,
																	"src": "8998:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2132,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8997:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "8931:80:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"components": [
															{
																"id": 2134,
																"name": "_FEE_BASE_1000",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1661,
																"src": "9027:14:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2135,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9026:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8931:111:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2121,
												"id": 2137,
												"nodeType": "Return",
												"src": "8912:130:11"
											}
										]
									},
									"documentation": {
										"id": 2115,
										"nodeType": "StructuredDocumentation",
										"src": "8657:169:11",
										"text": " @param _amount: is the amount of backing\n @notice This function is used inside other function to get the current Mint price of pTOKEN in Backing"
									},
									"functionSelector": "559e775b",
									"id": 2139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMintPrice",
									"nameLocation": "8840:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2117,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "8861:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "8853:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8853:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8852:17:11"
									},
									"returnParameters": {
										"id": 2121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2120,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "8893:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8893:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8892:9:11"
									},
									"scope": 2174,
									"src": "8831:218:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2163,
										"nodeType": "Block",
										"src": "9303:147:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2158,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2153,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2149,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2147,
																					"name": "_amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2142,
																					"src": "9334:7:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"id": 2148,
																					"name": "totalBacking",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1670,
																					"src": "9344:12:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9334:22:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2150,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9333:24:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"components": [
																			{
																				"id": 2151,
																				"name": "MINT_AND_REDEEM_FEE",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1665,
																				"src": "9361:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2152,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9360:21:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "9333:48:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2154,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "9332:50:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"components": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2155,
																		"name": "totalSupply",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 372,
																		"src": "9398:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 2156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9398:13:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2157,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "9397:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "9332:80:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"components": [
															{
																"id": 2159,
																"name": "_FEE_BASE_1000",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1661,
																"src": "9428:14:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2160,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9427:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9332:111:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2146,
												"id": 2162,
												"nodeType": "Return",
												"src": "9313:130:11"
											}
										]
									},
									"documentation": {
										"id": 2140,
										"nodeType": "StructuredDocumentation",
										"src": "9055:170:11",
										"text": " @param _amount: is the amount of pTOKEN\n @notice This function is used inside other function to get the current Redeem price of pTOKEN in Backing"
									},
									"functionSelector": "a492fbc6",
									"id": 2164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRedeemPrice",
									"nameLocation": "9239:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2142,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "9262:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2164,
												"src": "9254:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9254:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9253:17:11"
									},
									"returnParameters": {
										"id": 2146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2164,
												"src": "9294:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9294:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9293:9:11"
									},
									"scope": 2174,
									"src": "9230:220:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2172,
										"nodeType": "Block",
										"src": "9641:36:11",
										"statements": [
											{
												"expression": {
													"id": 2170,
													"name": "totalBacking",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1670,
													"src": "9658:12:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2169,
												"id": 2171,
												"nodeType": "Return",
												"src": "9651:19:11"
											}
										]
									},
									"documentation": {
										"id": 2165,
										"nodeType": "StructuredDocumentation",
										"src": "9456:121:11",
										"text": " @notice This function is used inside other function to get the total amount of Backing in the contract"
									},
									"functionSelector": "19f04174",
									"id": 2173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTotalBacking",
									"nameLocation": "9591:15:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9606:2:11"
									},
									"returnParameters": {
										"id": 2169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2173,
												"src": "9632:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9632:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9631:9:11"
									},
									"scope": 2174,
									"src": "9582:95:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2175,
							"src": "775:8904:11",
							"usedErrors": [
								13,
								18,
								159,
								164,
								169,
								178,
								183,
								188,
								1002,
								1283,
								1288,
								1291,
								1564,
								1644,
								1646,
								1648,
								1650
							],
							"usedEvents": [
								24,
								811,
								820,
								1689,
								1697,
								1701,
								1705,
								1709,
								1713
							]
						}
					],
					"src": "31:9648:11"
				},
				"id": 11
			}
		}
	}
}